# Auto-generated by the generate_classes.py file on: 2022/04/17. #

from typing import Optional

from obs.obs_base_classes import BaseEvents


class BroadcastCustomMessage(BaseEvents):
    """A custom broadcast message, sent by the server, requested by one of the websocket clients.

    Returns:
        data (object): User-defined data
        realm (str): Identifier provided by the sender
    """

    def __init__(self):
        """Init."""

        super(BroadcastCustomMessage, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'BroadcastCustomMessage'
        self.data_in['data'] = None
        self.data_in['realm'] = None
        return self

    async def get_data(self):
        return self.data_in['data']

    async def get_realm(self):
        return self.data_in['realm']


class Exiting(BaseEvents):
    """OBS is exiting."""

    def __init__(self):
        """Init."""

        super(Exiting, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'Exiting'
        return self


class Heartbeat(BaseEvents):
    """Emitted every 2 seconds after enabling it by calling SetHeartbeat.

    Returns:
        current-profile (str): Current active profile.
        current-scene (str): Current active scene.
        pulse (bool): Toggles between every JSON message as an "I am alive" indicator.
        recording (bool): Current recording state.
        stats (OBSStats): OBS Stats
        streaming (bool): Current streaming state.
        total-record-bytes (int): Total bytes recorded since the recording started.
        total-record-frames (int): Total frames recorded since the recording started.
        total-record-time (int): Total time (in seconds) since recording started.
        total-stream-bytes (int): Total bytes sent since the stream started.
        total-stream-frames (int): Total frames streamed since the stream started.
        total-stream-time (int): Total time (in seconds) since the stream started.
    """

    def __init__(self):
        """Init."""

        super(Heartbeat, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'Heartbeat'
        self.data_in['current-profile'] = None
        self.data_in['current-scene'] = None
        self.data_in['pulse'] = None
        self.data_in['recording'] = None
        self.data_in['stats'] = None
        self.data_in['streaming'] = None
        self.data_in['total-record-bytes'] = None
        self.data_in['total-record-frames'] = None
        self.data_in['total-record-time'] = None
        self.data_in['total-stream-bytes'] = None
        self.data_in['total-stream-frames'] = None
        self.data_in['total-stream-time'] = None
        return self

    async def get_current_profile(self):
        return self.data_in['current-profile']

    async def get_current_scene(self):
        return self.data_in['current-scene']

    async def get_pulse(self):
        return self.data_in['pulse']

    async def get_recording(self):
        return self.data_in['recording']

    async def get_stats(self):
        return self.data_in['stats']

    async def get_streaming(self):
        return self.data_in['streaming']

    async def get_total_record_bytes(self):
        return self.data_in['total-record-bytes']

    async def get_total_record_frames(self):
        return self.data_in['total-record-frames']

    async def get_total_record_time(self):
        return self.data_in['total-record-time']

    async def get_total_stream_bytes(self):
        return self.data_in['total-stream-bytes']

    async def get_total_stream_frames(self):
        return self.data_in['total-stream-frames']

    async def get_total_stream_time(self):
        return self.data_in['total-stream-time']


class MediaEnded(BaseEvents):
    """Note: These events are emitted by the OBS sources themselves. For example when the media file ends. The behavior depends on the type of media source being used.

    Returns:
        sourceKind (str): The ID type of the source (Eg. `vlc_source` or `ffmpeg_source`)
        sourceName (str): Source name
    """

    def __init__(self):
        """Init."""

        super(MediaEnded, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'MediaEnded'
        self.data_in['sourceKind'] = None
        self.data_in['sourceName'] = None
        return self

    async def get_sourceKind(self):
        return self.data_in['sourceKind']

    async def get_sourceName(self):
        return self.data_in['sourceName']


class MediaNext(BaseEvents):
    """Note: This event is only emitted when something actively controls the media/VLC source. In other words, the source will never emit this on its own naturally.

    Returns:
        sourceKind (str): The ID type of the source (Eg. `vlc_source` or `ffmpeg_source`)
        sourceName (str): Source name
    """

    def __init__(self):
        """Init."""

        super(MediaNext, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'MediaNext'
        self.data_in['sourceKind'] = None
        self.data_in['sourceName'] = None
        return self

    async def get_sourceKind(self):
        return self.data_in['sourceKind']

    async def get_sourceName(self):
        return self.data_in['sourceName']


class MediaPaused(BaseEvents):
    """Note: This event is only emitted when something actively controls the media/VLC source. In other words, the source will never emit this on its own naturally.

    Returns:
        sourceKind (str): The ID type of the source (Eg. `vlc_source` or `ffmpeg_source`)
        sourceName (str): Source name
    """

    def __init__(self):
        """Init."""

        super(MediaPaused, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'MediaPaused'
        self.data_in['sourceKind'] = None
        self.data_in['sourceName'] = None
        return self

    async def get_sourceKind(self):
        return self.data_in['sourceKind']

    async def get_sourceName(self):
        return self.data_in['sourceName']


class MediaPlaying(BaseEvents):
    """Note: This event is only emitted when something actively controls the media/VLC source. In other words, the source will never emit this on its own naturally.

    Returns:
        sourceKind (str): The ID type of the source (Eg. `vlc_source` or `ffmpeg_source`)
        sourceName (str): Source name
    """

    def __init__(self):
        """Init."""

        super(MediaPlaying, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'MediaPlaying'
        self.data_in['sourceKind'] = None
        self.data_in['sourceName'] = None
        return self

    async def get_sourceKind(self):
        return self.data_in['sourceKind']

    async def get_sourceName(self):
        return self.data_in['sourceName']


class MediaPrevious(BaseEvents):
    """Note: This event is only emitted when something actively controls the media/VLC source. In other words, the source will never emit this on its own naturally.

    Returns:
        sourceKind (str): The ID type of the source (Eg. `vlc_source` or `ffmpeg_source`)
        sourceName (str): Source name
    """

    def __init__(self):
        """Init."""

        super(MediaPrevious, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'MediaPrevious'
        self.data_in['sourceKind'] = None
        self.data_in['sourceName'] = None
        return self

    async def get_sourceKind(self):
        return self.data_in['sourceKind']

    async def get_sourceName(self):
        return self.data_in['sourceName']


class MediaRestarted(BaseEvents):
    """Note: This event is only emitted when something actively controls the media/VLC source. In other words, the source will never emit this on its own naturally.

    Returns:
        sourceKind (str): The ID type of the source (Eg. `vlc_source` or `ffmpeg_source`)
        sourceName (str): Source name
    """

    def __init__(self):
        """Init."""

        super(MediaRestarted, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'MediaRestarted'
        self.data_in['sourceKind'] = None
        self.data_in['sourceName'] = None
        return self

    async def get_sourceKind(self):
        return self.data_in['sourceKind']

    async def get_sourceName(self):
        return self.data_in['sourceName']


class MediaStarted(BaseEvents):
    """Note: These events are emitted by the OBS sources themselves. For example when the media file starts playing. The behavior depends on the type of media source being used.

    Returns:
        sourceKind (str): The ID type of the source (Eg. `vlc_source` or `ffmpeg_source`)
        sourceName (str): Source name
    """

    def __init__(self):
        """Init."""

        super(MediaStarted, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'MediaStarted'
        self.data_in['sourceKind'] = None
        self.data_in['sourceName'] = None
        return self

    async def get_sourceKind(self):
        return self.data_in['sourceKind']

    async def get_sourceName(self):
        return self.data_in['sourceName']


class MediaStopped(BaseEvents):
    """Note: This event is only emitted when something actively controls the media/VLC source. In other words, the source will never emit this on its own naturally.

    Returns:
        sourceKind (str): The ID type of the source (Eg. `vlc_source` or `ffmpeg_source`)
        sourceName (str): Source name
    """

    def __init__(self):
        """Init."""

        super(MediaStopped, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'MediaStopped'
        self.data_in['sourceKind'] = None
        self.data_in['sourceName'] = None
        return self

    async def get_sourceKind(self):
        return self.data_in['sourceKind']

    async def get_sourceName(self):
        return self.data_in['sourceName']


class PreviewSceneChanged(BaseEvents):
    """The selected preview scene has changed (only available in Studio Mode).

    Returns:
        scene-name (str): Name of the scene being previewed.
        sources (list): List of sources composing the scene. Same specification as [`GetCurrentScene`](#getcurrentscene).
    """

    def __init__(self):
        """Init."""

        super(PreviewSceneChanged, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'PreviewSceneChanged'
        self.data_in['scene-name'] = None
        self.data_in['sources'] = None
        return self

    async def get_scene_name(self):
        return self.data_in['scene-name']

    async def get_sources(self):
        return self.data_in['sources']


class ProfileChanged(BaseEvents):
    """Triggered when switching to another profile or when renaming the current profile.

    Returns:
        profile (str): Name of the new current profile.
    """

    def __init__(self):
        """Init."""

        super(ProfileChanged, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'ProfileChanged'
        self.data_in['profile'] = None
        return self

    async def get_profile(self):
        return self.data_in['profile']


class ProfileListChanged(BaseEvents):
    """Triggered when a profile is created, added, renamed, or removed.

    Returns:
        profiles (list): Profiles list.
        profiles.*.name (str): Profile name.
    """

    def __init__(self):
        """Init."""

        super(ProfileListChanged, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'ProfileListChanged'
        self.data_in['profiles'] = None
        self.data_in['profiles.*.name'] = None
        return self

    async def get_profiles(self):
        return self.data_in['profiles']

    async def get_profiles___name(self):
        return self.data_in['profiles.*.name']


class RecordingPaused(BaseEvents):
    """Current recording paused"""

    def __init__(self):
        """Init."""

        super(RecordingPaused, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'RecordingPaused'
        return self


class RecordingResumed(BaseEvents):
    """Current recording resumed"""

    def __init__(self):
        """Init."""

        super(RecordingResumed, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'RecordingResumed'
        return self


class RecordingStarted(BaseEvents):
    """Recording started successfully.

    Returns:
        recordingFilename (str): Absolute path to the file of the current recording.
    """

    def __init__(self):
        """Init."""

        super(RecordingStarted, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'RecordingStarted'
        self.data_in['recordingFilename'] = None
        return self

    async def get_recordingFilename(self):
        return self.data_in['recordingFilename']


class RecordingStarting(BaseEvents):
    """Note: `recordingFilename` is not provided in this event because this information
    is not available at the time this event is emitted.
    """

    def __init__(self):
        """Init."""

        super(RecordingStarting, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'RecordingStarting'
        return self


class RecordingStopped(BaseEvents):
    """Recording stopped successfully.

    Returns:
        recordingFilename (str): Absolute path to the file of the current recording.
    """

    def __init__(self):
        """Init."""

        super(RecordingStopped, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'RecordingStopped'
        self.data_in['recordingFilename'] = None
        return self

    async def get_recordingFilename(self):
        return self.data_in['recordingFilename']


class RecordingStopping(BaseEvents):
    """A request to stop recording has been issued.

    Returns:
        recordingFilename (str): Absolute path to the file of the current recording.
    """

    def __init__(self):
        """Init."""

        super(RecordingStopping, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'RecordingStopping'
        self.data_in['recordingFilename'] = None
        return self

    async def get_recordingFilename(self):
        return self.data_in['recordingFilename']


class ReplayStarted(BaseEvents):
    """Replay Buffer started successfully"""

    def __init__(self):
        """Init."""

        super(ReplayStarted, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'ReplayStarted'
        return self


class ReplayStarting(BaseEvents):
    """A request to start the replay buffer has been issued."""

    def __init__(self):
        """Init."""

        super(ReplayStarting, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'ReplayStarting'
        return self


class ReplayStopped(BaseEvents):
    """Replay Buffer stopped successfully"""

    def __init__(self):
        """Init."""

        super(ReplayStopped, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'ReplayStopped'
        return self


class ReplayStopping(BaseEvents):
    """A request to stop the replay buffer has been issued."""

    def __init__(self):
        """Init."""

        super(ReplayStopping, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'ReplayStopping'
        return self


class SceneCollectionChanged(BaseEvents):
    """Triggered when switching to another scene collection or when renaming the current scene collection.

    Returns:
        sceneCollection (str): Name of the new current scene collection.
    """

    def __init__(self):
        """Init."""

        super(SceneCollectionChanged, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SceneCollectionChanged'
        self.data_in['sceneCollection'] = None
        return self

    async def get_sceneCollection(self):
        return self.data_in['sceneCollection']


class SceneCollectionListChanged(BaseEvents):
    """Triggered when a scene collection is created, added, renamed, or removed.

    Returns:
        sceneCollections (list): Scene collections list.
        sceneCollections.*.name (str): Scene collection name.
    """

    def __init__(self):
        """Init."""

        super(SceneCollectionListChanged, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SceneCollectionListChanged'
        self.data_in['sceneCollections'] = None
        self.data_in['sceneCollections.*.name'] = None
        return self

    async def get_sceneCollections(self):
        return self.data_in['sceneCollections']

    async def get_sceneCollections___name(self):
        return self.data_in['sceneCollections.*.name']


class SceneItemAdded(BaseEvents):
    """A scene item has been added to a scene.

    Returns:
        item-id (int): Scene item ID
        item-name (str): Name of the item added to the scene.
        scene-name (str): Name of the scene.
    """

    def __init__(self):
        """Init."""

        super(SceneItemAdded, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SceneItemAdded'
        self.data_in['item-id'] = None
        self.data_in['item-name'] = None
        self.data_in['scene-name'] = None
        return self

    async def get_item_id(self):
        return self.data_in['item-id']

    async def get_item_name(self):
        return self.data_in['item-name']

    async def get_scene_name(self):
        return self.data_in['scene-name']


class SceneItemDeselected(BaseEvents):
    """A scene item is deselected.

    Returns:
        item-id (int): Name of the item in the scene.
        item-name (str): Name of the item in the scene.
        scene-name (str): Name of the scene.
    """

    def __init__(self):
        """Init."""

        super(SceneItemDeselected, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SceneItemDeselected'
        self.data_in['item-id'] = None
        self.data_in['item-name'] = None
        self.data_in['scene-name'] = None
        return self

    async def get_item_id(self):
        return self.data_in['item-id']

    async def get_item_name(self):
        return self.data_in['item-name']

    async def get_scene_name(self):
        return self.data_in['scene-name']


class SceneItemLockChanged(BaseEvents):
    """A scene item's locked status has been toggled.

    Returns:
        item-id (int): Scene item ID
        item-locked (bool): New locked state of the item.
        item-name (str): Name of the item in the scene.
        scene-name (str): Name of the scene.
    """

    def __init__(self):
        """Init."""

        super(SceneItemLockChanged, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SceneItemLockChanged'
        self.data_in['item-id'] = None
        self.data_in['item-locked'] = None
        self.data_in['item-name'] = None
        self.data_in['scene-name'] = None
        return self

    async def get_item_id(self):
        return self.data_in['item-id']

    async def get_item_locked(self):
        return self.data_in['item-locked']

    async def get_item_name(self):
        return self.data_in['item-name']

    async def get_scene_name(self):
        return self.data_in['scene-name']


class SceneItemRemoved(BaseEvents):
    """A scene item has been removed from a scene.

    Returns:
        item-id (int): Scene item ID
        item-name (str): Name of the item removed from the scene.
        scene-name (str): Name of the scene.
    """

    def __init__(self):
        """Init."""

        super(SceneItemRemoved, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SceneItemRemoved'
        self.data_in['item-id'] = None
        self.data_in['item-name'] = None
        self.data_in['scene-name'] = None
        return self

    async def get_item_id(self):
        return self.data_in['item-id']

    async def get_item_name(self):
        return self.data_in['item-name']

    async def get_scene_name(self):
        return self.data_in['scene-name']


class SceneItemSelected(BaseEvents):
    """A scene item is selected.

    Returns:
        item-id (int): Name of the item in the scene.
        item-name (str): Name of the item in the scene.
        scene-name (str): Name of the scene.
    """

    def __init__(self):
        """Init."""

        super(SceneItemSelected, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SceneItemSelected'
        self.data_in['item-id'] = None
        self.data_in['item-name'] = None
        self.data_in['scene-name'] = None
        return self

    async def get_item_id(self):
        return self.data_in['item-id']

    async def get_item_name(self):
        return self.data_in['item-name']

    async def get_scene_name(self):
        return self.data_in['scene-name']


class SceneItemTransformChanged(BaseEvents):
    """A scene item's transform has been changed.

    Returns:
        item-id (int): Scene item ID
        item-name (str): Name of the item in the scene.
        scene-name (str): Name of the scene.
        transform (SceneItemTransform): Scene item transform properties
    """

    def __init__(self):
        """Init."""

        super(SceneItemTransformChanged, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SceneItemTransformChanged'
        self.data_in['item-id'] = None
        self.data_in['item-name'] = None
        self.data_in['scene-name'] = None
        self.data_in['transform'] = None
        return self

    async def get_item_id(self):
        return self.data_in['item-id']

    async def get_item_name(self):
        return self.data_in['item-name']

    async def get_scene_name(self):
        return self.data_in['scene-name']

    async def get_transform(self):
        return self.data_in['transform']


class SceneItemVisibilityChanged(BaseEvents):
    """A scene item's visibility has been toggled.

    Returns:
        item-id (int): Scene item ID
        item-name (str): Name of the item in the scene.
        item-visible (bool): New visibility state of the item.
        scene-name (str): Name of the scene.
    """

    def __init__(self):
        """Init."""

        super(SceneItemVisibilityChanged, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SceneItemVisibilityChanged'
        self.data_in['item-id'] = None
        self.data_in['item-name'] = None
        self.data_in['item-visible'] = None
        self.data_in['scene-name'] = None
        return self

    async def get_item_id(self):
        return self.data_in['item-id']

    async def get_item_name(self):
        return self.data_in['item-name']

    async def get_item_visible(self):
        return self.data_in['item-visible']

    async def get_scene_name(self):
        return self.data_in['scene-name']


class ScenesChanged(BaseEvents):
    """Note: This event is not fired when the scenes are reordered.

    Returns:
        scenes (list): Scenes list.
    """

    def __init__(self):
        """Init."""

        super(ScenesChanged, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'ScenesChanged'
        self.data_in['scenes'] = None
        return self

    async def get_scenes(self):
        return self.data_in['scenes']


class SourceAudioActivated(BaseEvents):
    """A source has added audio.

    Returns:
        sourceName (str): Source name
    """

    def __init__(self):
        """Init."""

        super(SourceAudioActivated, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SourceAudioActivated'
        self.data_in['sourceName'] = None
        return self

    async def get_sourceName(self):
        return self.data_in['sourceName']


class SourceAudioDeactivated(BaseEvents):
    """A source has removed audio.

    Returns:
        sourceName (str): Source name
    """

    def __init__(self):
        """Init."""

        super(SourceAudioDeactivated, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SourceAudioDeactivated'
        self.data_in['sourceName'] = None
        return self

    async def get_sourceName(self):
        return self.data_in['sourceName']


class SourceAudioMixersChanged(BaseEvents):
    """Audio mixer routing changed on a source.

    Returns:
        hexMixersValue (str): Raw mixer flags (little-endian, one bit per mixer) as an hexadecimal value
        mixers (list): Routing status of the source for each audio mixer (array of 6 values)
        mixers.*.enabled (bool): Routing status
        mixers.*.id (int): Mixer number
        sourceName (str): Source name
    """

    def __init__(self):
        """Init."""

        super(SourceAudioMixersChanged, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SourceAudioMixersChanged'
        self.data_in['hexMixersValue'] = None
        self.data_in['mixers'] = None
        self.data_in['mixers.*.enabled'] = None
        self.data_in['mixers.*.id'] = None
        self.data_in['sourceName'] = None
        return self

    async def get_hexMixersValue(self):
        return self.data_in['hexMixersValue']

    async def get_mixers(self):
        return self.data_in['mixers']

    async def get_mixers___enabled(self):
        return self.data_in['mixers.*.enabled']

    async def get_mixers___id(self):
        return self.data_in['mixers.*.id']

    async def get_sourceName(self):
        return self.data_in['sourceName']


class SourceAudioSyncOffsetChanged(BaseEvents):
    """The audio sync offset of a source has changed.

    Returns:
        sourceName (str): Source name
        syncOffset (int): Audio sync offset of the source (in nanoseconds)
    """

    def __init__(self):
        """Init."""

        super(SourceAudioSyncOffsetChanged, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SourceAudioSyncOffsetChanged'
        self.data_in['sourceName'] = None
        self.data_in['syncOffset'] = None
        return self

    async def get_sourceName(self):
        return self.data_in['sourceName']

    async def get_syncOffset(self):
        return self.data_in['syncOffset']


class SourceCreated(BaseEvents):
    """A source has been created. A source can be an input, a scene or a transition.

    Returns:
        sourceKind (str): Source kind.
        sourceName (str): Source name
        sourceSettings (object): Source settings
        sourceType (str): Source type. Can be "input", "scene", "transition" or "filter".
    """

    def __init__(self):
        """Init."""

        super(SourceCreated, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SourceCreated'
        self.data_in['sourceKind'] = None
        self.data_in['sourceName'] = None
        self.data_in['sourceSettings'] = None
        self.data_in['sourceType'] = None
        return self

    async def get_sourceKind(self):
        return self.data_in['sourceKind']

    async def get_sourceName(self):
        return self.data_in['sourceName']

    async def get_sourceSettings(self):
        return self.data_in['sourceSettings']

    async def get_sourceType(self):
        return self.data_in['sourceType']


class SourceDestroyed(BaseEvents):
    """A source has been destroyed/removed. A source can be an input, a scene or a transition.

    Returns:
        sourceKind (str): Source kind.
        sourceName (str): Source name
        sourceType (str): Source type. Can be "input", "scene", "transition" or "filter".
    """

    def __init__(self):
        """Init."""

        super(SourceDestroyed, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SourceDestroyed'
        self.data_in['sourceKind'] = None
        self.data_in['sourceName'] = None
        self.data_in['sourceType'] = None
        return self

    async def get_sourceKind(self):
        return self.data_in['sourceKind']

    async def get_sourceName(self):
        return self.data_in['sourceName']

    async def get_sourceType(self):
        return self.data_in['sourceType']


class SourceFilterAdded(BaseEvents):
    """A filter was added to a source.

    Returns:
        filterName (str): Filter name
        filterSettings (object): Filter settings
        filterType (str): Filter type
        sourceName (str): Source name
    """

    def __init__(self):
        """Init."""

        super(SourceFilterAdded, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SourceFilterAdded'
        self.data_in['filterName'] = None
        self.data_in['filterSettings'] = None
        self.data_in['filterType'] = None
        self.data_in['sourceName'] = None
        return self

    async def get_filterName(self):
        return self.data_in['filterName']

    async def get_filterSettings(self):
        return self.data_in['filterSettings']

    async def get_filterType(self):
        return self.data_in['filterType']

    async def get_sourceName(self):
        return self.data_in['sourceName']


class SourceFilterRemoved(BaseEvents):
    """A filter was removed from a source.

    Returns:
        filterName (str): Filter name
        filterType (str): Filter type
        sourceName (str): Source name
    """

    def __init__(self):
        """Init."""

        super(SourceFilterRemoved, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SourceFilterRemoved'
        self.data_in['filterName'] = None
        self.data_in['filterType'] = None
        self.data_in['sourceName'] = None
        return self

    async def get_filterName(self):
        return self.data_in['filterName']

    async def get_filterType(self):
        return self.data_in['filterType']

    async def get_sourceName(self):
        return self.data_in['sourceName']


class SourceFilterVisibilityChanged(BaseEvents):
    """The visibility/enabled state of a filter changed

    Returns:
        filterEnabled (bool): New filter state
        filterName (str): Filter name
        sourceName (str): Source name
    """

    def __init__(self):
        """Init."""

        super(SourceFilterVisibilityChanged, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SourceFilterVisibilityChanged'
        self.data_in['filterEnabled'] = None
        self.data_in['filterName'] = None
        self.data_in['sourceName'] = None
        return self

    async def get_filterEnabled(self):
        return self.data_in['filterEnabled']

    async def get_filterName(self):
        return self.data_in['filterName']

    async def get_sourceName(self):
        return self.data_in['sourceName']


class SourceFiltersReordered(BaseEvents):
    """Filters in a source have been reordered.

    Returns:
        filters (list): Ordered Filters list
        filters.*.enabled (bool): Filter visibility status
        filters.*.name (str): Filter name
        filters.*.type (str): Filter type
        sourceName (str): Source name
    """

    def __init__(self):
        """Init."""

        super(SourceFiltersReordered, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SourceFiltersReordered'
        self.data_in['filters'] = None
        self.data_in['filters.*.enabled'] = None
        self.data_in['filters.*.name'] = None
        self.data_in['filters.*.type'] = None
        self.data_in['sourceName'] = None
        return self

    async def get_filters(self):
        return self.data_in['filters']

    async def get_filters___enabled(self):
        return self.data_in['filters.*.enabled']

    async def get_filters___name(self):
        return self.data_in['filters.*.name']

    async def get_filters___type(self):
        return self.data_in['filters.*.type']

    async def get_sourceName(self):
        return self.data_in['sourceName']


class SourceMuteStateChanged(BaseEvents):
    """A source has been muted or unmuted.

    Returns:
        muted (bool): Mute status of the source
        sourceName (str): Source name
    """

    def __init__(self):
        """Init."""

        super(SourceMuteStateChanged, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SourceMuteStateChanged'
        self.data_in['muted'] = None
        self.data_in['sourceName'] = None
        return self

    async def get_muted(self):
        return self.data_in['muted']

    async def get_sourceName(self):
        return self.data_in['sourceName']


class SourceOrderChanged(BaseEvents):
    """Scene items within a scene have been reordered.

    Returns:
        scene-items (list): Ordered list of scene items
        scene-items.*.item-id (int): Scene item unique ID
        scene-items.*.source-name (str): Item source name
        scene-name (str): Name of the scene where items have been reordered.
    """

    def __init__(self):
        """Init."""

        super(SourceOrderChanged, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SourceOrderChanged'
        self.data_in['scene-items'] = None
        self.data_in['scene-items.*.item-id'] = None
        self.data_in['scene-items.*.source-name'] = None
        self.data_in['scene-name'] = None
        return self

    async def get_scene_items(self):
        return self.data_in['scene-items']

    async def get_scene_items___item_id(self):
        return self.data_in['scene-items.*.item-id']

    async def get_scene_items___source_name(self):
        return self.data_in['scene-items.*.source-name']

    async def get_scene_name(self):
        return self.data_in['scene-name']


class SourceRenamed(BaseEvents):
    """A source has been renamed.

    Returns:
        newName (str): New source name
        previousName (str): Previous source name
        sourceType (str): Type of source (input, scene, filter, transition)
    """

    def __init__(self):
        """Init."""

        super(SourceRenamed, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SourceRenamed'
        self.data_in['newName'] = None
        self.data_in['previousName'] = None
        self.data_in['sourceType'] = None
        return self

    async def get_newName(self):
        return self.data_in['newName']

    async def get_previousName(self):
        return self.data_in['previousName']

    async def get_sourceType(self):
        return self.data_in['sourceType']


class SourceVolumeChanged(BaseEvents):
    """The volume of a source has changed.

    Returns:
        sourceName (str): Source name
        volume (float): Source volume
        volumeDb (float): Source volume in Decibel
    """

    def __init__(self):
        """Init."""

        super(SourceVolumeChanged, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SourceVolumeChanged'
        self.data_in['sourceName'] = None
        self.data_in['volume'] = None
        self.data_in['volumeDb'] = None
        return self

    async def get_sourceName(self):
        return self.data_in['sourceName']

    async def get_volume(self):
        return self.data_in['volume']

    async def get_volumeDb(self):
        return self.data_in['volumeDb']


class StreamStarted(BaseEvents):
    """Streaming started successfully."""

    def __init__(self):
        """Init."""

        super(StreamStarted, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'StreamStarted'
        return self


class StreamStarting(BaseEvents):
    """A request to start streaming has been issued.

    Returns:
        preview-only (bool): Always false (retrocompatibility).
    """

    def __init__(self):
        """Init."""

        super(StreamStarting, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'StreamStarting'
        self.data_in['preview-only'] = None
        return self

    async def get_preview_only(self):
        return self.data_in['preview-only']


class StreamStatus(BaseEvents):
    """Emitted every 2 seconds when stream is active.

    Returns:
        average-frame-time (int): Average frame time (in milliseconds)
        bytes-per-sec (int): Amount of data per second (in bytes) transmitted by the stream encoder.
        cpu-usage (int): Current CPU usage (percentage)
        fps (int): Current framerate.
        free-disk-space (int): Free recording disk space (in megabytes)
        kbits-per-sec (int): Amount of data per second (in kilobits) transmitted by the stream encoder.
        memory-usage (int): Current RAM usage (in megabytes)
        num-dropped-frames (int): Number of frames dropped by the encoder since the stream started.
        num-total-frames (int): Total number of frames transmitted since the stream started.
        output-skipped-frames (int): Number of frames skipped due to encoding lag
        output-total-frames (int): Number of frames outputted
        preview-only (bool): Always false (retrocompatibility).
        recording (bool): Current recording state.
        render-missed-frames (int): Number of frames missed due to rendering lag
        render-total-frames (int): Number of frames rendered
        replay-buffer-active (bool): Replay Buffer status
        strain (int): Percentage of dropped frames.
        streaming (bool): Current streaming state.
        total-stream-time (int): Total time (in seconds) since the stream started.
    """

    def __init__(self):
        """Init."""

        super(StreamStatus, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'StreamStatus'
        self.data_in['average-frame-time'] = None
        self.data_in['bytes-per-sec'] = None
        self.data_in['cpu-usage'] = None
        self.data_in['fps'] = None
        self.data_in['free-disk-space'] = None
        self.data_in['kbits-per-sec'] = None
        self.data_in['memory-usage'] = None
        self.data_in['num-dropped-frames'] = None
        self.data_in['num-total-frames'] = None
        self.data_in['output-skipped-frames'] = None
        self.data_in['output-total-frames'] = None
        self.data_in['preview-only'] = None
        self.data_in['recording'] = None
        self.data_in['render-missed-frames'] = None
        self.data_in['render-total-frames'] = None
        self.data_in['replay-buffer-active'] = None
        self.data_in['strain'] = None
        self.data_in['streaming'] = None
        self.data_in['total-stream-time'] = None
        return self

    async def get_average_frame_time(self):
        return self.data_in['average-frame-time']

    async def get_bytes_per_sec(self):
        return self.data_in['bytes-per-sec']

    async def get_cpu_usage(self):
        return self.data_in['cpu-usage']

    async def get_fps(self):
        return self.data_in['fps']

    async def get_free_disk_space(self):
        return self.data_in['free-disk-space']

    async def get_kbits_per_sec(self):
        return self.data_in['kbits-per-sec']

    async def get_memory_usage(self):
        return self.data_in['memory-usage']

    async def get_num_dropped_frames(self):
        return self.data_in['num-dropped-frames']

    async def get_num_total_frames(self):
        return self.data_in['num-total-frames']

    async def get_output_skipped_frames(self):
        return self.data_in['output-skipped-frames']

    async def get_output_total_frames(self):
        return self.data_in['output-total-frames']

    async def get_preview_only(self):
        return self.data_in['preview-only']

    async def get_recording(self):
        return self.data_in['recording']

    async def get_render_missed_frames(self):
        return self.data_in['render-missed-frames']

    async def get_render_total_frames(self):
        return self.data_in['render-total-frames']

    async def get_replay_buffer_active(self):
        return self.data_in['replay-buffer-active']

    async def get_strain(self):
        return self.data_in['strain']

    async def get_streaming(self):
        return self.data_in['streaming']

    async def get_total_stream_time(self):
        return self.data_in['total-stream-time']


class StreamStopped(BaseEvents):
    """Streaming stopped successfully."""

    def __init__(self):
        """Init."""

        super(StreamStopped, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'StreamStopped'
        return self


class StreamStopping(BaseEvents):
    """A request to stop streaming has been issued.

    Returns:
        preview-only (bool): Always false (retrocompatibility).
    """

    def __init__(self):
        """Init."""

        super(StreamStopping, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'StreamStopping'
        self.data_in['preview-only'] = None
        return self

    async def get_preview_only(self):
        return self.data_in['preview-only']


class StudioModeSwitched(BaseEvents):
    """Studio Mode has been enabled or disabled.

    Returns:
        new-state (bool): The new enabled state of Studio Mode.
    """

    def __init__(self):
        """Init."""

        super(StudioModeSwitched, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'StudioModeSwitched'
        self.data_in['new-state'] = None
        return self

    async def get_new_state(self):
        return self.data_in['new-state']


class SwitchScenes(BaseEvents):
    """Indicates a scene change.

    Returns:
        scene-name (str): The new scene.
        sources (list): List of scene items in the new scene. Same specification as [`GetCurrentScene`](#getcurrentscene).
    """

    def __init__(self):
        """Init."""

        super(SwitchScenes, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SwitchScenes'
        self.data_in['scene-name'] = None
        self.data_in['sources'] = None
        return self

    async def get_scene_name(self):
        return self.data_in['scene-name']

    async def get_sources(self):
        return self.data_in['sources']


class SwitchTransition(BaseEvents):
    """The active transition has been changed.

    Returns:
        transition-name (str): The name of the new active transition.
    """

    def __init__(self):
        """Init."""

        super(SwitchTransition, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'SwitchTransition'
        self.data_in['transition-name'] = None
        return self

    async def get_transition_name(self):
        return self.data_in['transition-name']


class TransitionBegin(BaseEvents):
    """A transition (other than "cut") has begun.

    Returns:
        duration (int): Transition duration (in milliseconds). Will be -1 for any transition with a fixed duration, such as a Stinger, due to limitations of the OBS API.
        from-scene (str): Source scene of the transition
        name (str): Transition name.
        to-scene (str): Destination scene of the transition
        type (str): Transition type.
    """

    def __init__(self):
        """Init."""

        super(TransitionBegin, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'TransitionBegin'
        self.data_in['duration'] = None
        self.data_in['from-scene'] = None
        self.data_in['name'] = None
        self.data_in['to-scene'] = None
        self.data_in['type'] = None
        return self

    async def get_duration(self):
        return self.data_in['duration']

    async def get_from_scene(self):
        return self.data_in['from-scene']

    async def get_name(self):
        return self.data_in['name']

    async def get_to_scene(self):
        return self.data_in['to-scene']

    async def get_type(self):
        return self.data_in['type']


class TransitionDurationChanged(BaseEvents):
    """The active transition duration has been changed.

    Returns:
        new-duration (int): New transition duration.
    """

    def __init__(self):
        """Init."""

        super(TransitionDurationChanged, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'TransitionDurationChanged'
        self.data_in['new-duration'] = None
        return self

    async def get_new_duration(self):
        return self.data_in['new-duration']


class TransitionEnd(BaseEvents):
    """A transition (other than "cut") has ended.
    Note: The `from-scene` field is not available in TransitionEnd.

        Returns:
            duration (int): Transition duration (in milliseconds).
            name (str): Transition name.
            to-scene (str): Destination scene of the transition
            type (str): Transition type.
    """

    def __init__(self):
        """Init."""

        super(TransitionEnd, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'TransitionEnd'
        self.data_in['duration'] = None
        self.data_in['name'] = None
        self.data_in['to-scene'] = None
        self.data_in['type'] = None
        return self

    async def get_duration(self):
        return self.data_in['duration']

    async def get_name(self):
        return self.data_in['name']

    async def get_to_scene(self):
        return self.data_in['to-scene']

    async def get_type(self):
        return self.data_in['type']


class TransitionListChanged(BaseEvents):
    """The list of available transitions has been modified.
    Transitions have been added, removed, or renamed.

        Returns:
            transitions (list): Transitions list.
            transitions.*.name (str): Transition name.
    """

    def __init__(self):
        """Init."""

        super(TransitionListChanged, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'TransitionListChanged'
        self.data_in['transitions'] = None
        self.data_in['transitions.*.name'] = None
        return self

    async def get_transitions(self):
        return self.data_in['transitions']

    async def get_transitions___name(self):
        return self.data_in['transitions.*.name']


class TransitionVideoEnd(BaseEvents):
    """A stinger transition has finished playing its video.

    Returns:
        duration (int): Transition duration (in milliseconds).
        from-scene (str): Source scene of the transition
        name (str): Transition name.
        to-scene (str): Destination scene of the transition
        type (str): Transition type.
    """

    def __init__(self):
        """Init."""

        super(TransitionVideoEnd, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'TransitionVideoEnd'
        self.data_in['duration'] = None
        self.data_in['from-scene'] = None
        self.data_in['name'] = None
        self.data_in['to-scene'] = None
        self.data_in['type'] = None
        return self

    async def get_duration(self):
        return self.data_in['duration']

    async def get_from_scene(self):
        return self.data_in['from-scene']

    async def get_name(self):
        return self.data_in['name']

    async def get_to_scene(self):
        return self.data_in['to-scene']

    async def get_type(self):
        return self.data_in['type']


class VirtualCamStarted(BaseEvents):
    """Virtual cam started successfully."""

    def __init__(self):
        """Init."""

        super(VirtualCamStarted, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'VirtualCamStarted'
        return self


class VirtualCamStopped(BaseEvents):
    """Virtual cam stopped successfully."""

    def __init__(self):
        """Init."""

        super(VirtualCamStopped, self).__init__()

    async def init(self):
        """Async init."""

        self.name = 'VirtualCamStopped'
        return self
