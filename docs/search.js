window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "twitch_bot", "modulename": "twitch_bot", "kind": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "twitch_bot.api", "modulename": "twitch_bot.api", "kind": "module", "doc": "<p>Functions for getting Twitch Data.</p>\n"}, {"fullname": "twitch_bot.api.check_cache", "modulename": "twitch_bot.api", "qualname": "check_cache", "kind": "function", "doc": "<p>Decorator to check if the API call has been cached.</p>\n\n<p>This is only applicable if the arguments are the same as well.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.api.get_channel_data", "modulename": "twitch_bot.api", "qualname": "get_channel_data", "kind": "function", "doc": "<p>Check and return cached data if it exists.</p>\n\n<p>Otherwise, call the API, cache the data, and return the data.</p>\n\n<p>Args:\n    args (list): Arguments.\n    kwargs (dict): Additional keyword arguments.</p>\n\n<p>Returns:\n    data (dict or list): Data from the API call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.api.get_user_data", "modulename": "twitch_bot.api", "qualname": "get_user_data", "kind": "function", "doc": "<p>Check and return cached data if it exists.</p>\n\n<p>Otherwise, call the API, cache the data, and return the data.</p>\n\n<p>Args:\n    args (list): Arguments.\n    kwargs (dict): Additional keyword arguments.</p>\n\n<p>Returns:\n    data (dict or list): Data from the API call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.api.get_game", "modulename": "twitch_bot.api", "qualname": "get_game", "kind": "function", "doc": "<p>Check and return cached data if it exists.</p>\n\n<p>Otherwise, call the API, cache the data, and return the data.</p>\n\n<p>Args:\n    args (list): Arguments.\n    kwargs (dict): Additional keyword arguments.</p>\n\n<p>Returns:\n    data (dict or list): Data from the API call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.api.get_channel_emotes", "modulename": "twitch_bot.api", "qualname": "get_channel_emotes", "kind": "function", "doc": "<p>Check and return cached data if it exists.</p>\n\n<p>Otherwise, call the API, cache the data, and return the data.</p>\n\n<p>Args:\n    args (list): Arguments.\n    kwargs (dict): Additional keyword arguments.</p>\n\n<p>Returns:\n    data (dict or list): Data from the API call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.api.get_global_emotes", "modulename": "twitch_bot.api", "qualname": "get_global_emotes", "kind": "function", "doc": "<p>Check and return cached data if it exists.</p>\n\n<p>Otherwise, call the API, cache the data, and return the data.</p>\n\n<p>Args:\n    args (list): Arguments.\n    kwargs (dict): Additional keyword arguments.</p>\n\n<p>Returns:\n    data (dict or list): Data from the API call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.api.get_stream_data", "modulename": "twitch_bot.api", "qualname": "get_stream_data", "kind": "function", "doc": "<p>Check and return cached data if it exists.</p>\n\n<p>Otherwise, call the API, cache the data, and return the data.</p>\n\n<p>Args:\n    args (list): Arguments.\n    kwargs (dict): Additional keyword arguments.</p>\n\n<p>Returns:\n    data (dict or list): Data from the API call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.api.get_follow_count", "modulename": "twitch_bot.api", "qualname": "get_follow_count", "kind": "function", "doc": "<p>Check and return cached data if it exists.</p>\n\n<p>Otherwise, call the API, cache the data, and return the data.</p>\n\n<p>Args:\n    args (list): Arguments.\n    kwargs (dict): Additional keyword arguments.</p>\n\n<p>Returns:\n    data (dict or list): Data from the API call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.api.get_follow_data", "modulename": "twitch_bot.api", "qualname": "get_follow_data", "kind": "function", "doc": "<p>Check and return cached data if it exists.</p>\n\n<p>Otherwise, call the API, cache the data, and return the data.</p>\n\n<p>Args:\n    args (list): Arguments.\n    kwargs (dict): Additional keyword arguments.</p>\n\n<p>Returns:\n    data (dict or list): Data from the API call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.api.get_chatters", "modulename": "twitch_bot.api", "qualname": "get_chatters", "kind": "function", "doc": "<p>Check and return cached data if it exists.</p>\n\n<p>Otherwise, call the API, cache the data, and return the data.</p>\n\n<p>Args:\n    args (list): Arguments.\n    kwargs (dict): Additional keyword arguments.</p>\n\n<p>Returns:\n    data (dict or list): Data from the API call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.api.get_subscribers", "modulename": "twitch_bot.api", "qualname": "get_subscribers", "kind": "function", "doc": "<p>Check and return cached data if it exists.</p>\n\n<p>Otherwise, call the API, cache the data, and return the data.</p>\n\n<p>Args:\n    args (list): Arguments.\n    kwargs (dict): Additional keyword arguments.</p>\n\n<p>Returns:\n    data (dict or list): Data from the API call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.api.create_marker", "modulename": "twitch_bot.api", "qualname": "create_marker", "kind": "function", "doc": "<p>Create a stream marker for the given user at the current time.</p>\n\n<p>Args:\n    auth (Auth): App access info class.\n    user_id (int): Twitch broadcaster ID.\n    description (str): Marker description.</p>\n\n<p>Returns:\n    (list): Subscriber data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">auth</span><span class=\"p\">:</span> <span class=\"nb\">object</span>, </span><span class=\"param\"><span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.api.get_schedule", "modulename": "twitch_bot.api", "qualname": "get_schedule", "kind": "function", "doc": "<p>Check and return cached data if it exists.</p>\n\n<p>Otherwise, call the API, cache the data, and return the data.</p>\n\n<p>Args:\n    args (list): Arguments.\n    kwargs (dict): Additional keyword arguments.</p>\n\n<p>Returns:\n    data (dict or list): Data from the API call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.api.get_goals", "modulename": "twitch_bot.api", "qualname": "get_goals", "kind": "function", "doc": "<p>Check and return cached data if it exists.</p>\n\n<p>Otherwise, call the API, cache the data, and return the data.</p>\n\n<p>Args:\n    args (list): Arguments.\n    kwargs (dict): Additional keyword arguments.</p>\n\n<p>Returns:\n    data (dict or list): Data from the API call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.api.get_chat_settings", "modulename": "twitch_bot.api", "qualname": "get_chat_settings", "kind": "function", "doc": "<p>Check and return cached data if it exists.</p>\n\n<p>Otherwise, call the API, cache the data, and return the data.</p>\n\n<p>Args:\n    args (list): Arguments.\n    kwargs (dict): Additional keyword arguments.</p>\n\n<p>Returns:\n    data (dict or list): Data from the API call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.api.update_chat_settings", "modulename": "twitch_bot.api", "qualname": "update_chat_settings", "kind": "function", "doc": "<p>Get the goals for the given broadcaster.</p>\n\n<p>Args:\n    auth (Auth): App access info class.\n    patch (dict): Field(s) to update and their appropriate value(s).</p>\n\n<p>Returns:\n    (list): List of goal data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">auth</span><span class=\"p\">:</span> <span class=\"nb\">object</span>, </span><span class=\"param\"><span class=\"n\">patch</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.api.ban_user", "modulename": "twitch_bot.api", "qualname": "ban_user", "kind": "function", "doc": "<p>Get the goals for the given broadcaster.</p>\n\n<p>Args:\n    auth (Auth): App access info class.\n    user_id (int): Twitch broadcaster ID.\n    reason (str, optional): Reason for the ban.\n    duration (duration, optional): Length in seconds from 1 to 1,209,600.\n        If not given, ban is permanent.</p>\n\n<p>Returns:\n    (list): List of goal data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">auth</span><span class=\"p\">:</span> <span class=\"nb\">object</span>,</span><span class=\"param\">\t<span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">reason</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Violation of stream rules.&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">duration</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.api.update_stream_settings", "modulename": "twitch_bot.api", "qualname": "update_stream_settings", "kind": "function", "doc": "<p>Update stream information.</p>\n\n<p>Args:\n    auth (Auth): App access info class.\n    patch (dict): Field(s) to update and their appropriate value(s).\n        Available fields are:\n            game_id (str): Game ID or 0.\n            broadcaster_language (str): ISO 639-1 two-letter code\n                for a supported stream language.\n            title (str): Stream title.\n            delay (int): Stream delay. Only available for Partners.</p>\n\n<p>Returns:\n    (list): List of goal data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">auth</span><span class=\"p\">:</span> <span class=\"nb\">object</span>, </span><span class=\"param\"><span class=\"n\">patch</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.audio", "modulename": "twitch_bot.audio", "kind": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "twitch_bot.audio.audio_utils", "modulename": "twitch_bot.audio.audio_utils", "kind": "module", "doc": "<p>Audio utilities.</p>\n"}, {"fullname": "twitch_bot.audio.audio_utils.play", "modulename": "twitch_bot.audio.audio_utils", "qualname": "play", "kind": "function", "doc": "<p>Play an audio file given its name.</p>\n\n<p>Args:\n    name (str): Name of the audio file to play.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.auth", "modulename": "twitch_bot.auth", "kind": "module", "doc": "<p>Authentication Class.</p>\n"}, {"fullname": "twitch_bot.auth.Auth", "modulename": "twitch_bot.auth", "qualname": "Auth", "kind": "class", "doc": "<p>Authentication Object.</p>\n\n<p>This is used to automatically handle the authorization of the bot to\nTwitch and any calls made to it.</p>\n"}, {"fullname": "twitch_bot.auth.Auth.__init__", "modulename": "twitch_bot.auth", "qualname": "Auth.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.auth.Auth.init", "modulename": "twitch_bot.auth", "qualname": "Auth.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    twitch_config (dict): Twitch config file name.\n        If not given, the default twitch_config is used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">twitch_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.auth.Auth.load_secrets", "modulename": "twitch_bot.auth", "qualname": "Auth.load_secrets", "kind": "function", "doc": "<p>Load the secrets from the config file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.auth.Auth.validate_tokens", "modulename": "twitch_bot.auth", "qualname": "Auth.validate_tokens", "kind": "function", "doc": "<p>Validae all tokens.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.auth.Auth.generate_permissions_url", "modulename": "twitch_bot.auth", "qualname": "Auth.generate_permissions_url", "kind": "function", "doc": "<p>Generate the URL that will be sent to the user.</p>\n\n<p>This URL will prompt the user to authorize the bot to see private\nchannel data. The users response to the prompt is sent to the\nredirect_uri. The response can be validated using the state key.</p>\n\n<p>Returns:\n    url (str): The URL for authorizing the bot.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.auth.Auth.get_access_token", "modulename": "twitch_bot.auth", "qualname": "Auth.get_access_token", "kind": "function", "doc": "<p>Authorize the oauth token and get the token data.</p>\n\n<p>Args:\n    code (str): Token generated by the user confirming access to the\n        bot.</p>\n\n<p>Returns:\n    (dict): Response from Twitch with the access token, refresh token,\n        and scope information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.bot", "modulename": "twitch_bot.bot", "kind": "module", "doc": "<p>Twitch Bot.</p>\n"}, {"fullname": "twitch_bot.bot.TwitchBot", "modulename": "twitch_bot.bot", "qualname": "TwitchBot", "kind": "class", "doc": "<p>Twitch Bot Class.</p>\n"}, {"fullname": "twitch_bot.bot.TwitchBot.__init__", "modulename": "twitch_bot.bot", "qualname": "TwitchBot.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.bot.TwitchBot.init", "modulename": "twitch_bot.bot", "qualname": "TwitchBot.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    authorization (Auth): Authorization object.\n    chat_connection (ChatConnection): Connection object.\n        If not given, it will generate one.\n    obs_connection (OBSConnection): Connection to OBS.</p>\n\n<p>Returns:\n    (TwitchBot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">authorization</span><span class=\"p\">:</span> <span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">Auth</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chat_connection</span><span class=\"p\">:</span> <span class=\"n\">chat</span><span class=\"o\">.</span><span class=\"n\">chat_connection</span><span class=\"o\">.</span><span class=\"n\">ChatConnection</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">obs_connection</span><span class=\"p\">:</span> <span class=\"n\">obs</span><span class=\"o\">.</span><span class=\"n\">obs_connection</span><span class=\"o\">.</span><span class=\"n\">OBSConnection</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tcp_server</span><span class=\"p\">:</span> <span class=\"n\">tcp_utils</span><span class=\"o\">.</span><span class=\"n\">TCPServer</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.bot.TwitchBot.startup", "modulename": "twitch_bot.bot", "qualname": "TwitchBot.startup", "kind": "function", "doc": "<p>Run all the initialization code for the bot.</p>\n\n<p>Args:\n    authorization (Auth): Authorization object.\n    chat_connection (ChatConnection): Connection object.\n        If not given, it will generate one.\n    obs_connection (OBSConnection): Connection to OBS.\n    tcp_server (TCPServer): TCP server for external communication.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">authorization</span><span class=\"p\">:</span> <span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">Auth</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chat_connection</span><span class=\"p\">:</span> <span class=\"n\">chat</span><span class=\"o\">.</span><span class=\"n\">chat_connection</span><span class=\"o\">.</span><span class=\"n\">ChatConnection</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">obs_connection</span><span class=\"p\">:</span> <span class=\"n\">obs</span><span class=\"o\">.</span><span class=\"n\">obs_connection</span><span class=\"o\">.</span><span class=\"n\">OBSConnection</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">tcp_server</span><span class=\"p\">:</span> <span class=\"n\">tcp_utils</span><span class=\"o\">.</span><span class=\"n\">TCPServer</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.bot.TwitchBot.reload_config", "modulename": "twitch_bot.bot", "qualname": "TwitchBot.reload_config", "kind": "function", "doc": "<p>Reload the config.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.bot.TwitchBot.reload_simple_commands", "modulename": "twitch_bot.bot", "qualname": "TwitchBot.reload_simple_commands", "kind": "function", "doc": "<p>Reload the simple commands.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.bot.TwitchBot.dispatch_command", "modulename": "twitch_bot.bot", "qualname": "TwitchBot.dispatch_command", "kind": "function", "doc": "<p>Run a command.</p>\n\n<p>Args:\n    event (Event): Server event.\n    user (dict): User that sent the message.\n        {name: display name, id: user-id}\n    command (str): Command string.\n    command_args (list): Argument(s) for the command.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">Event</span>,</span><span class=\"param\">\t<span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">command_args</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.bot.TwitchBot.dispatch_message", "modulename": "twitch_bot.bot", "qualname": "TwitchBot.dispatch_message", "kind": "function", "doc": "<p>Respond to a message based on the responses config.</p>\n\n<p>Args:\n    event (Event): Server event.\n    user (dict): User that sent the message.\n        {name: display name, id: user-id}\n    message (str): Message string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">Event</span>, </span><span class=\"param\"><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.bot.TwitchBot.run", "modulename": "twitch_bot.bot", "qualname": "TwitchBot.run", "kind": "function", "doc": "<p>Main functionality of the bot.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.cache", "modulename": "twitch_bot.cache", "kind": "module", "doc": "<p>Data Cache.</p>\n\n<p>Transient arbitrary data storage.</p>\n"}, {"fullname": "twitch_bot.cache.CacheData", "modulename": "twitch_bot.cache", "qualname": "CacheData", "kind": "class", "doc": "<p>Object for storing data in the cache.</p>\n"}, {"fullname": "twitch_bot.cache.CacheData.__init__", "modulename": "twitch_bot.cache", "qualname": "CacheData.__init__", "kind": "function", "doc": "<p>Init.</p>\n\n<p>Args:\n    data (object): Value to store.\n    duration (int, optional): Length of time in minutes to store the\n        data.\n        Default is no duration.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">object</span>, </span><span class=\"param\"><span class=\"n\">duration</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "twitch_bot.cache.CacheData.expired", "modulename": "twitch_bot.cache", "qualname": "CacheData.expired", "kind": "variable", "doc": "<p>True if expired, otherwise False.</p>\n", "annotation": ": bool"}, {"fullname": "twitch_bot.cache.CacheData.remaining", "modulename": "twitch_bot.cache", "qualname": "CacheData.remaining", "kind": "variable", "doc": "<p>Return time remaining before the data expires.</p>\n\n<p>If there is no experation, returns -1.</p>\n", "annotation": ": int"}, {"fullname": "twitch_bot.cache.Cache", "modulename": "twitch_bot.cache", "qualname": "Cache", "kind": "class", "doc": "<p>In-memory data cache.</p>\n"}, {"fullname": "twitch_bot.cache.Cache.__init__", "modulename": "twitch_bot.cache", "qualname": "Cache.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.cache.Cache.add", "modulename": "twitch_bot.cache", "qualname": "Cache.add", "kind": "function", "doc": "<p>Add data into the cache.</p>\n\n<p>Args:\n    key (str): Key to store the data with.\n    data (object, optional): Data to store.\n    duration (int, optional): Length of time in minutes to store the\n        data. Default is no duration.\n    overwrite (bool, optional): Whether or not to overwrite the data\n        if it exists. Default is True.</p>\n\n<p>Returns:\n    (CacheData|None): CacheData if the data was added correctly,\n        otherwise None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">object</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">duration</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">overwrite</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.cache.Cache.get", "modulename": "twitch_bot.cache", "qualname": "Cache.get", "kind": "function", "doc": "<p>Get data from the cache if it exists.</p>\n\n<p>Args:\n    key (str): Key to store the data with.</p>\n\n<p>Returns:\n    (CacheData | None): The matching data if it exists, otherwise None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">twitch_bot</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">CacheData</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.cache.Cache.exists", "modulename": "twitch_bot.cache", "qualname": "Cache.exists", "kind": "function", "doc": "<p>Check if the key exists in the cache.</p>\n\n<p>Args:\n    key (str): Key to store the data with.</p>\n\n<p>Returns:\n    (bool): True if the key exists in the cache, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.cache.Cache.find", "modulename": "twitch_bot.cache", "qualname": "Cache.find", "kind": "function", "doc": "<p>Find a key from a search string.</p>\n\n<p>Supports regex.</p>\n\n<p>Args:\n    search (str): Search string.</p>\n\n<p>Returns:\n    (list): List of CacheData where the key matches the search string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">search</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">twitch_bot</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">CacheData</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.cache.Cache.list", "modulename": "twitch_bot.cache", "qualname": "Cache.list", "kind": "function", "doc": "<p>Return a list of keys in the cache.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.cache.Cache.extend", "modulename": "twitch_bot.cache", "qualname": "Cache.extend", "kind": "function", "doc": "<p>Extend the given keys duration.</p>\n\n<p>Args:\n    key (str): Key to renew.\n    length (int, optional): Length of time in minutes to store the\n        data.\n        Default is no duration.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">60</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.cache.Cache.delete", "modulename": "twitch_bot.cache", "qualname": "Cache.delete", "kind": "function", "doc": "<p>Delete the key and associated data if it exists.</p>\n\n<p>Args:\n    key (str): Key to delete.</p>\n\n<p>Returns:\n    (bool): True if the key exists in the cache, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.cache.Cache.clear", "modulename": "twitch_bot.cache", "qualname": "Cache.clear", "kind": "function", "doc": "<p>Clear the cache.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.cache.Cache.clean", "modulename": "twitch_bot.cache", "qualname": "Cache.clean", "kind": "function", "doc": "<p>Clean expired keys from the cache.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.cache.Cache.clean_task", "modulename": "twitch_bot.cache", "qualname": "Cache.clean_task", "kind": "function", "doc": "<p>Asynchronous task for cleaning the cache of expired keys.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat", "modulename": "twitch_bot.chat", "kind": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "twitch_bot.chat.chat_connection", "modulename": "twitch_bot.chat.chat_connection", "kind": "module", "doc": "<p>Chat Connection.</p>\n"}, {"fullname": "twitch_bot.chat.chat_connection.ratelimit_decorator", "modulename": "twitch_bot.chat.chat_connection", "qualname": "ratelimit_decorator", "kind": "function", "doc": "<p>Rate limit messages.</p>\n\n<p>Args:\n    func (function): Function to run.</p>\n\n<p>Returns:\n    decorated (function): The decorated function output.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.chat.chat_connection.ChatConnection", "modulename": "twitch_bot.chat.chat_connection", "qualname": "ChatConnection", "kind": "class", "doc": "<p>ChatConnection.</p>\n"}, {"fullname": "twitch_bot.chat.chat_connection.ChatConnection.__init__", "modulename": "twitch_bot.chat.chat_connection", "qualname": "ChatConnection.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.chat.chat_connection.ChatConnection.init", "modulename": "twitch_bot.chat.chat_connection", "qualname": "ChatConnection.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    authorization (Auth, optional): Auth object.\n    channel (str, optional): Channel name.</p>\n\n<p>Returns:\n    self (ChatConnection): Class instance.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">authorization</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">Auth</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">channel</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_connection.ChatConnection.connect", "modulename": "twitch_bot.chat.chat_connection", "qualname": "ChatConnection.connect", "kind": "function", "doc": "<p>Connect to the IRC chat.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_connection.ChatConnection.authenticate", "modulename": "twitch_bot.chat.chat_connection", "qualname": "ChatConnection.authenticate", "kind": "function", "doc": "<p>Authenticate the bot.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_connection.ChatConnection.get_capabilities", "modulename": "twitch_bot.chat.chat_connection", "qualname": "ChatConnection.get_capabilities", "kind": "function", "doc": "<p>Request the capabilities for the bot.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_connection.ChatConnection.join_chat", "modulename": "twitch_bot.chat.chat_connection", "qualname": "ChatConnection.join_chat", "kind": "function", "doc": "<p>Join a chat.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_connection.ChatConnection.leave_chat", "modulename": "twitch_bot.chat.chat_connection", "qualname": "ChatConnection.leave_chat", "kind": "function", "doc": "<p>Leave the chat.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_connection.ChatConnection.send_server_message", "modulename": "twitch_bot.chat.chat_connection", "qualname": "ChatConnection.send_server_message", "kind": "function", "doc": "<p>Run the function after a timeout.</p>\n\n<p>Args:\n    message (str): Message to be sent.\n    prio (str): The ratelimit priority. The default is USER.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">prio</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_connection.ChatConnection.send_message", "modulename": "twitch_bot.chat.chat_connection", "qualname": "ChatConnection.send_message", "kind": "function", "doc": "<p>Publish a message to chat.</p>\n\n<p>Args:\n    message (str): Message to publish.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_connection.ChatConnection.send_command", "modulename": "twitch_bot.chat.chat_connection", "qualname": "ChatConnection.send_command", "kind": "function", "doc": "<p>Send a command to chat.</p>\n\n<p>Args:\n    command (str): Message to publish.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_connection.ChatConnection.send_whisper", "modulename": "twitch_bot.chat.chat_connection", "qualname": "ChatConnection.send_whisper", "kind": "function", "doc": "<p>Publish a whisper to chat.</p>\n\n<p>This does not seem to work for unverified bots.</p>\n\n<p>Args:\n    user (dict): User that sent the message.\n        {name: display name, id: user-id}\n    message (str): Message to publish.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\tuser: dict[slice(&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;, None)],</span><span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_connection.ChatConnection.set_color", "modulename": "twitch_bot.chat.chat_connection", "qualname": "ChatConnection.set_color", "kind": "function", "doc": "<p>Set the bot color in chat.</p>\n\n<p>Only 'Turbo' users can specify custom hex colors, otherwise one of the\nstandard chat colors can be used:\n    Blue, BlueViolet, CadetBlue, Chocolate, Coral, DodgerBlue,\n    Firebrick, GoldenRod, Green, HotPink, OrangeRed, Red, SeaGreen,\n    SpringGreen, YellowGreen</p>\n\n<p>Args:\n    color (str, optional): A standard color name or hex color.\n        hex colors need a leading #.\n        Example: #408CFF</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;CadetBlue&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events", "modulename": "twitch_bot.chat.chat_events", "kind": "module", "doc": "<p>Chat Message Event.</p>\n"}, {"fullname": "twitch_bot.chat.chat_events.get_event_type", "modulename": "twitch_bot.chat.chat_events", "qualname": "get_event_type", "kind": "function", "doc": "<p>Get the event type from the event data.</p>\n\n<p>Args:\n    data (str): Data from the server.</p>\n\n<p>Returns:\n    (str): Event type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.ChatEvent", "modulename": "twitch_bot.chat.chat_events", "qualname": "ChatEvent", "kind": "class", "doc": "<p>Message event.</p>\n\n<p>This object breakes down a server message into its parts and makes it\neasier to access the individual elements.</p>\n\n<p>Do not use this class directly, only subclass from it.</p>\n", "bases": "events.Event"}, {"fullname": "twitch_bot.chat.chat_events.ChatEvent.__init__", "modulename": "twitch_bot.chat.chat_events", "qualname": "ChatEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.chat.chat_events.ChatEvent.init", "modulename": "twitch_bot.chat.chat_events", "qualname": "ChatEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (str): Data from the server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.ExistingUsersEvent", "modulename": "twitch_bot.chat.chat_events", "qualname": "ExistingUsersEvent", "kind": "class", "doc": "<p>Run when a list of existing users in chat is received.</p>\n", "bases": "ChatEvent"}, {"fullname": "twitch_bot.chat.chat_events.ExistingUsersEvent.__init__", "modulename": "twitch_bot.chat.chat_events", "qualname": "ExistingUsersEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.chat.chat_events.ExistingUsersEvent.init", "modulename": "twitch_bot.chat.chat_events", "qualname": "ExistingUsersEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (str): Data from the server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.ExistingUsersEvent.run", "modulename": "twitch_bot.chat.chat_events", "qualname": "ExistingUsersEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.NamesEndEvent", "modulename": "twitch_bot.chat.chat_events", "qualname": "NamesEndEvent", "kind": "class", "doc": "<p>Run when the event signals the end of the NAMES list.</p>\n", "bases": "ChatEvent"}, {"fullname": "twitch_bot.chat.chat_events.NamesEndEvent.__init__", "modulename": "twitch_bot.chat.chat_events", "qualname": "NamesEndEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.chat.chat_events.NamesEndEvent.init", "modulename": "twitch_bot.chat.chat_events", "qualname": "NamesEndEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (str): Data from the server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.NamesEndEvent.run", "modulename": "twitch_bot.chat.chat_events", "qualname": "NamesEndEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.AckEvent", "modulename": "twitch_bot.chat.chat_events", "qualname": "AckEvent", "kind": "class", "doc": "<p>Run when the event signals a command acknowledgement.</p>\n", "bases": "ChatEvent"}, {"fullname": "twitch_bot.chat.chat_events.AckEvent.__init__", "modulename": "twitch_bot.chat.chat_events", "qualname": "AckEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.chat.chat_events.AckEvent.init", "modulename": "twitch_bot.chat.chat_events", "qualname": "AckEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (str): Data from the server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.AckEvent.run", "modulename": "twitch_bot.chat.chat_events", "qualname": "AckEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.CapEvent", "modulename": "twitch_bot.chat.chat_events", "qualname": "CapEvent", "kind": "class", "doc": "<p>Run when the event signals a capability.</p>\n", "bases": "ChatEvent"}, {"fullname": "twitch_bot.chat.chat_events.CapEvent.__init__", "modulename": "twitch_bot.chat.chat_events", "qualname": "CapEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.chat.chat_events.CapEvent.init", "modulename": "twitch_bot.chat.chat_events", "qualname": "CapEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (str): Data from the server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.CapEvent.run", "modulename": "twitch_bot.chat.chat_events", "qualname": "CapEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.JoinEvent", "modulename": "twitch_bot.chat.chat_events", "qualname": "JoinEvent", "kind": "class", "doc": "<p>Join event.</p>\n\n<p>This is called any time a user joins the chat.</p>\n", "bases": "ChatEvent"}, {"fullname": "twitch_bot.chat.chat_events.JoinEvent.__init__", "modulename": "twitch_bot.chat.chat_events", "qualname": "JoinEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.chat.chat_events.JoinEvent.init", "modulename": "twitch_bot.chat.chat_events", "qualname": "JoinEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (str): Data from the server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.JoinEvent.run", "modulename": "twitch_bot.chat.chat_events", "qualname": "JoinEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.NoticeEvent", "modulename": "twitch_bot.chat.chat_events", "qualname": "NoticeEvent", "kind": "class", "doc": "<p>Run when a notice event is received.</p>\n", "bases": "ChatEvent"}, {"fullname": "twitch_bot.chat.chat_events.NoticeEvent.__init__", "modulename": "twitch_bot.chat.chat_events", "qualname": "NoticeEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.chat.chat_events.NoticeEvent.init", "modulename": "twitch_bot.chat.chat_events", "qualname": "NoticeEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (str): Data from the server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.NoticeEvent.run", "modulename": "twitch_bot.chat.chat_events", "qualname": "NoticeEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.PartEvent", "modulename": "twitch_bot.chat.chat_events", "qualname": "PartEvent", "kind": "class", "doc": "<p>Part event.</p>\n\n<p>This is called any time a user leaves the chat.</p>\n", "bases": "ChatEvent"}, {"fullname": "twitch_bot.chat.chat_events.PartEvent.__init__", "modulename": "twitch_bot.chat.chat_events", "qualname": "PartEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.chat.chat_events.PartEvent.init", "modulename": "twitch_bot.chat.chat_events", "qualname": "PartEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (str): Data from the server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.PartEvent.run", "modulename": "twitch_bot.chat.chat_events", "qualname": "PartEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.PubmsgEvent", "modulename": "twitch_bot.chat.chat_events", "qualname": "PubmsgEvent", "kind": "class", "doc": "<p>Receive a message event.</p>\n\n<p>This is called any time a message is published in the chat.</p>\n", "bases": "ChatEvent"}, {"fullname": "twitch_bot.chat.chat_events.PubmsgEvent.__init__", "modulename": "twitch_bot.chat.chat_events", "qualname": "PubmsgEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.chat.chat_events.PubmsgEvent.init", "modulename": "twitch_bot.chat.chat_events", "qualname": "PubmsgEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (str): Data from the server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.PubmsgEvent.run", "modulename": "twitch_bot.chat.chat_events", "qualname": "PubmsgEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.RoomstateEvent", "modulename": "twitch_bot.chat.chat_events", "qualname": "RoomstateEvent", "kind": "class", "doc": "<p>Run when the event signals the room state.</p>\n", "bases": "ChatEvent"}, {"fullname": "twitch_bot.chat.chat_events.RoomstateEvent.__init__", "modulename": "twitch_bot.chat.chat_events", "qualname": "RoomstateEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.chat.chat_events.RoomstateEvent.init", "modulename": "twitch_bot.chat.chat_events", "qualname": "RoomstateEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (str): Data from the server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.RoomstateEvent.run", "modulename": "twitch_bot.chat.chat_events", "qualname": "RoomstateEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.UsernoticeEvent", "modulename": "twitch_bot.chat.chat_events", "qualname": "UsernoticeEvent", "kind": "class", "doc": "<p>Run when the event signals a user notice.</p>\n", "bases": "ChatEvent"}, {"fullname": "twitch_bot.chat.chat_events.UsernoticeEvent.__init__", "modulename": "twitch_bot.chat.chat_events", "qualname": "UsernoticeEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.chat.chat_events.UsernoticeEvent.init", "modulename": "twitch_bot.chat.chat_events", "qualname": "UsernoticeEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (str): Data from the server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.UsernoticeEvent.run", "modulename": "twitch_bot.chat.chat_events", "qualname": "UsernoticeEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.UserstateEvent", "modulename": "twitch_bot.chat.chat_events", "qualname": "UserstateEvent", "kind": "class", "doc": "<p>Run when the event signals the user state.</p>\n", "bases": "ChatEvent"}, {"fullname": "twitch_bot.chat.chat_events.UserstateEvent.__init__", "modulename": "twitch_bot.chat.chat_events", "qualname": "UserstateEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.chat.chat_events.UserstateEvent.init", "modulename": "twitch_bot.chat.chat_events", "qualname": "UserstateEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (str): Data from the server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.UserstateEvent.run", "modulename": "twitch_bot.chat.chat_events", "qualname": "UserstateEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.WhisperEvent", "modulename": "twitch_bot.chat.chat_events", "qualname": "WhisperEvent", "kind": "class", "doc": "<p>Run when the bot receives a whisper.</p>\n", "bases": "ChatEvent"}, {"fullname": "twitch_bot.chat.chat_events.WhisperEvent.__init__", "modulename": "twitch_bot.chat.chat_events", "qualname": "WhisperEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.chat.chat_events.WhisperEvent.init", "modulename": "twitch_bot.chat.chat_events", "qualname": "WhisperEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (str): Data from the server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_events.WhisperEvent.run", "modulename": "twitch_bot.chat.chat_events", "qualname": "WhisperEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_receiver", "modulename": "twitch_bot.chat.chat_receiver", "kind": "module", "doc": "<p>Chat receiver.</p>\n"}, {"fullname": "twitch_bot.chat.chat_receiver.ChatReceiver", "modulename": "twitch_bot.chat.chat_receiver", "qualname": "ChatReceiver", "kind": "class", "doc": "<p>Chatreceiver.</p>\n"}, {"fullname": "twitch_bot.chat.chat_receiver.ChatReceiver.__init__", "modulename": "twitch_bot.chat.chat_receiver", "qualname": "ChatReceiver.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">connection</span></span>)</span>"}, {"fullname": "twitch_bot.chat.chat_receiver.ChatReceiver.get_data", "modulename": "twitch_bot.chat.chat_receiver", "qualname": "ChatReceiver.get_data", "kind": "function", "doc": "<p>Get the data from the server.</p>\n\n<p>Returns:\n    data (str): Received data from the server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chat.chat_receiver.ChatReceiver.run", "modulename": "twitch_bot.chat.chat_receiver", "qualname": "ChatReceiver.run", "kind": "function", "doc": "<p>Main functionality of the bot.</p>\n\n<p>This is run automatically when the thread is started.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chatters", "modulename": "twitch_bot.chatters", "kind": "module", "doc": "<p>Work with chatters data.</p>\n"}, {"fullname": "twitch_bot.chatters.Chatters", "modulename": "twitch_bot.chatters", "qualname": "Chatters", "kind": "class", "doc": "<p>Chatters Object.</p>\n\n<p>This is used to get and parse the chatters in a stream.</p>\n"}, {"fullname": "twitch_bot.chatters.Chatters.__init__", "modulename": "twitch_bot.chatters", "qualname": "Chatters.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.chatters.Chatters.init", "modulename": "twitch_bot.chatters", "qualname": "Chatters.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    channel_name (str): Channel to get the chatters for.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">channel_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.chatters.Chatters.refresh_chatters", "modulename": "twitch_bot.chatters", "qualname": "Chatters.refresh_chatters", "kind": "function", "doc": "<p>Refresh the chatters data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.commands", "modulename": "twitch_bot.commands", "kind": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "twitch_bot.commands.commands", "modulename": "twitch_bot.commands.commands", "kind": "module", "doc": "<p>Simple Commands.</p>\n"}, {"fullname": "twitch_bot.commands.commands.SimpleCommands", "modulename": "twitch_bot.commands.commands", "qualname": "SimpleCommands", "kind": "class", "doc": "<p>Simple commands.</p>\n"}, {"fullname": "twitch_bot.commands.commands.SimpleCommands.__init__", "modulename": "twitch_bot.commands.commands", "qualname": "SimpleCommands.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.commands.commands.SimpleCommands.init", "modulename": "twitch_bot.commands.commands", "qualname": "SimpleCommands.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    bot (TwitchBot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.commands.commands.SimpleCommands.load_commands", "modulename": "twitch_bot.commands.commands", "qualname": "SimpleCommands.load_commands", "kind": "function", "doc": "<p>Load the commands file.</p>\n\n<p>Returns:\n    (dict): Commands as a dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.commands.commands.SimpleCommands.write_commands", "modulename": "twitch_bot.commands.commands", "qualname": "SimpleCommands.write_commands", "kind": "function", "doc": "<p>Write the commands to the commands file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.commands.commands.SimpleCommands.add_command", "modulename": "twitch_bot.commands.commands", "qualname": "SimpleCommands.add_command", "kind": "function", "doc": "<p>Add a simple command.</p>\n\n<p>Args:\n    name (str): Name of the command.\n    code (str): Code for the command.</p>\n\n<p>Returns:\n    (bool): True if successful, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.commands.commands.SimpleCommands.edit_command", "modulename": "twitch_bot.commands.commands", "qualname": "SimpleCommands.edit_command", "kind": "function", "doc": "<p>Edit a simple command.</p>\n\n<p>Args:\n    name (str): Name of the command.\n    code (str): Code for the command.</p>\n\n<p>Returns:\n    (bool): True if successful, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.commands.commands.SimpleCommands.delete_command", "modulename": "twitch_bot.commands.commands", "qualname": "SimpleCommands.delete_command", "kind": "function", "doc": "<p>Delete a simple command.</p>\n\n<p>Args:\n    name (str): Name of the command.\n    code (str): Code for the command.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.commands.commands.Command", "modulename": "twitch_bot.commands.commands", "qualname": "Command", "kind": "class", "doc": "<p>Command.</p>\n"}, {"fullname": "twitch_bot.commands.commands.Command.__init__", "modulename": "twitch_bot.commands.commands", "qualname": "Command.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.commands.commands.Command.init", "modulename": "twitch_bot.commands.commands", "qualname": "Command.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.commands.commands.Command.run", "modulename": "twitch_bot.commands.commands", "qualname": "Command.run", "kind": "function", "doc": "<p>Run the command.</p>\n\n<p>Args:\n    user (dict): User that sent the message.\n        {name: display name, id: user-id}\n    args (list): Argument(s) for the command.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.commands.commands.Command.parse_vars", "modulename": "twitch_bot.commands.commands", "qualname": "Command.parse_vars", "kind": "function", "doc": "<p>Parse the variables in the code string.</p>\n\n<p>Returns:\n    (str): Code with the variables replaced with data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.commands.commands.Command.get_random_chatter", "modulename": "twitch_bot.commands.commands", "qualname": "Command.get_random_chatter", "kind": "function", "doc": "<p>Pick a random chatter.</p>\n\n<p>Returns:\n    (str): Random chatter name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.commands.commands.Command.get_follower_count", "modulename": "twitch_bot.commands.commands", "qualname": "Command.get_follower_count", "kind": "function", "doc": "<p>Get the total number of followers.</p>\n\n<p>Returns:\n    (int): Follower count.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.commands.commands.Command.get_random_number", "modulename": "twitch_bot.commands.commands", "qualname": "Command.get_random_number", "kind": "function", "doc": "<p>Generate a random number between the given values.</p>\n\n<p>Returns:\n    (str): Random value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.commands.commands.Command.get_view_count", "modulename": "twitch_bot.commands.commands", "qualname": "Command.get_view_count", "kind": "function", "doc": "<p>Get view count.</p>\n\n<p>Return:\n    (int): View count.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.commands.commands.Command.get_subscriber_count", "modulename": "twitch_bot.commands.commands", "qualname": "Command.get_subscriber_count", "kind": "function", "doc": "<p>Get subscribers.</p>\n\n<p>Return:\n    (int): Subscriber count.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.configs", "modulename": "twitch_bot.configs", "kind": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "twitch_bot.configs.config_utils", "modulename": "twitch_bot.configs.config_utils", "kind": "module", "doc": "<p>Config Utils.</p>\n"}, {"fullname": "twitch_bot.configs.config_utils.load_cached_config", "modulename": "twitch_bot.configs.config_utils", "qualname": "load_cached_config", "kind": "function", "doc": "<p>Load a config from the cache if it exists.</p>\n\n<p>Args:\n    config_name (str): Config name.</p>\n\n<p>Returns:\n    (dict): Config data if it exists.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.configs.config_utils.cache_config", "modulename": "twitch_bot.configs.config_utils", "qualname": "cache_config", "kind": "function", "doc": "<p>Cache or update the cache for a config.</p>\n\n<p>Args:\n    config_name (str): Config name.\n    config_data (dict): Config description.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">config_data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.configs.config_utils.load_config_file", "modulename": "twitch_bot.configs.config_utils", "qualname": "load_config_file", "kind": "function", "doc": "<p>Load a config file.</p>\n\n<p>Args:\n    config_name (str): Name of the config file.\n    refresh (bool): Force the reloading of the config.</p>\n\n<p>Returns:\n    (dict): Contents of the config as a dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">refresh</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.configs.config_utils.write_config_file", "modulename": "twitch_bot.configs.config_utils", "qualname": "write_config_file", "kind": "function", "doc": "<p>Write or overwrite a config file.</p>\n\n<p>Args:\n    config_name (str): Name of the config file.\n    config_data (dict): Data to write.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">config_data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.configs.config_utils.write_config_values", "modulename": "twitch_bot.configs.config_utils", "qualname": "write_config_values", "kind": "function", "doc": "<p>Write the data to a config file.</p>\n\n<p>This loads the config first, replaces the values and write it out.</p>\n\n<p>Args:\n    config_name (str): Name of the config file.\n    config_data (dict): Data to write.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">config_data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.console", "modulename": "twitch_bot.console", "kind": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "twitch_bot.console.console", "modulename": "twitch_bot.console.console", "kind": "module", "doc": "<p>Web console for interacting with the bot.</p>\n"}, {"fullname": "twitch_bot.console.console.ConsoleLauncher", "modulename": "twitch_bot.console.console", "qualname": "ConsoleLauncher", "kind": "class", "doc": "<p>Console launcher class.</p>\n"}, {"fullname": "twitch_bot.console.console.ConsoleLauncher.__init__", "modulename": "twitch_bot.console.console", "qualname": "ConsoleLauncher.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.console.console.ConsoleLauncher.init", "modulename": "twitch_bot.console.console", "qualname": "ConsoleLauncher.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    bot (TwitchBot): Twitch bot instance.</p>\n\n<p>Returns:\n    self (ConsoleLauncher): Class instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.console.console.Console", "modulename": "twitch_bot.console.console", "qualname": "Console", "kind": "class", "doc": "<p>Console.</p>\n", "bases": "remi.server.App"}, {"fullname": "twitch_bot.console.console.Console.__init__", "modulename": "twitch_bot.console.console", "qualname": "Console.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span>)</span>"}, {"fullname": "twitch_bot.console.console.Console.main", "modulename": "twitch_bot.console.console", "qualname": "Console.main", "kind": "function", "doc": "<p>Main page definition.</p>\n\n<p>Args:\n    bot (TwitchBot): Twitch bot instance.</p>\n\n<p>Returns:\n    main_container (gui.Container): Central container widget.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span></span><span class=\"return-annotation\">) -> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Container</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.create_chat_container", "modulename": "twitch_bot.console.console", "qualname": "Console.create_chat_container", "kind": "function", "doc": "<p>Create a container for the chat related widgets.</p>\n\n<p>Returns:\n    chat_container (gui.Container): Container widget with the chat\n        related widgets.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Container</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.create_plugin_container", "modulename": "twitch_bot.console.console", "qualname": "Console.create_plugin_container", "kind": "function", "doc": "<p>Create a container for the plugin related widgets.</p>\n\n<p>Returns:\n    chat_container (gui.Container): Container widget with the plugin\n        related widgets.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Container</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.create_command_container", "modulename": "twitch_bot.console.console", "qualname": "Console.create_command_container", "kind": "function", "doc": "<p>Create a container for the command related widgets.</p>\n\n<p>Returns:\n    chat_container (gui.Container): Container widget with the command\n        related widgets.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Container</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.create_tcp_container", "modulename": "twitch_bot.console.console", "qualname": "Console.create_tcp_container", "kind": "function", "doc": "<p>Create a container for the TCP related widgets.</p>\n\n<p>Returns:\n    chat_container (gui.Container): Container widget with the TCP\n        related widgets.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Container</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.create_zmq_container", "modulename": "twitch_bot.console.console", "qualname": "Console.create_zmq_container", "kind": "function", "doc": "<p>Create a container for the ZMQ related widgets.</p>\n\n<p>Returns:\n    chat_container (gui.Container): Container widget with the ZMQ\n        related widgets.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Container</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.create_discord_container", "modulename": "twitch_bot.console.console", "qualname": "Console.create_discord_container", "kind": "function", "doc": "<p>Create a container for the Discord related widgets.</p>\n\n<p>Returns:\n    chat_container (gui.Container): Container widget with the Discord\n        related widgets.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Container</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.create_event_container", "modulename": "twitch_bot.console.console", "qualname": "Console.create_event_container", "kind": "function", "doc": "<p>Create a container for the event related widgets.</p>\n\n<p>Returns:\n    chat_container (gui.Container): Container widget with the event\n        related widgets.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Container</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.start_bot", "modulename": "twitch_bot.console.console", "qualname": "Console.start_bot", "kind": "function", "doc": "<p>Start up the bot.</p>\n\n<p>Args:\n    widget (gui.Widget): Widget that made the function call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">widget</span><span class=\"p\">:</span> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Widget</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.stop_bot", "modulename": "twitch_bot.console.console", "qualname": "Console.stop_bot", "kind": "function", "doc": "<p>Stop the bot.</p>\n\n<p>Args:\n    widget (gui.Widget): Widget that made the function call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">widget</span><span class=\"p\">:</span> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Widget</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.reload_configs", "modulename": "twitch_bot.console.console", "qualname": "Console.reload_configs", "kind": "function", "doc": "<p>Reload the bot config.</p>\n\n<p>Args:\n    widget (gui.Widget): Widget that made the function call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">widget</span><span class=\"p\">:</span> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Widget</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.reload_plugins", "modulename": "twitch_bot.console.console", "qualname": "Console.reload_plugins", "kind": "function", "doc": "<p>Reload the plugins.</p>\n\n<p>Args:\n    widget (gui.Widget): Widget that made the function call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">widget</span><span class=\"p\">:</span> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Widget</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.reload_commands", "modulename": "twitch_bot.console.console", "qualname": "Console.reload_commands", "kind": "function", "doc": "<p>Reload the simple commands.</p>\n\n<p>Args:\n    widget (gui.Widget): Widget that made the function call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">widget</span><span class=\"p\">:</span> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Widget</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.reconnect_obs", "modulename": "twitch_bot.console.console", "qualname": "Console.reconnect_obs", "kind": "function", "doc": "<p>Connect or reconnect OBS.</p>\n\n<p>Args:\n    widget (gui.Widget): Widget that made the function call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">widget</span><span class=\"p\">:</span> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Widget</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.disconnect_obs", "modulename": "twitch_bot.console.console", "qualname": "Console.disconnect_obs", "kind": "function", "doc": "<p>Disconnect OBS.</p>\n\n<p>Args:\n    widget (gui.Widget): Widget that made the function call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">widget</span><span class=\"p\">:</span> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Widget</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.send_chat_message", "modulename": "twitch_bot.console.console", "qualname": "Console.send_chat_message", "kind": "function", "doc": "<p>Send a message to chat.</p>\n\n<p>Args:\n    widget (gui.Widget): Widget that made the function call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">widget</span><span class=\"p\">:</span> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Widget</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.run_plugin", "modulename": "twitch_bot.console.console", "qualname": "Console.run_plugin", "kind": "function", "doc": "<p>Run a plugin.</p>\n\n<p>Args:\n    widget (gui.Widget): Widget that made the function call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">widget</span><span class=\"p\">:</span> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Widget</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.run_command", "modulename": "twitch_bot.console.console", "qualname": "Console.run_command", "kind": "function", "doc": "<p>Run a simple command.</p>\n\n<p>Args:\n    widget (gui.Widget): Widget that made the function call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">widget</span><span class=\"p\">:</span> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Widget</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.send_tcp_message", "modulename": "twitch_bot.console.console", "qualname": "Console.send_tcp_message", "kind": "function", "doc": "<p>Send a TCP message.</p>\n\n<p>Args:\n    widget (gui.Widget): Widget that made the function call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">widget</span><span class=\"p\">:</span> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Widget</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.send_zmq_message", "modulename": "twitch_bot.console.console", "qualname": "Console.send_zmq_message", "kind": "function", "doc": "<p>Send a ZMQ message.</p>\n\n<p>Args:\n    widget (gui.Widget): Widget that made the function call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">widget</span><span class=\"p\">:</span> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Widget</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.send_discord_message", "modulename": "twitch_bot.console.console", "qualname": "Console.send_discord_message", "kind": "function", "doc": "<p>Send a Discord message.</p>\n\n<p>Args:\n    widget (gui.Widget): Widget that made the function call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">widget</span><span class=\"p\">:</span> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Widget</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.send_event", "modulename": "twitch_bot.console.console", "qualname": "Console.send_event", "kind": "function", "doc": "<p>Send an event.</p>\n\n<p>Args:\n    widget (gui.Widget): Widget that made the function call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">widget</span><span class=\"p\">:</span> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Widget</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.plugin_category_dropdown_changed", "modulename": "twitch_bot.console.console", "qualname": "Console.plugin_category_dropdown_changed", "kind": "function", "doc": "<p>Add plugins belonging to the new category to the plugin_dropdown.</p>\n\n<p>Args:\n    widget (gui.Widget): Widget that made the function call.\n    value (str): New value of the dropdown.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">widget</span><span class=\"p\">:</span> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Widget</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.plugin_dropdown_changed", "modulename": "twitch_bot.console.console", "qualname": "Console.plugin_dropdown_changed", "kind": "function", "doc": "<p>Clear the plugin_command_args field when the plugin changes.</p>\n\n<p>Args:\n    widget (gui.Widget): Widget that made the function call.\n    value (str): New value of the dropdown.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">widget</span><span class=\"p\">:</span> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Widget</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.command_dropdown_changed", "modulename": "twitch_bot.console.console", "qualname": "Console.command_dropdown_changed", "kind": "function", "doc": "<p>Clear the plugin_command_args field when the command changes.</p>\n\n<p>Args:\n    widget (gui.Widget): Widget that made the function call.\n    value (str): New value of the dropdown.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">widget</span><span class=\"p\">:</span> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Widget</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.event_dropdown_changed", "modulename": "twitch_bot.console.console", "qualname": "Console.event_dropdown_changed", "kind": "function", "doc": "<p>Not implemented.</p>\n\n<p>Args:\n    widget (gui.Widget): Widget that made the function call.\n    value (str): New value of the dropdown.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">widget</span><span class=\"p\">:</span> <span class=\"n\">remi</span><span class=\"o\">.</span><span class=\"n\">gui</span><span class=\"o\">.</span><span class=\"n\">Widget</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.on_close", "modulename": "twitch_bot.console.console", "qualname": "Console.on_close", "kind": "function", "doc": "<p>On close event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.console.console.Console.on_window_close", "modulename": "twitch_bot.console.console", "qualname": "Console.on_window_close", "kind": "function", "doc": "<p>On window close event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.database", "modulename": "twitch_bot.database", "kind": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "twitch_bot.database.database_models", "modulename": "twitch_bot.database.database_models", "kind": "module", "doc": "<p>Test of the Tortoise ORM Models.</p>\n"}, {"fullname": "twitch_bot.database.database_models.Users", "modulename": "twitch_bot.database.database_models", "qualname": "Users", "kind": "class", "doc": "<p>Users table model.</p>\n", "bases": "tortoise.models.Model"}, {"fullname": "twitch_bot.database.database_models.Users.Meta", "modulename": "twitch_bot.database.database_models", "qualname": "Users.Meta", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "twitch_bot.database.database_models.Users.Meta.__init__", "modulename": "twitch_bot.database.database_models", "qualname": "Users.Meta.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.database.database_models.Users.as_dict", "modulename": "twitch_bot.database.database_models", "qualname": "Users.as_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.database.database_models.ViewerStats", "modulename": "twitch_bot.database.database_models", "qualname": "ViewerStats", "kind": "class", "doc": "<p>Viewer stats table model.</p>\n", "bases": "tortoise.models.Model"}, {"fullname": "twitch_bot.database.database_models.ViewerStats.Meta", "modulename": "twitch_bot.database.database_models", "qualname": "ViewerStats.Meta", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "twitch_bot.database.database_models.ViewerStats.Meta.__init__", "modulename": "twitch_bot.database.database_models", "qualname": "ViewerStats.Meta.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.database.database_models.ViewerStats.as_dict", "modulename": "twitch_bot.database.database_models", "qualname": "ViewerStats.as_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.database.database_models.StreamStats", "modulename": "twitch_bot.database.database_models", "qualname": "StreamStats", "kind": "class", "doc": "<p>Stream stats table model.</p>\n", "bases": "tortoise.models.Model"}, {"fullname": "twitch_bot.database.database_models.StreamStats.Meta", "modulename": "twitch_bot.database.database_models", "qualname": "StreamStats.Meta", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "twitch_bot.database.database_models.StreamStats.Meta.__init__", "modulename": "twitch_bot.database.database_models", "qualname": "StreamStats.Meta.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.database.database_models.StreamStats.as_dict", "modulename": "twitch_bot.database.database_models", "qualname": "StreamStats.as_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.database.database_models.StreamEvents", "modulename": "twitch_bot.database.database_models", "qualname": "StreamEvents", "kind": "class", "doc": "<p>Stream events table model.</p>\n", "bases": "tortoise.models.Model"}, {"fullname": "twitch_bot.database.database_models.StreamEvents.Meta", "modulename": "twitch_bot.database.database_models", "qualname": "StreamEvents.Meta", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "twitch_bot.database.database_models.StreamEvents.Meta.__init__", "modulename": "twitch_bot.database.database_models", "qualname": "StreamEvents.Meta.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.database.database_models.StreamEvents.as_dict", "modulename": "twitch_bot.database.database_models", "qualname": "StreamEvents.as_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.database.database_utils", "modulename": "twitch_bot.database.database_utils", "kind": "module", "doc": "<p>Database Utils.</p>\n"}, {"fullname": "twitch_bot.database.database_utils.database_decorator", "modulename": "twitch_bot.database.database_utils", "qualname": "database_decorator", "kind": "function", "doc": "<p>Commit plugin data to the database.</p>\n\n<p>Args:\n    func (function): Function to run.</p>\n\n<p>Returns:\n    decorated (function): The decorated function output.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.database.database_utils.check_database_response", "modulename": "twitch_bot.database.database_utils", "qualname": "check_database_response", "kind": "function", "doc": "<p>Decorator to check the response from the database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.database.database_utils.Database", "modulename": "twitch_bot.database.database_utils", "qualname": "Database", "kind": "class", "doc": "<p>Database interaction object.</p>\n"}, {"fullname": "twitch_bot.database.database_utils.Database.__init__", "modulename": "twitch_bot.database.database_utils", "qualname": "Database.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.database.database_utils.Database.init", "modulename": "twitch_bot.database.database_utils", "qualname": "Database.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.database.database_utils.Database.read", "modulename": "twitch_bot.database.database_utils", "qualname": "Database.read", "kind": "function", "doc": "<p>Check database response code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.database.database_utils.Database.read_range", "modulename": "twitch_bot.database.database_utils", "qualname": "Database.read_range", "kind": "function", "doc": "<p>Check database response code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.database.database_utils.Database.commit", "modulename": "twitch_bot.database.database_utils", "qualname": "Database.commit", "kind": "function", "doc": "<p>Check database response code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.database.database_utils.Database.close", "modulename": "twitch_bot.database.database_utils", "qualname": "Database.close", "kind": "function", "doc": "<p>Check database response code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.database.database_utils.Database.insert", "modulename": "twitch_bot.database.database_utils", "qualname": "Database.insert", "kind": "function", "doc": "<p>Check database response code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.database.database_utils.Database.update", "modulename": "twitch_bot.database.database_utils", "qualname": "Database.update", "kind": "function", "doc": "<p>Check database response code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.database.database_utils.Database.delete", "modulename": "twitch_bot.database.database_utils", "qualname": "Database.delete", "kind": "function", "doc": "<p>Check database response code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.database.database_utils.Database.create_table", "modulename": "twitch_bot.database.database_utils", "qualname": "Database.create_table", "kind": "function", "doc": "<p>Check database response code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.database.database_utils.Database.drop_table", "modulename": "twitch_bot.database.database_utils", "qualname": "Database.drop_table", "kind": "function", "doc": "<p>Check database response code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.database.database_utils.Database.count_rows", "modulename": "twitch_bot.database.database_utils", "qualname": "Database.count_rows", "kind": "function", "doc": "<p>Check database response code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.database.database_utils.Database.add_column", "modulename": "twitch_bot.database.database_utils", "qualname": "Database.add_column", "kind": "function", "doc": "<p>Check database response code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.database.database_utils.Database.get_last_row", "modulename": "twitch_bot.database.database_utils", "qualname": "Database.get_last_row", "kind": "function", "doc": "<p>Get the last row from the table.</p>\n\n<p>Args:\n    table (str): Table name.</p>\n\n<p>Returns:\n    data (list|None): Row(s) from the database in the form:\n        [sqlite3.Row1, sqlite3.Row2, sqlite3.Row3, ...]\n        If no data is found, None is returned.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.discord", "modulename": "twitch_bot.discord", "kind": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "twitch_bot.discord.discord_sender", "modulename": "twitch_bot.discord.discord_sender", "kind": "module", "doc": "<p>Discord integration.</p>\n"}, {"fullname": "twitch_bot.discord.discord_sender.send_discord_message", "modulename": "twitch_bot.discord.discord_sender", "qualname": "send_discord_message", "kind": "function", "doc": "<p>Send a message to Discord.</p>\n\n<p>Args:\n    message (str): Message to send.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.discord.discord_sender.send_online_announcement", "modulename": "twitch_bot.discord.discord_sender", "qualname": "send_online_announcement", "kind": "function", "doc": "<p>Send the stream online announcement via discord.</p>\n\n<p>Args:\n    channel_data (dict): Twitch channel data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">channel_data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.emotes", "modulename": "twitch_bot.emotes", "kind": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "twitch_bot.emotes.bttv_utils", "modulename": "twitch_bot.emotes.bttv_utils", "kind": "module", "doc": "<p>Tools for working with the BetterTTV API.</p>\n\n<p>Note: This API is undocumented, but appears to be valid for public use.</p>\n"}, {"fullname": "twitch_bot.emotes.bttv_utils.get_bttv_emotes", "modulename": "twitch_bot.emotes.bttv_utils", "qualname": "get_bttv_emotes", "kind": "function", "doc": "<p>Get a user's emotes from BTTV.</p>\n\n<p>Args:\n    twitch_id (int, str): Twitch user ID.</p>\n\n<p>Returns:\n    (dict): Emote data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">twitch_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.emotes.bttv_utils.adapt_bttv_data", "modulename": "twitch_bot.emotes.bttv_utils", "qualname": "adapt_bttv_data", "kind": "function", "doc": "<p>Adapt the data from BTTV to work with the Emote object.</p>\n\n<p>Args:\n    bttv_data (list[dict]): Emote data from BTTV.</p>\n\n<p>Returns:\n    conformed_bttv_data (list[dict]): Conformed data from BTTV.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bttv_data</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.emotes.emotes", "modulename": "twitch_bot.emotes.emotes", "kind": "module", "doc": "<p>Emote Object.</p>\n"}, {"fullname": "twitch_bot.emotes.emotes.Emote", "modulename": "twitch_bot.emotes.emotes", "qualname": "Emote", "kind": "class", "doc": "<p>Emote storage object.</p>\n"}, {"fullname": "twitch_bot.emotes.emotes.Emote.__init__", "modulename": "twitch_bot.emotes.emotes", "qualname": "Emote.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.emotes.emotes.Emote.init", "modulename": "twitch_bot.emotes.emotes", "qualname": "Emote.init", "kind": "function", "doc": "<p>Init.</p>\n\n<p>Args:\n    emote_id (int | str): Emote id.\n    name (str): Emote name.\n    emote_type (str): Emote type.\n    emote_set (int | str): Emote set.\n    url (str): Emote image url.</p>\n\n<p>Returns:\n    self (Emote): Class instance.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">emote_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">emote_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">emote_set</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.emotes.emotes.convert_emotes", "modulename": "twitch_bot.emotes.emotes", "qualname": "convert_emotes", "kind": "function", "doc": "<p>Convert emote data to Emotes.</p>\n\n<p>Args:\n    found_emotes (dict): Emote data from Twitch.</p>\n\n<p>Returns:\n    dict: Dictionary of Emotes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">found_emotes</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.emotes.emotes.get_emotes", "modulename": "twitch_bot.emotes.emotes", "qualname": "get_emotes", "kind": "function", "doc": "<p>Get all the emotes associated with the channel.</p>\n\n<p>Args:\n    auth (Auth): App access info class.\n    channel_name (str): Username.\n    broadcaster_id (int, str): Twitch broadcaster ID.</p>\n\n<p>Returns:\n    (dict): Dictionary of emotes in the form {type: {name: Emote}}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">auth</span><span class=\"p\">:</span> <span class=\"nb\">object</span>, </span><span class=\"param\"><span class=\"n\">channel_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">broadcaster_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.emotes.ffz_utils", "modulename": "twitch_bot.emotes.ffz_utils", "kind": "module", "doc": "<p>Tools for working with the FrankerFaceZ API.</p>\n"}, {"fullname": "twitch_bot.emotes.ffz_utils.get_ffz_emotes", "modulename": "twitch_bot.emotes.ffz_utils", "qualname": "get_ffz_emotes", "kind": "function", "doc": "<p>Get a user's emotes from FFZ.</p>\n\n<p>Args:\n    twitch_id (int, str): Twitch user ID.</p>\n\n<p>Returns:\n    emoticons (list[dict]): Emote data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">twitch_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.emotes.ffz_utils.adapt_ffz_data", "modulename": "twitch_bot.emotes.ffz_utils", "qualname": "adapt_ffz_data", "kind": "function", "doc": "<p>Adapt the data from FFZ to work with the Emote object.</p>\n\n<p>Args:\n    ffz_data (list[dict]): Emote data from FFZ.\n    set_id (int, str): FFZ set ID.</p>\n\n<p>Returns:\n    conformed_ffz_data (list[dict]): Conformed data from FFZ.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ffz_data</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">set_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.events", "modulename": "twitch_bot.events", "kind": "module", "doc": "<p>Chat event classes.</p>\n"}, {"fullname": "twitch_bot.events.Event", "modulename": "twitch_bot.events", "qualname": "Event", "kind": "class", "doc": "<p>Base chat event.</p>\n"}, {"fullname": "twitch_bot.events.Event.__init__", "modulename": "twitch_bot.events", "qualname": "Event.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.events.DummyEvent", "modulename": "twitch_bot.events", "qualname": "DummyEvent", "kind": "class", "doc": "<p>Dummy event.</p>\n\n<p>This is used for events that are captured but do not have a purpose.</p>\n", "bases": "Event"}, {"fullname": "twitch_bot.events.DummyEvent.__init__", "modulename": "twitch_bot.events", "qualname": "DummyEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.events.DummyEvent.init", "modulename": "twitch_bot.events", "qualname": "DummyEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">response</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.events.DummyEvent.run", "modulename": "twitch_bot.events", "qualname": "DummyEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub", "modulename": "twitch_bot.eventsub", "kind": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "twitch_bot.eventsub.eventsub", "modulename": "twitch_bot.eventsub.eventsub", "kind": "module", "doc": "<p>EventSub.</p>\n"}, {"fullname": "twitch_bot.eventsub.eventsub.EventSub", "modulename": "twitch_bot.eventsub.eventsub", "qualname": "EventSub", "kind": "class", "doc": "<p>EventSub.</p>\n"}, {"fullname": "twitch_bot.eventsub.eventsub.EventSub.__init__", "modulename": "twitch_bot.eventsub.eventsub", "qualname": "EventSub.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.eventsub.eventsub.EventSub.init", "modulename": "twitch_bot.eventsub.eventsub", "qualname": "EventSub.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    authorization (Auth, optional): Auth object.</p>\n\n<p>ReturnsL\n    (EventSub): This class instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">authorization</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">Auth</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub.EventSub.create_subscriptions", "modulename": "twitch_bot.eventsub.eventsub", "qualname": "EventSub.create_subscriptions", "kind": "function", "doc": "<p>Create subscriptions to EventSub.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub.EventSub.create_subscription", "modulename": "twitch_bot.eventsub.eventsub", "qualname": "EventSub.create_subscription", "kind": "function", "doc": "<p>Create a subscription.</p>\n\n<p>Args:\n    subscription (str): Subscription name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">subscription</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub.EventSub.list_subscriptions", "modulename": "twitch_bot.eventsub.eventsub", "qualname": "EventSub.list_subscriptions", "kind": "function", "doc": "<p>List all active subscriptions.</p>\n\n<p>Args:\n    status (str, optional): Status filter.\n        Possible status values:\n            enabled,\n            webhook_callback_verification_pending,\n            webhook_callback_verification_failed,\n            notification_failures_exceeded,\n            authorization_revoked,\n            user_removed</p>\n\n<p>Returns:\n    (dict): Subscription data from Twitch.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">status</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub.EventSub.fill_missing_subscriptions", "modulename": "twitch_bot.eventsub.eventsub", "qualname": "EventSub.fill_missing_subscriptions", "kind": "function", "doc": "<p>Add any subscriptions that are missing.</p>\n\n<p>These are subscriptions that are in the config, but not in the list of\nsubscriptions from Twitch.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub.EventSub.delete_subscriptions", "modulename": "twitch_bot.eventsub.eventsub", "qualname": "EventSub.delete_subscriptions", "kind": "function", "doc": "<p>Delete EventSub subscriptions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub.EventSub.delete_subscription", "modulename": "twitch_bot.eventsub.eventsub", "qualname": "EventSub.delete_subscription", "kind": "function", "doc": "<p>Delete a subscription.</p>\n\n<p>Args:\n    subscription_id (str): Subscription id.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">subscription_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events", "modulename": "twitch_bot.eventsub.eventsub_events", "kind": "module", "doc": "<p>EventSub Events.</p>\n"}, {"fullname": "twitch_bot.eventsub.eventsub_events.EventSubEvent", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "EventSubEvent", "kind": "class", "doc": "<p>EventSub event.</p>\n", "bases": "events.Event"}, {"fullname": "twitch_bot.eventsub.eventsub_events.EventSubEvent.__init__", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "EventSubEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.eventsub.eventsub_events.ChannelUpdate", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "ChannelUpdate", "kind": "class", "doc": "<p>Channel update event.</p>\n", "bases": "EventSubEvent"}, {"fullname": "twitch_bot.eventsub.eventsub_events.ChannelUpdate.__init__", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "ChannelUpdate.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.eventsub.eventsub_events.ChannelUpdate.init", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "ChannelUpdate.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Event data.</p>\n\n<p>Returns:\n    self (object): self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.ChannelUpdate.run", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "ChannelUpdate.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.FollowEvent", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "FollowEvent", "kind": "class", "doc": "<p>Follow event.</p>\n", "bases": "EventSubEvent"}, {"fullname": "twitch_bot.eventsub.eventsub_events.FollowEvent.__init__", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "FollowEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.eventsub.eventsub_events.FollowEvent.init", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "FollowEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Event data.</p>\n\n<p>Returns:\n    self (object): self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.FollowEvent.run", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "FollowEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.SubscribeEvent", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "SubscribeEvent", "kind": "class", "doc": "<p>Subscribe event.</p>\n", "bases": "EventSubEvent"}, {"fullname": "twitch_bot.eventsub.eventsub_events.SubscribeEvent.__init__", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "SubscribeEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.eventsub.eventsub_events.SubscribeEvent.init", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "SubscribeEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Event data.</p>\n\n<p>Returns:\n    self (object): self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.SubscribeEvent.run", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "SubscribeEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.SubscriptionGiftEvent", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "SubscriptionGiftEvent", "kind": "class", "doc": "<p>Subscription gift event.</p>\n", "bases": "EventSubEvent"}, {"fullname": "twitch_bot.eventsub.eventsub_events.SubscriptionGiftEvent.__init__", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "SubscriptionGiftEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.eventsub.eventsub_events.SubscriptionGiftEvent.init", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "SubscriptionGiftEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Event data.</p>\n\n<p>Returns:\n    self (object): self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.SubscriptionGiftEvent.run", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "SubscriptionGiftEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.SubscriptionMessageEvent", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "SubscriptionMessageEvent", "kind": "class", "doc": "<p>Subscription message event.</p>\n", "bases": "EventSubEvent"}, {"fullname": "twitch_bot.eventsub.eventsub_events.SubscriptionMessageEvent.__init__", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "SubscriptionMessageEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.eventsub.eventsub_events.SubscriptionMessageEvent.init", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "SubscriptionMessageEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Event data.</p>\n\n<p>Returns:\n    self (object): self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.SubscriptionMessageEvent.run", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "SubscriptionMessageEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.CheerEvent", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "CheerEvent", "kind": "class", "doc": "<p>Cheer event.</p>\n", "bases": "EventSubEvent"}, {"fullname": "twitch_bot.eventsub.eventsub_events.CheerEvent.__init__", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "CheerEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.eventsub.eventsub_events.CheerEvent.init", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "CheerEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Event data.</p>\n\n<p>Returns:\n    self (object): self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.CheerEvent.run", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "CheerEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.RaidEvent", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "RaidEvent", "kind": "class", "doc": "<p>Raid event.</p>\n", "bases": "EventSubEvent"}, {"fullname": "twitch_bot.eventsub.eventsub_events.RaidEvent.__init__", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "RaidEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.eventsub.eventsub_events.RaidEvent.init", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "RaidEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Event data.</p>\n\n<p>Returns:\n    self (object): self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.RaidEvent.run", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "RaidEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.RewardRedemptionEvent", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "RewardRedemptionEvent", "kind": "class", "doc": "<p>Reward redemption event.</p>\n", "bases": "EventSubEvent"}, {"fullname": "twitch_bot.eventsub.eventsub_events.RewardRedemptionEvent.__init__", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "RewardRedemptionEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.eventsub.eventsub_events.RewardRedemptionEvent.init", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "RewardRedemptionEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Event data.</p>\n\n<p>Returns:\n    self (object): self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.RewardRedemptionEvent.run", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "RewardRedemptionEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.RewardRedemptionUpdateEvent", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "RewardRedemptionUpdateEvent", "kind": "class", "doc": "<p>Reward redemption update event.</p>\n", "bases": "EventSubEvent"}, {"fullname": "twitch_bot.eventsub.eventsub_events.RewardRedemptionUpdateEvent.__init__", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "RewardRedemptionUpdateEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.eventsub.eventsub_events.RewardRedemptionUpdateEvent.init", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "RewardRedemptionUpdateEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Event data.</p>\n\n<p>Returns:\n    self (object): self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.RewardRedemptionUpdateEvent.run", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "RewardRedemptionUpdateEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.GoalProgressEvent", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "GoalProgressEvent", "kind": "class", "doc": "<p>Goal progress event.</p>\n", "bases": "EventSubEvent"}, {"fullname": "twitch_bot.eventsub.eventsub_events.GoalProgressEvent.__init__", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "GoalProgressEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.eventsub.eventsub_events.GoalProgressEvent.init", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "GoalProgressEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Event data.</p>\n\n<p>Returns:\n    self (object): self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.GoalProgressEvent.run", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "GoalProgressEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.GoalEndEvent", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "GoalEndEvent", "kind": "class", "doc": "<p>Goal end event.</p>\n", "bases": "EventSubEvent"}, {"fullname": "twitch_bot.eventsub.eventsub_events.GoalEndEvent.__init__", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "GoalEndEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.eventsub.eventsub_events.GoalEndEvent.init", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "GoalEndEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Event data.</p>\n\n<p>Returns:\n    self (object): self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.GoalEndEvent.run", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "GoalEndEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.HypeTrainBeginEvent", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "HypeTrainBeginEvent", "kind": "class", "doc": "<p>Hype train begin event.</p>\n", "bases": "EventSubEvent"}, {"fullname": "twitch_bot.eventsub.eventsub_events.HypeTrainBeginEvent.__init__", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "HypeTrainBeginEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.eventsub.eventsub_events.HypeTrainBeginEvent.init", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "HypeTrainBeginEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Event data.</p>\n\n<p>Returns:\n    self (object): self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.HypeTrainBeginEvent.run", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "HypeTrainBeginEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.HypeTrainProgressEvent", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "HypeTrainProgressEvent", "kind": "class", "doc": "<p>Hype train progress event.</p>\n", "bases": "EventSubEvent"}, {"fullname": "twitch_bot.eventsub.eventsub_events.HypeTrainProgressEvent.__init__", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "HypeTrainProgressEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.eventsub.eventsub_events.HypeTrainProgressEvent.init", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "HypeTrainProgressEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Event data.</p>\n\n<p>Returns:\n    self (object): self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.HypeTrainProgressEvent.run", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "HypeTrainProgressEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.HypeTrainEndEvent", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "HypeTrainEndEvent", "kind": "class", "doc": "<p>Hype train end event.</p>\n", "bases": "EventSubEvent"}, {"fullname": "twitch_bot.eventsub.eventsub_events.HypeTrainEndEvent.__init__", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "HypeTrainEndEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.eventsub.eventsub_events.HypeTrainEndEvent.init", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "HypeTrainEndEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Event data.</p>\n\n<p>Returns:\n    self (object): self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.HypeTrainEndEvent.run", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "HypeTrainEndEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.StreamOnlineEvent", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "StreamOnlineEvent", "kind": "class", "doc": "<p>Stream online event.</p>\n", "bases": "EventSubEvent"}, {"fullname": "twitch_bot.eventsub.eventsub_events.StreamOnlineEvent.__init__", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "StreamOnlineEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.eventsub.eventsub_events.StreamOnlineEvent.init", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "StreamOnlineEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Event data.</p>\n\n<p>Returns:\n    self (object): self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.StreamOnlineEvent.run", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "StreamOnlineEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.StreamOfflineEvent", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "StreamOfflineEvent", "kind": "class", "doc": "<p>Stream offline event.</p>\n", "bases": "EventSubEvent"}, {"fullname": "twitch_bot.eventsub.eventsub_events.StreamOfflineEvent.__init__", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "StreamOfflineEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.eventsub.eventsub_events.StreamOfflineEvent.init", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "StreamOfflineEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Event data.</p>\n\n<p>Returns:\n    self (object): self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.StreamOfflineEvent.run", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "StreamOfflineEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.StreamOfflineEvent.part_all_users", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "StreamOfflineEvent.part_all_users", "kind": "function", "doc": "<p>Run the user part code for all users in chat.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_events.StreamOfflineEvent.graph_stats", "modulename": "twitch_bot.eventsub.eventsub_events", "qualname": "StreamOfflineEvent.graph_stats", "kind": "function", "doc": "<p>Graph the stream stats.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_server", "modulename": "twitch_bot.eventsub.eventsub_server", "kind": "module", "doc": "<p>EventSub Server.</p>\n"}, {"fullname": "twitch_bot.eventsub.eventsub_server.check_request", "modulename": "twitch_bot.eventsub.eventsub_server", "qualname": "check_request", "kind": "function", "doc": "<p>Check if the message from Twitch is valid and a special event.</p>\n\n<p>It may be a challenge or error message in addition to an event.</p>\n\n<p>Args:\n    request (flask.request): Message to be sent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">LocalProxy</span> <span class=\"n\">unbound</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_server.is_message_timely", "modulename": "twitch_bot.eventsub.eventsub_server", "qualname": "is_message_timely", "kind": "function", "doc": "<p>Check if the message is timely based on time sent.</p>\n\n<p>Args:\n    request (flask.request): Message to be sent.</p>\n\n<p>Returns:\n    (bool): True if the message is timely, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">LocalProxy</span> <span class=\"n\">unbound</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_server.is_message_secure", "modulename": "twitch_bot.eventsub.eventsub_server", "qualname": "is_message_secure", "kind": "function", "doc": "<p>Check if the message is secure based on the secret.</p>\n\n<p>Args:\n    request (flask.request): Message to be sent.</p>\n\n<p>Returns:\n    (bool): True if the message is secure, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">LocalProxy</span> <span class=\"n\">unbound</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_server.is_message_unique", "modulename": "twitch_bot.eventsub.eventsub_server", "qualname": "is_message_unique", "kind": "function", "doc": "<p>Check if the message is unique based on id.</p>\n\n<p>Args:\n    request (flask.request): Message to be sent.</p>\n\n<p>Returns:\n    (bool): True if the message is unique, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">LocalProxy</span> <span class=\"n\">unbound</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_server.challenge", "modulename": "twitch_bot.eventsub.eventsub_server", "qualname": "challenge", "kind": "function", "doc": "<p>Create a challenge response when Twitch requests one.</p>\n\n<p>The response should be the challenge value as plain text.</p>\n\n<p>Args:\n    request (flask.request): Message to be sent.</p>\n\n<p>Returns:\n    response (flask.Response): Response to the challenge.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">LocalProxy</span> <span class=\"n\">unbound</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_server.error_reply", "modulename": "twitch_bot.eventsub.eventsub_server", "qualname": "error_reply", "kind": "function", "doc": "<p>Reply to 'bad' messages with '200' as required.</p>\n\n<p>Returns:\n    response (flask.Response): Response to the challenge.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_server.index", "modulename": "twitch_bot.eventsub.eventsub_server", "qualname": "index", "kind": "function", "doc": "<p>Default page at root.</p>\n\n<p>Returns:\n    (flask.Response): Response to the challenge.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_server.authorize", "modulename": "twitch_bot.eventsub.eventsub_server", "qualname": "authorize", "kind": "function", "doc": "<p>Authenticate via OAuth process.</p>\n\n<p>Returns:\n    (flask.Response): Response to the challenge.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_server.process_event", "modulename": "twitch_bot.eventsub.eventsub_server", "qualname": "process_event", "kind": "function", "doc": "<p>Process webhooks for eventsub events.</p>\n\n<p>Returns:\n    (flask.Response): 200 indicating a success.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.eventsub.eventsub_server.get_thread", "modulename": "twitch_bot.eventsub.eventsub_server", "qualname": "get_thread", "kind": "function", "doc": "<p>Get the Flask server thread to receive EventSub messages.</p>\n\n<p>Returns:\n    flask_thread (Thread): Flask server thread.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.exceptions", "modulename": "twitch_bot.exceptions", "kind": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "twitch_bot.exceptions.excepthook", "modulename": "twitch_bot.exceptions.excepthook", "kind": "module", "doc": "<p>Bot exception handler.</p>\n"}, {"fullname": "twitch_bot.exceptions.excepthook.handler", "modulename": "twitch_bot.exceptions.excepthook", "qualname": "handler", "kind": "function", "doc": "<p>Excepthook override for uncaught exception handling.</p>\n\n<p>Args:\n    error_type (Exception): Type of exception.\n    value (str): Error message.\n    traceback (traceback): Traceback object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">error_type</span><span class=\"p\">:</span> <span class=\"ne\">Exception</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">tb</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;traceback&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/opt/homebrew/Cellar/python@3.10/3.10.9/Frameworks/Python.framework/Versions/3.10/lib/python3.10/traceback.py&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.exceptions.exceptions", "modulename": "twitch_bot.exceptions.exceptions", "kind": "module", "doc": "<p>Custom errors.</p>\n"}, {"fullname": "twitch_bot.exceptions.exceptions.AuthError", "modulename": "twitch_bot.exceptions.exceptions", "qualname": "AuthError", "kind": "class", "doc": "<p>AuthError.</p>\n", "bases": "builtins.Exception"}, {"fullname": "twitch_bot.exceptions.exceptions.BotError", "modulename": "twitch_bot.exceptions.exceptions", "qualname": "BotError", "kind": "class", "doc": "<p>BotDBError.</p>\n", "bases": "builtins.Exception"}, {"fullname": "twitch_bot.exceptions.exceptions.BotDBError", "modulename": "twitch_bot.exceptions.exceptions", "qualname": "BotDBError", "kind": "class", "doc": "<p>BotDBError.</p>\n", "bases": "builtins.Exception"}, {"fullname": "twitch_bot.exceptions.exceptions.NgrokError", "modulename": "twitch_bot.exceptions.exceptions", "qualname": "NgrokError", "kind": "class", "doc": "<p>NgrokError.</p>\n", "bases": "builtins.Exception"}, {"fullname": "twitch_bot.exceptions.exceptions.OBSError", "modulename": "twitch_bot.exceptions.exceptions", "qualname": "OBSError", "kind": "class", "doc": "<p>OBSError.</p>\n", "bases": "builtins.Exception"}, {"fullname": "twitch_bot.hotkeys", "modulename": "twitch_bot.hotkeys", "kind": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "twitch_bot.hotkeys.hotkeys", "modulename": "twitch_bot.hotkeys.hotkeys", "kind": "module", "doc": "<p>Hotkey triggering module.</p>\n"}, {"fullname": "twitch_bot.hotkeys.hotkeys.Hotkeys", "modulename": "twitch_bot.hotkeys.hotkeys", "qualname": "Hotkeys", "kind": "class", "doc": "<p>Hotkey triggering class.</p>\n"}, {"fullname": "twitch_bot.hotkeys.hotkeys.Hotkeys.__init__", "modulename": "twitch_bot.hotkeys.hotkeys", "qualname": "Hotkeys.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.hotkeys.hotkeys.Hotkeys.init", "modulename": "twitch_bot.hotkeys.hotkeys", "qualname": "Hotkeys.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Returns:\n    self (object): self</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.hotkeys.hotkeys.Hotkeys.reload_hotkeys", "modulename": "twitch_bot.hotkeys.hotkeys", "qualname": "Hotkeys.reload_hotkeys", "kind": "function", "doc": "<p>Reload the hotkey definition file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.hotkeys.hotkeys.Hotkeys.check", "modulename": "twitch_bot.hotkeys.hotkeys", "qualname": "Hotkeys.check", "kind": "function", "doc": "<p>Ensure the hotkey command exists.</p>\n\n<p>Args:\n    command (str): Command to run the hotkey for.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.hotkeys.hotkeys.Hotkeys.trigger", "modulename": "twitch_bot.hotkeys.hotkeys", "qualname": "Hotkeys.trigger", "kind": "function", "doc": "<p>Trigger the hotkey based on the given command.</p>\n\n<p>Args:\n    command (str): Command to run the hotkey for.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.init", "modulename": "twitch_bot.init", "kind": "module", "doc": "<p>Initialization Setup.</p>\n"}, {"fullname": "twitch_bot.log", "modulename": "twitch_bot.log", "kind": "module", "doc": "<p>Logging.</p>\n"}, {"fullname": "twitch_bot.loyalty", "modulename": "twitch_bot.loyalty", "kind": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "twitch_bot.loyalty.loyalty_manager", "modulename": "twitch_bot.loyalty.loyalty_manager", "kind": "module", "doc": "<p>Loyalty Points system.</p>\n"}, {"fullname": "twitch_bot.loyalty.loyalty_manager.LoyaltyManager", "modulename": "twitch_bot.loyalty.loyalty_manager", "qualname": "LoyaltyManager", "kind": "class", "doc": "<p>Loyalty Points Manager Class.</p>\n\n<p>Loyalty points are awarded for certain interactions with stream and can be\nredeemed for special rewards.</p>\n"}, {"fullname": "twitch_bot.loyalty.loyalty_manager.LoyaltyManager.__init__", "modulename": "twitch_bot.loyalty.loyalty_manager", "qualname": "LoyaltyManager.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.loyalty.loyalty_manager.LoyaltyManager.init", "modulename": "twitch_bot.loyalty.loyalty_manager", "qualname": "LoyaltyManager.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    bot (TwitchBot): Twitch bot instance.</p>\n\n<p>Returns:\n    self (LoyaltyManager): Class instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.loyalty.loyalty_manager.LoyaltyManager.get_loyalty_points", "modulename": "twitch_bot.loyalty.loyalty_manager", "qualname": "LoyaltyManager.get_loyalty_points", "kind": "function", "doc": "<p>Get the loyalty points from the database.</p>\n\n<p>Args:\n    username (str): Username to get the loyalty points for.</p>\n\n<p>Returns:\n    int: Loyalty points.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.loyalty.loyalty_manager.LoyaltyManager.add_loyalty_points", "modulename": "twitch_bot.loyalty.loyalty_manager", "qualname": "LoyaltyManager.add_loyalty_points", "kind": "function", "doc": "<p>Add the loyalty points to the value in the database.</p>\n\n<p>Given points will be added to the existing total.</p>\n\n<p>Args:\n    username (str): Username to set the loyalty points for.\n    points (int): Loyalty points to add to the existing total.\n        This value can be negative to subtract points.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">points</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.loyalty.loyalty_manager.LoyaltyManager.add_loyalty_points_for_event", "modulename": "twitch_bot.loyalty.loyalty_manager", "qualname": "LoyaltyManager.add_loyalty_points_for_event", "kind": "function", "doc": "<p>Add loyalty points for the given event.</p>\n\n<p>Args:\n    username (str): Username to set the loyalty points for.\n    event (str): Event name.\n    quantity (int): Amount of bits or dollars contributed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">quantity</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.loyalty.loyalty_manager.LoyaltyManager.calculate_loyalty_points", "modulename": "twitch_bot.loyalty.loyalty_manager", "qualname": "LoyaltyManager.calculate_loyalty_points", "kind": "function", "doc": "<p>Calculate loyalty points for the given user.</p>\n\n<p>This is based on time watched and subscriber status. Value may not be\ncompletely accurate as time during which the user was or was not\nsubscribed is not taken into account.</p>\n\n<p>Args:\n    username (str): Username to calculate the loyalty points for.</p>\n\n<p>Returns:\n    points (int): Loyalty points.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.loyalty.loyalty_manager.LoyaltyManager.get_redemptions", "modulename": "twitch_bot.loyalty.loyalty_manager", "qualname": "LoyaltyManager.get_redemptions", "kind": "function", "doc": "<p>Get the redemptions and their costs.</p>\n\n<p>Returns:\n    (dict): Dictionary of redemptions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.loyalty.loyalty_manager.LoyaltyManager.redeem_loyalty_points", "modulename": "twitch_bot.loyalty.loyalty_manager", "qualname": "LoyaltyManager.redeem_loyalty_points", "kind": "function", "doc": "<p>Redeem loyalty points for a reward.</p>\n\n<p>Args:\n    username (str): Username to calculate the loyalty points for.\n    redemption (str): Name of the redemption.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">redemption</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.moderator", "modulename": "twitch_bot.moderator", "kind": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "twitch_bot.moderator.moderator", "modulename": "twitch_bot.moderator.moderator", "kind": "module", "doc": "<p>Moderator.</p>\n"}, {"fullname": "twitch_bot.moderator.moderator.Moderator", "modulename": "twitch_bot.moderator.moderator", "qualname": "Moderator", "kind": "class", "doc": "<p>Twitch Bot Moderator.</p>\n"}, {"fullname": "twitch_bot.moderator.moderator.Moderator.__init__", "modulename": "twitch_bot.moderator.moderator", "qualname": "Moderator.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.moderator.moderator.Moderator.init", "modulename": "twitch_bot.moderator.moderator", "qualname": "Moderator.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    bot (TwitchBot): The running Twitch Bot.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.moderator.moderator.Moderator.check_message", "modulename": "twitch_bot.moderator.moderator", "qualname": "Moderator.check_message", "kind": "function", "doc": "<p>Check the message for banned terms.</p>\n\n<p>Args:\n    user (dict): Dictionary containing the message sender data.\n    message (str): Sent message.</p>\n\n<p>Returns:\n    (bool): True if the message is approved, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.moderator.moderator.Moderator.check_plugin_permissions", "modulename": "twitch_bot.moderator.moderator", "qualname": "Moderator.check_plugin_permissions", "kind": "function", "doc": "<p>Confirm the given user has permissions to run the given plugin.</p>\n\n<p>Args:\n    plugin (BaseCommandPlugin): Plugin class.\n    user (dict): Dictionary containing the message sender data.</p>\n\n<p>Returns:\n    (bool): True if the user has permissions, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">plugin</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>, </span><span class=\"param\"><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.moderator.moderator.Moderator.check_cooldowns", "modulename": "twitch_bot.moderator.moderator", "qualname": "Moderator.check_cooldowns", "kind": "function", "doc": "<p>Confirm the given user has permissions to run the given plugin.</p>\n\n<p>Args:\n    plugin (BaseCommandPlugin): Plugin class.\n    user (dict): Dictionary containing the message sender data.</p>\n\n<p>Returns:\n    (bool): True if the user has permissions, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">plugin</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>, </span><span class=\"param\"><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.moderator.moderator.Moderator.set_timeout", "modulename": "twitch_bot.moderator.moderator", "qualname": "Moderator.set_timeout", "kind": "function", "doc": "<p>Set a timeout for the user for violating moderator rules.</p>\n\n<p>Args:\n    user (dict): Dictionary containing the message sender data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.moderator.moderator.Moderator.check_timeout", "modulename": "twitch_bot.moderator.moderator", "qualname": "Moderator.check_timeout", "kind": "function", "doc": "<p>Check the user for a timeout.</p>\n\n<p>Args:\n    user (dict): Dictionary containing the message sender data.</p>\n\n<p>Returns:\n    (bool): True if the user is timed out, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.moderator.moderator.Moderator.ban_user", "modulename": "twitch_bot.moderator.moderator", "qualname": "Moderator.ban_user", "kind": "function", "doc": "<p>Ban a user.</p>\n\n<p>Args:\n    user (dict): Dictionary containing the message sender data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.moderator.moderator.Moderator.delete_message", "modulename": "twitch_bot.moderator.moderator", "qualname": "Moderator.delete_message", "kind": "function", "doc": "<p>Delete a message based on the message ID.</p>\n\n<p>Args:\n    event (object): ChatEvent object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.ngrok", "modulename": "twitch_bot.ngrok", "kind": "module", "doc": "<p>Run ngrok.</p>\n"}, {"fullname": "twitch_bot.ngrok.Ngrok", "modulename": "twitch_bot.ngrok", "qualname": "Ngrok", "kind": "class", "doc": "<p>Ngrok class.</p>\n"}, {"fullname": "twitch_bot.ngrok.Ngrok.__init__", "modulename": "twitch_bot.ngrok", "qualname": "Ngrok.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.ngrok.Ngrok.init", "modulename": "twitch_bot.ngrok", "qualname": "Ngrok.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.ngrok.Ngrok.get_thread", "modulename": "twitch_bot.ngrok", "qualname": "Ngrok.get_thread", "kind": "function", "doc": "<p>Get the ngrok service as a thread.</p>\n\n<p>Returns:\n    ngrok_thread (Thread): Thread for running the ngrok process.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.ngrok.get_url", "modulename": "twitch_bot.ngrok", "qualname": "get_url", "kind": "function", "doc": "<p>Return the generated ngrok url.</p>\n\n<p>Returns:\n    ngrok_url (str): URL to pass to Twitch webhook subscriptions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.ngrok.is_static", "modulename": "twitch_bot.ngrok", "qualname": "is_static", "kind": "function", "doc": "<p>Return whether or not the ngrok tunnel is static.</p>\n\n<p>Returns:\n    (bool): True if static, False otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.notification", "modulename": "twitch_bot.notification", "kind": "module", "doc": "<p>System notification sender.</p>\n"}, {"fullname": "twitch_bot.notification.notify", "modulename": "twitch_bot.notification", "qualname": "notify", "kind": "function", "doc": "<p>Send a system notification based on the OS.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">subtitle</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;An error occured.&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">caller</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;TwitchBot&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs", "modulename": "twitch_bot.obs", "kind": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "twitch_bot.obs.convert_api", "modulename": "twitch_bot.obs.convert_api", "kind": "module", "doc": "<p>Generate the API classes from the JSON documentation.\nOnly 'requests' and 'events' are processed, 'typedefs' are unneeded.</p>\n"}, {"fullname": "twitch_bot.obs.convert_api.Property", "modulename": "twitch_bot.obs.convert_api", "qualname": "Property", "kind": "class", "doc": "<p>Property object.</p>\n"}, {"fullname": "twitch_bot.obs.convert_api.Property.__init__", "modulename": "twitch_bot.obs.convert_api", "qualname": "Property.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">param_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "twitch_bot.obs.convert_api.Argument", "modulename": "twitch_bot.obs.convert_api", "qualname": "Argument", "kind": "class", "doc": "<p>Argument class.</p>\n", "bases": "Property"}, {"fullname": "twitch_bot.obs.convert_api.Argument.__init__", "modulename": "twitch_bot.obs.convert_api", "qualname": "Argument.__init__", "kind": "function", "doc": "<p>Init.</p>\n\n<p>Args:\n    data (dict): Argument data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "twitch_bot.obs.convert_api.Return", "modulename": "twitch_bot.obs.convert_api", "qualname": "Return", "kind": "class", "doc": "<p>Return class.</p>\n", "bases": "Property"}, {"fullname": "twitch_bot.obs.convert_api.Return.__init__", "modulename": "twitch_bot.obs.convert_api", "qualname": "Return.__init__", "kind": "function", "doc": "<p>Init.</p>\n\n<p>Args:\n    data (dict): Return data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "twitch_bot.obs.convert_api.OBSCall", "modulename": "twitch_bot.obs.convert_api", "qualname": "OBSCall", "kind": "class", "doc": "<p>OBS call object.</p>\n"}, {"fullname": "twitch_bot.obs.convert_api.OBSCall.__init__", "modulename": "twitch_bot.obs.convert_api", "qualname": "OBSCall.__init__", "kind": "function", "doc": "<p>Init.</p>\n\n<p>Args:\n    api_def (dict): Definition of an API call.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">api_def</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, {"fullname": "twitch_bot.obs.convert_api.download_json", "modulename": "twitch_bot.obs.convert_api", "qualname": "download_json", "kind": "function", "doc": "<p>Download the API json file.</p>\n\n<p>Returns:\n    data (dict): API data as a dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.obs.convert_api.clean_name", "modulename": "twitch_bot.obs.convert_api", "qualname": "clean_name", "kind": "function", "doc": "<p>Clean the name of the property.</p>\n\n<p>Args:\n    name (str): Given name.</p>\n\n<p>Returns:\n    name (str): Cleaned name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.obs.convert_api.create_calls", "modulename": "twitch_bot.obs.convert_api", "qualname": "create_calls", "kind": "function", "doc": "<p>Turn the json data into call objects.</p>\n\n<p>Args:\n    data (dict): JSON API data.</p>\n\n<p>Returns:\n    calls (dict[list]): Dictionary of OBSCall objects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.obs.convert_api.write_to_file", "modulename": "twitch_bot.obs.convert_api", "qualname": "write_to_file", "kind": "function", "doc": "<p>Write data to the appropriate files.</p>\n\n<p>Args:\n    category (str): Category of file.\n    data (dict): Data to write.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">category</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.obs.convert_api.write_header", "modulename": "twitch_bot.obs.convert_api", "qualname": "write_header", "kind": "function", "doc": "<p>Write the document header.</p>\n\n<p>Args:\n    category (str): Category name.</p>\n\n<p>Returns:\n    header (list): Header as a joinable list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">category</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.obs.convert_api.write_docstring", "modulename": "twitch_bot.obs.convert_api", "qualname": "write_docstring", "kind": "function", "doc": "<p>Write the class docstring for the given call.</p>\n\n<p>Args:\n    call (OBSCall): Current call.</p>\n\n<p>Returns:\n    docstring (list): Docstring as a joinable list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">call</span><span class=\"p\">:</span> <span class=\"n\">twitch_bot</span><span class=\"o\">.</span><span class=\"n\">obs</span><span class=\"o\">.</span><span class=\"n\">convert_api</span><span class=\"o\">.</span><span class=\"n\">OBSCall</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.obs.convert_api.convert_api", "modulename": "twitch_bot.obs.convert_api", "qualname": "convert_api", "kind": "function", "doc": "<p>Generates the necessary classes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.obs.obs_base_classes", "modulename": "twitch_bot.obs.obs_base_classes", "kind": "module", "doc": "<p>Base classes.</p>\n"}, {"fullname": "twitch_bot.obs.obs_base_classes.BaseEvents", "modulename": "twitch_bot.obs.obs_base_classes", "qualname": "BaseEvents", "kind": "class", "doc": "<p>Base class for events.</p>\n"}, {"fullname": "twitch_bot.obs.obs_base_classes.BaseEvents.__init__", "modulename": "twitch_bot.obs.obs_base_classes", "qualname": "BaseEvents.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_base_classes.BaseEvents.init", "modulename": "twitch_bot.obs.obs_base_classes", "qualname": "BaseEvents.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Returns:\n    self (self): Class instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_base_classes.BaseEvents.input", "modulename": "twitch_bot.obs.obs_base_classes", "qualname": "BaseEvents.input", "kind": "function", "doc": "<p>Data input.</p>\n\n<p>Args:\n    data (dict): Event data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_base_classes.BaseRequests", "modulename": "twitch_bot.obs.obs_base_classes", "qualname": "BaseRequests", "kind": "class", "doc": "<p>Base class for requests.</p>\n"}, {"fullname": "twitch_bot.obs.obs_base_classes.BaseRequests.__init__", "modulename": "twitch_bot.obs.obs_base_classes", "qualname": "BaseRequests.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_base_classes.BaseRequests.init", "modulename": "twitch_bot.obs.obs_base_classes", "qualname": "BaseRequests.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Returns:\n    self (self): Class instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_base_classes.BaseRequests.data", "modulename": "twitch_bot.obs.obs_base_classes", "qualname": "BaseRequests.data", "kind": "function", "doc": "<p>Data payload from the request.</p>\n\n<p>Returns:\n    payload (dict): Payload from OBS.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_base_classes.BaseRequests.input", "modulename": "twitch_bot.obs.obs_base_classes", "qualname": "BaseRequests.input", "kind": "function", "doc": "<p>Data input.</p>\n\n<p>Args:\n    data (dict): Event data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_connection", "modulename": "twitch_bot.obs.obs_connection", "kind": "module", "doc": "<p>Websocket server.</p>\n"}, {"fullname": "twitch_bot.obs.obs_connection.OBSConnection", "modulename": "twitch_bot.obs.obs_connection", "qualname": "OBSConnection", "kind": "class", "doc": "<p>OBS connection class.</p>\n"}, {"fullname": "twitch_bot.obs.obs_connection.OBSConnection.__init__", "modulename": "twitch_bot.obs.obs_connection", "qualname": "OBSConnection.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_connection.OBSConnection.init", "modulename": "twitch_bot.obs.obs_connection", "qualname": "OBSConnection.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    authorization (Auth): Authorization object.</p>\n\n<p>Returns:\n    self (OBSConnection): Class instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">authorization</span><span class=\"p\">:</span> <span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">Auth</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_connection.OBSConnection.message_wrapper", "modulename": "twitch_bot.obs.obs_connection", "qualname": "OBSConnection.message_wrapper", "kind": "function", "doc": "<p>Decorator to check the connection to OBS.</p>\n\n<p>Args:\n    func (Callable): Decorated function.</p>\n\n<p>Returns:\n    (Any): Result of the decorated function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.obs.obs_connection.OBSConnection.connect", "modulename": "twitch_bot.obs.obs_connection", "qualname": "OBSConnection.connect", "kind": "function", "doc": "<p>Connect to the websocket server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_connection.OBSConnection.reconnect", "modulename": "twitch_bot.obs.obs_connection", "qualname": "OBSConnection.reconnect", "kind": "function", "doc": "<p>Restart the connection to the websocket server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_connection.OBSConnection.disconnect", "modulename": "twitch_bot.obs.obs_connection", "qualname": "OBSConnection.disconnect", "kind": "function", "doc": "<p>Disconnect from websocket server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_connection.OBSConnection.authorize", "modulename": "twitch_bot.obs.obs_connection", "qualname": "OBSConnection.authorize", "kind": "function", "doc": "<p>Authorize the connection.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_connection.OBSConnection.call", "modulename": "twitch_bot.obs.obs_connection", "qualname": "OBSConnection.call", "kind": "function", "doc": "<p>Make a call to the OBS server.</p>\n\n<p>Args:\n    request (object): Request to send to the server.</p>\n\n<p>Returns:\n    request (object): Request with response data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_connection.OBSConnection.send", "modulename": "twitch_bot.obs.obs_connection", "qualname": "OBSConnection.send", "kind": "function", "doc": "<p>Wrapped function.</p>\n\n<p>Args:\n    data (dict): Data to send.</p>\n\n<p>Returns:\n    result (dict) from the server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_connection.OBSConnection.await_response", "modulename": "twitch_bot.obs.obs_connection", "qualname": "OBSConnection.await_response", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_connection.OBSConnection.register", "modulename": "twitch_bot.obs.obs_connection", "qualname": "OBSConnection.register", "kind": "function", "doc": "<p>Register a new callback.</p>\n\n<p>Args:\n    func (Callable): Callback function to run on event.\n    event (Event): Event to trigger.\n        Default is None, which will trigger on all events.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"nb\">object</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_connection.OBSConnection.unregister", "modulename": "twitch_bot.obs.obs_connection", "qualname": "OBSConnection.unregister", "kind": "function", "doc": "<p>Unregister an existing callback.</p>\n\n<p>Args:\n    func (Callable): Callback function to run on event.\n    event (Event): Event to trigger.\n        Default is None, which would have triggered on all events.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"nb\">object</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_connection.OBSConnection.process_message", "modulename": "twitch_bot.obs.obs_connection", "qualname": "OBSConnection.process_message", "kind": "function", "doc": "<p>Process the received message.</p>\n\n<p>Args:\n    message (json): JSON message received from OBS.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;json&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/opt/homebrew/Cellar/python@3.10/3.10.9/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/__init__.py&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_connection.OBSConnection.build_event", "modulename": "twitch_bot.obs.obs_connection", "qualname": "OBSConnection.build_event", "kind": "function", "doc": "<p>Build an event from a received message.</p>\n\n<p>Args:\n    data (dict): Message data.</p>\n\n<p>Returns:\n    obj (object): Event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_connection.OBSConnection.run", "modulename": "twitch_bot.obs.obs_connection", "qualname": "OBSConnection.run", "kind": "function", "doc": "<p>Run the receiver.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_event_manager", "modulename": "twitch_bot.obs.obs_event_manager", "kind": "module", "doc": "<p>OBS Callback Event Manager.</p>\n"}, {"fullname": "twitch_bot.obs.obs_event_manager.CallbackEvent", "modulename": "twitch_bot.obs.obs_event_manager", "qualname": "CallbackEvent", "kind": "class", "doc": "<p>Callback event.</p>\n"}, {"fullname": "twitch_bot.obs.obs_event_manager.CallbackEvent.__init__", "modulename": "twitch_bot.obs.obs_event_manager", "qualname": "CallbackEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_event_manager.CallbackEvent.init", "modulename": "twitch_bot.obs.obs_event_manager", "qualname": "CallbackEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    callback (Callable): Function to run on event received.\n    trigger (Event): OBS event received.</p>\n\n<p>Returns:\n    self (CallbackEvent): Class instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">callback</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>, </span><span class=\"param\"><span class=\"n\">trigger</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_event_manager.CallbackEventManager", "modulename": "twitch_bot.obs.obs_event_manager", "qualname": "CallbackEventManager", "kind": "class", "doc": "<p>Callback event manager.</p>\n"}, {"fullname": "twitch_bot.obs.obs_event_manager.CallbackEventManager.__init__", "modulename": "twitch_bot.obs.obs_event_manager", "qualname": "CallbackEventManager.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_event_manager.CallbackEventManager.init", "modulename": "twitch_bot.obs.obs_event_manager", "qualname": "CallbackEventManager.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Returns:\n    self (CallbackEventManager): Class instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_event_manager.CallbackEventManager.register", "modulename": "twitch_bot.obs.obs_event_manager", "qualname": "CallbackEventManager.register", "kind": "function", "doc": "<p>Register a callback event.</p>\n\n<p>Args:\n    func (Callable): Function to run on event received.\n    trigger (Event): OBS event received.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>, </span><span class=\"param\"><span class=\"n\">trigger</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_event_manager.CallbackEventManager.unregister", "modulename": "twitch_bot.obs.obs_event_manager", "qualname": "CallbackEventManager.unregister", "kind": "function", "doc": "<p>Unregister a callback event.</p>\n\n<p>Args:\n    callback (Callable): Function to run on event received.\n    trigger (Event): OBS event received.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">callback</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>, </span><span class=\"param\"><span class=\"n\">trigger</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_event_manager.CallbackEventManager.trigger", "modulename": "twitch_bot.obs.obs_event_manager", "qualname": "CallbackEventManager.trigger", "kind": "function", "doc": "<p>Trigger the callbacks from the event.</p>\n\n<p>Args:\n    event (event): OBS event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events", "modulename": "twitch_bot.obs.obs_events", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "twitch_bot.obs.obs_events.BroadcastCustomMessage", "modulename": "twitch_bot.obs.obs_events", "qualname": "BroadcastCustomMessage", "kind": "class", "doc": "<p>A custom broadcast message, sent by the server, requested by one of the websocket clients.</p>\n\n<p>Returns:\n    data (object): User-defined data\n    realm (str): Identifier provided by the sender</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.BroadcastCustomMessage.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "BroadcastCustomMessage.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.BroadcastCustomMessage.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "BroadcastCustomMessage.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.BroadcastCustomMessage.get_data", "modulename": "twitch_bot.obs.obs_events", "qualname": "BroadcastCustomMessage.get_data", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.BroadcastCustomMessage.get_realm", "modulename": "twitch_bot.obs.obs_events", "qualname": "BroadcastCustomMessage.get_realm", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.Exiting", "modulename": "twitch_bot.obs.obs_events", "qualname": "Exiting", "kind": "class", "doc": "<p>OBS is exiting.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.Exiting.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "Exiting.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.Exiting.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "Exiting.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.Heartbeat", "modulename": "twitch_bot.obs.obs_events", "qualname": "Heartbeat", "kind": "class", "doc": "<p>Emitted every 2 seconds after enabling it by calling SetHeartbeat.</p>\n\n<p>Returns:\n    current-profile (str): Current active profile.\n    current-scene (str): Current active scene.\n    pulse (bool): Toggles between every JSON message as an \"I am alive\" indicator.\n    recording (bool): Current recording state.\n    stats (OBSStats): OBS Stats\n    streaming (bool): Current streaming state.\n    total-record-bytes (int): Total bytes recorded since the recording started.\n    total-record-frames (int): Total frames recorded since the recording started.\n    total-record-time (int): Total time (in seconds) since recording started.\n    total-stream-bytes (int): Total bytes sent since the stream started.\n    total-stream-frames (int): Total frames streamed since the stream started.\n    total-stream-time (int): Total time (in seconds) since the stream started.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.Heartbeat.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "Heartbeat.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.Heartbeat.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "Heartbeat.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.Heartbeat.get_current_profile", "modulename": "twitch_bot.obs.obs_events", "qualname": "Heartbeat.get_current_profile", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.Heartbeat.get_current_scene", "modulename": "twitch_bot.obs.obs_events", "qualname": "Heartbeat.get_current_scene", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.Heartbeat.get_pulse", "modulename": "twitch_bot.obs.obs_events", "qualname": "Heartbeat.get_pulse", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.Heartbeat.get_recording", "modulename": "twitch_bot.obs.obs_events", "qualname": "Heartbeat.get_recording", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.Heartbeat.get_stats", "modulename": "twitch_bot.obs.obs_events", "qualname": "Heartbeat.get_stats", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.Heartbeat.get_streaming", "modulename": "twitch_bot.obs.obs_events", "qualname": "Heartbeat.get_streaming", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.Heartbeat.get_total_record_bytes", "modulename": "twitch_bot.obs.obs_events", "qualname": "Heartbeat.get_total_record_bytes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.Heartbeat.get_total_record_frames", "modulename": "twitch_bot.obs.obs_events", "qualname": "Heartbeat.get_total_record_frames", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.Heartbeat.get_total_record_time", "modulename": "twitch_bot.obs.obs_events", "qualname": "Heartbeat.get_total_record_time", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.Heartbeat.get_total_stream_bytes", "modulename": "twitch_bot.obs.obs_events", "qualname": "Heartbeat.get_total_stream_bytes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.Heartbeat.get_total_stream_frames", "modulename": "twitch_bot.obs.obs_events", "qualname": "Heartbeat.get_total_stream_frames", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.Heartbeat.get_total_stream_time", "modulename": "twitch_bot.obs.obs_events", "qualname": "Heartbeat.get_total_stream_time", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaEnded", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaEnded", "kind": "class", "doc": "<p>Note: These events are emitted by the OBS sources themselves. For example when the media file ends. The behavior depends on the type of media source being used.</p>\n\n<p>Returns:\n    sourceKind (str): The ID type of the source (Eg. <code>vlc_source</code> or <code>ffmpeg_source</code>)\n    sourceName (str): Source name</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.MediaEnded.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaEnded.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.MediaEnded.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaEnded.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaEnded.get_sourceKind", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaEnded.get_sourceKind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaEnded.get_sourceName", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaEnded.get_sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaNext", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaNext", "kind": "class", "doc": "<p>Note: This event is only emitted when something actively controls the media/VLC source. In other words, the source will never emit this on its own naturally.</p>\n\n<p>Returns:\n    sourceKind (str): The ID type of the source (Eg. <code>vlc_source</code> or <code>ffmpeg_source</code>)\n    sourceName (str): Source name</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.MediaNext.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaNext.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.MediaNext.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaNext.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaNext.get_sourceKind", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaNext.get_sourceKind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaNext.get_sourceName", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaNext.get_sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaPaused", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaPaused", "kind": "class", "doc": "<p>Note: This event is only emitted when something actively controls the media/VLC source. In other words, the source will never emit this on its own naturally.</p>\n\n<p>Returns:\n    sourceKind (str): The ID type of the source (Eg. <code>vlc_source</code> or <code>ffmpeg_source</code>)\n    sourceName (str): Source name</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.MediaPaused.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaPaused.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.MediaPaused.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaPaused.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaPaused.get_sourceKind", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaPaused.get_sourceKind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaPaused.get_sourceName", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaPaused.get_sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaPlaying", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaPlaying", "kind": "class", "doc": "<p>Note: This event is only emitted when something actively controls the media/VLC source. In other words, the source will never emit this on its own naturally.</p>\n\n<p>Returns:\n    sourceKind (str): The ID type of the source (Eg. <code>vlc_source</code> or <code>ffmpeg_source</code>)\n    sourceName (str): Source name</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.MediaPlaying.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaPlaying.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.MediaPlaying.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaPlaying.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaPlaying.get_sourceKind", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaPlaying.get_sourceKind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaPlaying.get_sourceName", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaPlaying.get_sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaPrevious", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaPrevious", "kind": "class", "doc": "<p>Note: This event is only emitted when something actively controls the media/VLC source. In other words, the source will never emit this on its own naturally.</p>\n\n<p>Returns:\n    sourceKind (str): The ID type of the source (Eg. <code>vlc_source</code> or <code>ffmpeg_source</code>)\n    sourceName (str): Source name</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.MediaPrevious.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaPrevious.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.MediaPrevious.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaPrevious.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaPrevious.get_sourceKind", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaPrevious.get_sourceKind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaPrevious.get_sourceName", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaPrevious.get_sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaRestarted", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaRestarted", "kind": "class", "doc": "<p>Note: This event is only emitted when something actively controls the media/VLC source. In other words, the source will never emit this on its own naturally.</p>\n\n<p>Returns:\n    sourceKind (str): The ID type of the source (Eg. <code>vlc_source</code> or <code>ffmpeg_source</code>)\n    sourceName (str): Source name</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.MediaRestarted.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaRestarted.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.MediaRestarted.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaRestarted.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaRestarted.get_sourceKind", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaRestarted.get_sourceKind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaRestarted.get_sourceName", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaRestarted.get_sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaStarted", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaStarted", "kind": "class", "doc": "<p>Note: These events are emitted by the OBS sources themselves. For example when the media file starts playing. The behavior depends on the type of media source being used.</p>\n\n<p>Returns:\n    sourceKind (str): The ID type of the source (Eg. <code>vlc_source</code> or <code>ffmpeg_source</code>)\n    sourceName (str): Source name</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.MediaStarted.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaStarted.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.MediaStarted.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaStarted.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaStarted.get_sourceKind", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaStarted.get_sourceKind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaStarted.get_sourceName", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaStarted.get_sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaStopped", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaStopped", "kind": "class", "doc": "<p>Note: This event is only emitted when something actively controls the media/VLC source. In other words, the source will never emit this on its own naturally.</p>\n\n<p>Returns:\n    sourceKind (str): The ID type of the source (Eg. <code>vlc_source</code> or <code>ffmpeg_source</code>)\n    sourceName (str): Source name</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.MediaStopped.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaStopped.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.MediaStopped.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaStopped.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaStopped.get_sourceKind", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaStopped.get_sourceKind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.MediaStopped.get_sourceName", "modulename": "twitch_bot.obs.obs_events", "qualname": "MediaStopped.get_sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.PreviewSceneChanged", "modulename": "twitch_bot.obs.obs_events", "qualname": "PreviewSceneChanged", "kind": "class", "doc": "<p>The selected preview scene has changed (only available in Studio Mode).</p>\n\n<p>Returns:\n    scene-name (str): Name of the scene being previewed.\n    sources (list): List of sources composing the scene. Same specification as <a href=\"#getcurrentscene\"><code>GetCurrentScene</code></a>.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.PreviewSceneChanged.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "PreviewSceneChanged.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.PreviewSceneChanged.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "PreviewSceneChanged.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.PreviewSceneChanged.get_scene_name", "modulename": "twitch_bot.obs.obs_events", "qualname": "PreviewSceneChanged.get_scene_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.PreviewSceneChanged.get_sources", "modulename": "twitch_bot.obs.obs_events", "qualname": "PreviewSceneChanged.get_sources", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.ProfileChanged", "modulename": "twitch_bot.obs.obs_events", "qualname": "ProfileChanged", "kind": "class", "doc": "<p>Triggered when switching to another profile or when renaming the current profile.</p>\n\n<p>Returns:\n    profile (str): Name of the new current profile.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.ProfileChanged.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "ProfileChanged.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.ProfileChanged.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "ProfileChanged.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.ProfileChanged.get_profile", "modulename": "twitch_bot.obs.obs_events", "qualname": "ProfileChanged.get_profile", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.ProfileListChanged", "modulename": "twitch_bot.obs.obs_events", "qualname": "ProfileListChanged", "kind": "class", "doc": "<p>Triggered when a profile is created, added, renamed, or removed.</p>\n\n<p>Returns:\n    profiles (list): Profiles list.\n    profiles.*.name (str): Profile name.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.ProfileListChanged.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "ProfileListChanged.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.ProfileListChanged.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "ProfileListChanged.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.ProfileListChanged.get_profiles", "modulename": "twitch_bot.obs.obs_events", "qualname": "ProfileListChanged.get_profiles", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.ProfileListChanged.get_profiles___name", "modulename": "twitch_bot.obs.obs_events", "qualname": "ProfileListChanged.get_profiles___name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.RecordingPaused", "modulename": "twitch_bot.obs.obs_events", "qualname": "RecordingPaused", "kind": "class", "doc": "<p>Current recording paused</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.RecordingPaused.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "RecordingPaused.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.RecordingPaused.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "RecordingPaused.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.RecordingResumed", "modulename": "twitch_bot.obs.obs_events", "qualname": "RecordingResumed", "kind": "class", "doc": "<p>Current recording resumed</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.RecordingResumed.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "RecordingResumed.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.RecordingResumed.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "RecordingResumed.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.RecordingStarted", "modulename": "twitch_bot.obs.obs_events", "qualname": "RecordingStarted", "kind": "class", "doc": "<p>Recording started successfully.</p>\n\n<p>Returns:\n    recordingFilename (str): Absolute path to the file of the current recording.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.RecordingStarted.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "RecordingStarted.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.RecordingStarted.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "RecordingStarted.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.RecordingStarted.get_recordingFilename", "modulename": "twitch_bot.obs.obs_events", "qualname": "RecordingStarted.get_recordingFilename", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.RecordingStarting", "modulename": "twitch_bot.obs.obs_events", "qualname": "RecordingStarting", "kind": "class", "doc": "<p>Note: <code>recordingFilename</code> is not provided in this event because this information\nis not available at the time this event is emitted.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.RecordingStarting.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "RecordingStarting.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.RecordingStarting.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "RecordingStarting.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.RecordingStopped", "modulename": "twitch_bot.obs.obs_events", "qualname": "RecordingStopped", "kind": "class", "doc": "<p>Recording stopped successfully.</p>\n\n<p>Returns:\n    recordingFilename (str): Absolute path to the file of the current recording.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.RecordingStopped.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "RecordingStopped.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.RecordingStopped.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "RecordingStopped.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.RecordingStopped.get_recordingFilename", "modulename": "twitch_bot.obs.obs_events", "qualname": "RecordingStopped.get_recordingFilename", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.RecordingStopping", "modulename": "twitch_bot.obs.obs_events", "qualname": "RecordingStopping", "kind": "class", "doc": "<p>A request to stop recording has been issued.</p>\n\n<p>Returns:\n    recordingFilename (str): Absolute path to the file of the current recording.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.RecordingStopping.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "RecordingStopping.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.RecordingStopping.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "RecordingStopping.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.RecordingStopping.get_recordingFilename", "modulename": "twitch_bot.obs.obs_events", "qualname": "RecordingStopping.get_recordingFilename", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.ReplayStarted", "modulename": "twitch_bot.obs.obs_events", "qualname": "ReplayStarted", "kind": "class", "doc": "<p>Replay Buffer started successfully</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.ReplayStarted.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "ReplayStarted.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.ReplayStarted.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "ReplayStarted.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.ReplayStarting", "modulename": "twitch_bot.obs.obs_events", "qualname": "ReplayStarting", "kind": "class", "doc": "<p>A request to start the replay buffer has been issued.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.ReplayStarting.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "ReplayStarting.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.ReplayStarting.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "ReplayStarting.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.ReplayStopped", "modulename": "twitch_bot.obs.obs_events", "qualname": "ReplayStopped", "kind": "class", "doc": "<p>Replay Buffer stopped successfully</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.ReplayStopped.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "ReplayStopped.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.ReplayStopped.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "ReplayStopped.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.ReplayStopping", "modulename": "twitch_bot.obs.obs_events", "qualname": "ReplayStopping", "kind": "class", "doc": "<p>A request to stop the replay buffer has been issued.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.ReplayStopping.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "ReplayStopping.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.ReplayStopping.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "ReplayStopping.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneCollectionChanged", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneCollectionChanged", "kind": "class", "doc": "<p>Triggered when switching to another scene collection or when renaming the current scene collection.</p>\n\n<p>Returns:\n    sceneCollection (str): Name of the new current scene collection.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SceneCollectionChanged.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneCollectionChanged.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SceneCollectionChanged.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneCollectionChanged.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneCollectionChanged.get_sceneCollection", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneCollectionChanged.get_sceneCollection", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneCollectionListChanged", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneCollectionListChanged", "kind": "class", "doc": "<p>Triggered when a scene collection is created, added, renamed, or removed.</p>\n\n<p>Returns:\n    sceneCollections (list): Scene collections list.\n    sceneCollections.*.name (str): Scene collection name.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SceneCollectionListChanged.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneCollectionListChanged.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SceneCollectionListChanged.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneCollectionListChanged.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneCollectionListChanged.get_sceneCollections", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneCollectionListChanged.get_sceneCollections", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneCollectionListChanged.get_sceneCollections___name", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneCollectionListChanged.get_sceneCollections___name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemAdded", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemAdded", "kind": "class", "doc": "<p>A scene item has been added to a scene.</p>\n\n<p>Returns:\n    item-id (int): Scene item ID\n    item-name (str): Name of the item added to the scene.\n    scene-name (str): Name of the scene.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemAdded.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemAdded.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemAdded.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemAdded.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemAdded.get_item_id", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemAdded.get_item_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemAdded.get_item_name", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemAdded.get_item_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemAdded.get_scene_name", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemAdded.get_scene_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemDeselected", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemDeselected", "kind": "class", "doc": "<p>A scene item is deselected.</p>\n\n<p>Returns:\n    item-id (int): Name of the item in the scene.\n    item-name (str): Name of the item in the scene.\n    scene-name (str): Name of the scene.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemDeselected.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemDeselected.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemDeselected.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemDeselected.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemDeselected.get_item_id", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemDeselected.get_item_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemDeselected.get_item_name", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemDeselected.get_item_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemDeselected.get_scene_name", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemDeselected.get_scene_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemLockChanged", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemLockChanged", "kind": "class", "doc": "<p>A scene item's locked status has been toggled.</p>\n\n<p>Returns:\n    item-id (int): Scene item ID\n    item-locked (bool): New locked state of the item.\n    item-name (str): Name of the item in the scene.\n    scene-name (str): Name of the scene.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemLockChanged.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemLockChanged.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemLockChanged.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemLockChanged.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemLockChanged.get_item_id", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemLockChanged.get_item_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemLockChanged.get_item_locked", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemLockChanged.get_item_locked", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemLockChanged.get_item_name", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemLockChanged.get_item_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemLockChanged.get_scene_name", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemLockChanged.get_scene_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemRemoved", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemRemoved", "kind": "class", "doc": "<p>A scene item has been removed from a scene.</p>\n\n<p>Returns:\n    item-id (int): Scene item ID\n    item-name (str): Name of the item removed from the scene.\n    scene-name (str): Name of the scene.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemRemoved.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemRemoved.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemRemoved.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemRemoved.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemRemoved.get_item_id", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemRemoved.get_item_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemRemoved.get_item_name", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemRemoved.get_item_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemRemoved.get_scene_name", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemRemoved.get_scene_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemSelected", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemSelected", "kind": "class", "doc": "<p>A scene item is selected.</p>\n\n<p>Returns:\n    item-id (int): Name of the item in the scene.\n    item-name (str): Name of the item in the scene.\n    scene-name (str): Name of the scene.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemSelected.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemSelected.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemSelected.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemSelected.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemSelected.get_item_id", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemSelected.get_item_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemSelected.get_item_name", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemSelected.get_item_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemSelected.get_scene_name", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemSelected.get_scene_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemTransformChanged", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemTransformChanged", "kind": "class", "doc": "<p>A scene item's transform has been changed.</p>\n\n<p>Returns:\n    item-id (int): Scene item ID\n    item-name (str): Name of the item in the scene.\n    scene-name (str): Name of the scene.\n    transform (SceneItemTransform): Scene item transform properties</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemTransformChanged.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemTransformChanged.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemTransformChanged.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemTransformChanged.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemTransformChanged.get_item_id", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemTransformChanged.get_item_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemTransformChanged.get_item_name", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemTransformChanged.get_item_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemTransformChanged.get_scene_name", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemTransformChanged.get_scene_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemTransformChanged.get_transform", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemTransformChanged.get_transform", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemVisibilityChanged", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemVisibilityChanged", "kind": "class", "doc": "<p>A scene item's visibility has been toggled.</p>\n\n<p>Returns:\n    item-id (int): Scene item ID\n    item-name (str): Name of the item in the scene.\n    item-visible (bool): New visibility state of the item.\n    scene-name (str): Name of the scene.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemVisibilityChanged.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemVisibilityChanged.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemVisibilityChanged.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemVisibilityChanged.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemVisibilityChanged.get_item_id", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemVisibilityChanged.get_item_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemVisibilityChanged.get_item_name", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemVisibilityChanged.get_item_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemVisibilityChanged.get_item_visible", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemVisibilityChanged.get_item_visible", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SceneItemVisibilityChanged.get_scene_name", "modulename": "twitch_bot.obs.obs_events", "qualname": "SceneItemVisibilityChanged.get_scene_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.ScenesChanged", "modulename": "twitch_bot.obs.obs_events", "qualname": "ScenesChanged", "kind": "class", "doc": "<p>Note: This event is not fired when the scenes are reordered.</p>\n\n<p>Returns:\n    scenes (list): Scenes list.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.ScenesChanged.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "ScenesChanged.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.ScenesChanged.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "ScenesChanged.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.ScenesChanged.get_scenes", "modulename": "twitch_bot.obs.obs_events", "qualname": "ScenesChanged.get_scenes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceAudioActivated", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceAudioActivated", "kind": "class", "doc": "<p>A source has added audio.</p>\n\n<p>Returns:\n    sourceName (str): Source name</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SourceAudioActivated.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceAudioActivated.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SourceAudioActivated.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceAudioActivated.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceAudioActivated.get_sourceName", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceAudioActivated.get_sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceAudioDeactivated", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceAudioDeactivated", "kind": "class", "doc": "<p>A source has removed audio.</p>\n\n<p>Returns:\n    sourceName (str): Source name</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SourceAudioDeactivated.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceAudioDeactivated.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SourceAudioDeactivated.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceAudioDeactivated.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceAudioDeactivated.get_sourceName", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceAudioDeactivated.get_sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceAudioMixersChanged", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceAudioMixersChanged", "kind": "class", "doc": "<p>Audio mixer routing changed on a source.</p>\n\n<p>Returns:\n    hexMixersValue (str): Raw mixer flags (little-endian, one bit per mixer) as an hexadecimal value\n    mixers (list): Routing status of the source for each audio mixer (array of 6 values)\n    mixers.<em>.enabled (bool): Routing status\n    mixers.</em>.id (int): Mixer number\n    sourceName (str): Source name</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SourceAudioMixersChanged.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceAudioMixersChanged.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SourceAudioMixersChanged.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceAudioMixersChanged.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceAudioMixersChanged.get_hexMixersValue", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceAudioMixersChanged.get_hexMixersValue", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceAudioMixersChanged.get_mixers", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceAudioMixersChanged.get_mixers", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceAudioMixersChanged.get_mixers___enabled", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceAudioMixersChanged.get_mixers___enabled", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceAudioMixersChanged.get_mixers___id", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceAudioMixersChanged.get_mixers___id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceAudioMixersChanged.get_sourceName", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceAudioMixersChanged.get_sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceAudioSyncOffsetChanged", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceAudioSyncOffsetChanged", "kind": "class", "doc": "<p>The audio sync offset of a source has changed.</p>\n\n<p>Returns:\n    sourceName (str): Source name\n    syncOffset (int): Audio sync offset of the source (in nanoseconds)</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SourceAudioSyncOffsetChanged.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceAudioSyncOffsetChanged.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SourceAudioSyncOffsetChanged.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceAudioSyncOffsetChanged.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceAudioSyncOffsetChanged.get_sourceName", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceAudioSyncOffsetChanged.get_sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceAudioSyncOffsetChanged.get_syncOffset", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceAudioSyncOffsetChanged.get_syncOffset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceCreated", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceCreated", "kind": "class", "doc": "<p>A source has been created. A source can be an input, a scene or a transition.</p>\n\n<p>Returns:\n    sourceKind (str): Source kind.\n    sourceName (str): Source name\n    sourceSettings (object): Source settings\n    sourceType (str): Source type. Can be \"input\", \"scene\", \"transition\" or \"filter\".</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SourceCreated.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceCreated.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SourceCreated.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceCreated.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceCreated.get_sourceKind", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceCreated.get_sourceKind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceCreated.get_sourceName", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceCreated.get_sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceCreated.get_sourceSettings", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceCreated.get_sourceSettings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceCreated.get_sourceType", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceCreated.get_sourceType", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceDestroyed", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceDestroyed", "kind": "class", "doc": "<p>A source has been destroyed/removed. A source can be an input, a scene or a transition.</p>\n\n<p>Returns:\n    sourceKind (str): Source kind.\n    sourceName (str): Source name\n    sourceType (str): Source type. Can be \"input\", \"scene\", \"transition\" or \"filter\".</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SourceDestroyed.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceDestroyed.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SourceDestroyed.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceDestroyed.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceDestroyed.get_sourceKind", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceDestroyed.get_sourceKind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceDestroyed.get_sourceName", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceDestroyed.get_sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceDestroyed.get_sourceType", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceDestroyed.get_sourceType", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceFilterAdded", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFilterAdded", "kind": "class", "doc": "<p>A filter was added to a source.</p>\n\n<p>Returns:\n    filterName (str): Filter name\n    filterSettings (object): Filter settings\n    filterType (str): Filter type\n    sourceName (str): Source name</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SourceFilterAdded.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFilterAdded.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SourceFilterAdded.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFilterAdded.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceFilterAdded.get_filterName", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFilterAdded.get_filterName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceFilterAdded.get_filterSettings", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFilterAdded.get_filterSettings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceFilterAdded.get_filterType", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFilterAdded.get_filterType", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceFilterAdded.get_sourceName", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFilterAdded.get_sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceFilterRemoved", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFilterRemoved", "kind": "class", "doc": "<p>A filter was removed from a source.</p>\n\n<p>Returns:\n    filterName (str): Filter name\n    filterType (str): Filter type\n    sourceName (str): Source name</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SourceFilterRemoved.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFilterRemoved.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SourceFilterRemoved.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFilterRemoved.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceFilterRemoved.get_filterName", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFilterRemoved.get_filterName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceFilterRemoved.get_filterType", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFilterRemoved.get_filterType", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceFilterRemoved.get_sourceName", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFilterRemoved.get_sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceFilterVisibilityChanged", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFilterVisibilityChanged", "kind": "class", "doc": "<p>The visibility/enabled state of a filter changed</p>\n\n<p>Returns:\n    filterEnabled (bool): New filter state\n    filterName (str): Filter name\n    sourceName (str): Source name</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SourceFilterVisibilityChanged.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFilterVisibilityChanged.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SourceFilterVisibilityChanged.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFilterVisibilityChanged.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceFilterVisibilityChanged.get_filterEnabled", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFilterVisibilityChanged.get_filterEnabled", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceFilterVisibilityChanged.get_filterName", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFilterVisibilityChanged.get_filterName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceFilterVisibilityChanged.get_sourceName", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFilterVisibilityChanged.get_sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceFiltersReordered", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFiltersReordered", "kind": "class", "doc": "<p>Filters in a source have been reordered.</p>\n\n<p>Returns:\n    filters (list): Ordered Filters list\n    filters.<em>.enabled (bool): Filter visibility status\n    filters.</em>.name (str): Filter name\n    filters.*.type (str): Filter type\n    sourceName (str): Source name</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SourceFiltersReordered.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFiltersReordered.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SourceFiltersReordered.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFiltersReordered.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceFiltersReordered.get_filters", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFiltersReordered.get_filters", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceFiltersReordered.get_filters___enabled", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFiltersReordered.get_filters___enabled", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceFiltersReordered.get_filters___name", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFiltersReordered.get_filters___name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceFiltersReordered.get_filters___type", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFiltersReordered.get_filters___type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceFiltersReordered.get_sourceName", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceFiltersReordered.get_sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceMuteStateChanged", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceMuteStateChanged", "kind": "class", "doc": "<p>A source has been muted or unmuted.</p>\n\n<p>Returns:\n    muted (bool): Mute status of the source\n    sourceName (str): Source name</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SourceMuteStateChanged.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceMuteStateChanged.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SourceMuteStateChanged.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceMuteStateChanged.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceMuteStateChanged.get_muted", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceMuteStateChanged.get_muted", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceMuteStateChanged.get_sourceName", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceMuteStateChanged.get_sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceOrderChanged", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceOrderChanged", "kind": "class", "doc": "<p>Scene items within a scene have been reordered.</p>\n\n<p>Returns:\n    scene-items (list): Ordered list of scene items\n    scene-items.<em>.item-id (int): Scene item unique ID\n    scene-items.</em>.source-name (str): Item source name\n    scene-name (str): Name of the scene where items have been reordered.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SourceOrderChanged.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceOrderChanged.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SourceOrderChanged.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceOrderChanged.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceOrderChanged.get_scene_items", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceOrderChanged.get_scene_items", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceOrderChanged.get_scene_items___item_id", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceOrderChanged.get_scene_items___item_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceOrderChanged.get_scene_items___source_name", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceOrderChanged.get_scene_items___source_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceOrderChanged.get_scene_name", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceOrderChanged.get_scene_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceRenamed", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceRenamed", "kind": "class", "doc": "<p>A source has been renamed.</p>\n\n<p>Returns:\n    newName (str): New source name\n    previousName (str): Previous source name\n    sourceType (str): Type of source (input, scene, filter, transition)</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SourceRenamed.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceRenamed.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SourceRenamed.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceRenamed.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceRenamed.get_newName", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceRenamed.get_newName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceRenamed.get_previousName", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceRenamed.get_previousName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceRenamed.get_sourceType", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceRenamed.get_sourceType", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceVolumeChanged", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceVolumeChanged", "kind": "class", "doc": "<p>The volume of a source has changed.</p>\n\n<p>Returns:\n    sourceName (str): Source name\n    volume (float): Source volume\n    volumeDb (float): Source volume in Decibel</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SourceVolumeChanged.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceVolumeChanged.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SourceVolumeChanged.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceVolumeChanged.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceVolumeChanged.get_sourceName", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceVolumeChanged.get_sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceVolumeChanged.get_volume", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceVolumeChanged.get_volume", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SourceVolumeChanged.get_volumeDb", "modulename": "twitch_bot.obs.obs_events", "qualname": "SourceVolumeChanged.get_volumeDb", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStarted", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStarted", "kind": "class", "doc": "<p>Streaming started successfully.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.StreamStarted.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStarted.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.StreamStarted.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStarted.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStarting", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStarting", "kind": "class", "doc": "<p>A request to start streaming has been issued.</p>\n\n<p>Returns:\n    preview-only (bool): Always false (retrocompatibility).</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.StreamStarting.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStarting.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.StreamStarting.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStarting.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStarting.get_preview_only", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStarting.get_preview_only", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStatus", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStatus", "kind": "class", "doc": "<p>Emitted every 2 seconds when stream is active.</p>\n\n<p>Returns:\n    average-frame-time (int): Average frame time (in milliseconds)\n    bytes-per-sec (int): Amount of data per second (in bytes) transmitted by the stream encoder.\n    cpu-usage (int): Current CPU usage (percentage)\n    fps (int): Current framerate.\n    free-disk-space (int): Free recording disk space (in megabytes)\n    kbits-per-sec (int): Amount of data per second (in kilobits) transmitted by the stream encoder.\n    memory-usage (int): Current RAM usage (in megabytes)\n    num-dropped-frames (int): Number of frames dropped by the encoder since the stream started.\n    num-total-frames (int): Total number of frames transmitted since the stream started.\n    output-skipped-frames (int): Number of frames skipped due to encoding lag\n    output-total-frames (int): Number of frames outputted\n    preview-only (bool): Always false (retrocompatibility).\n    recording (bool): Current recording state.\n    render-missed-frames (int): Number of frames missed due to rendering lag\n    render-total-frames (int): Number of frames rendered\n    replay-buffer-active (bool): Replay Buffer status\n    strain (int): Percentage of dropped frames.\n    streaming (bool): Current streaming state.\n    total-stream-time (int): Total time (in seconds) since the stream started.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.StreamStatus.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStatus.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.StreamStatus.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStatus.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStatus.get_average_frame_time", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStatus.get_average_frame_time", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStatus.get_bytes_per_sec", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStatus.get_bytes_per_sec", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStatus.get_cpu_usage", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStatus.get_cpu_usage", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStatus.get_fps", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStatus.get_fps", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStatus.get_free_disk_space", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStatus.get_free_disk_space", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStatus.get_kbits_per_sec", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStatus.get_kbits_per_sec", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStatus.get_memory_usage", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStatus.get_memory_usage", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStatus.get_num_dropped_frames", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStatus.get_num_dropped_frames", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStatus.get_num_total_frames", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStatus.get_num_total_frames", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStatus.get_output_skipped_frames", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStatus.get_output_skipped_frames", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStatus.get_output_total_frames", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStatus.get_output_total_frames", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStatus.get_preview_only", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStatus.get_preview_only", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStatus.get_recording", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStatus.get_recording", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStatus.get_render_missed_frames", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStatus.get_render_missed_frames", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStatus.get_render_total_frames", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStatus.get_render_total_frames", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStatus.get_replay_buffer_active", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStatus.get_replay_buffer_active", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStatus.get_strain", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStatus.get_strain", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStatus.get_streaming", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStatus.get_streaming", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStatus.get_total_stream_time", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStatus.get_total_stream_time", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStopped", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStopped", "kind": "class", "doc": "<p>Streaming stopped successfully.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.StreamStopped.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStopped.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.StreamStopped.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStopped.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStopping", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStopping", "kind": "class", "doc": "<p>A request to stop streaming has been issued.</p>\n\n<p>Returns:\n    preview-only (bool): Always false (retrocompatibility).</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.StreamStopping.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStopping.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.StreamStopping.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStopping.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StreamStopping.get_preview_only", "modulename": "twitch_bot.obs.obs_events", "qualname": "StreamStopping.get_preview_only", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StudioModeSwitched", "modulename": "twitch_bot.obs.obs_events", "qualname": "StudioModeSwitched", "kind": "class", "doc": "<p>Studio Mode has been enabled or disabled.</p>\n\n<p>Returns:\n    new-state (bool): The new enabled state of Studio Mode.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.StudioModeSwitched.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "StudioModeSwitched.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.StudioModeSwitched.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "StudioModeSwitched.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.StudioModeSwitched.get_new_state", "modulename": "twitch_bot.obs.obs_events", "qualname": "StudioModeSwitched.get_new_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SwitchScenes", "modulename": "twitch_bot.obs.obs_events", "qualname": "SwitchScenes", "kind": "class", "doc": "<p>Indicates a scene change.</p>\n\n<p>Returns:\n    scene-name (str): The new scene.\n    sources (list): List of scene items in the new scene. Same specification as <a href=\"#getcurrentscene\"><code>GetCurrentScene</code></a>.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SwitchScenes.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SwitchScenes.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SwitchScenes.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SwitchScenes.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SwitchScenes.get_scene_name", "modulename": "twitch_bot.obs.obs_events", "qualname": "SwitchScenes.get_scene_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SwitchScenes.get_sources", "modulename": "twitch_bot.obs.obs_events", "qualname": "SwitchScenes.get_sources", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SwitchTransition", "modulename": "twitch_bot.obs.obs_events", "qualname": "SwitchTransition", "kind": "class", "doc": "<p>The active transition has been changed.</p>\n\n<p>Returns:\n    transition-name (str): The name of the new active transition.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.SwitchTransition.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "SwitchTransition.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.SwitchTransition.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "SwitchTransition.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.SwitchTransition.get_transition_name", "modulename": "twitch_bot.obs.obs_events", "qualname": "SwitchTransition.get_transition_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.TransitionBegin", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionBegin", "kind": "class", "doc": "<p>A transition (other than \"cut\") has begun.</p>\n\n<p>Returns:\n    duration (int): Transition duration (in milliseconds). Will be -1 for any transition with a fixed duration, such as a Stinger, due to limitations of the OBS API.\n    from-scene (str): Source scene of the transition\n    name (str): Transition name.\n    to-scene (str): Destination scene of the transition\n    type (str): Transition type.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.TransitionBegin.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionBegin.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.TransitionBegin.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionBegin.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.TransitionBegin.get_duration", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionBegin.get_duration", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.TransitionBegin.get_from_scene", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionBegin.get_from_scene", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.TransitionBegin.get_name", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionBegin.get_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.TransitionBegin.get_to_scene", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionBegin.get_to_scene", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.TransitionBegin.get_type", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionBegin.get_type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.TransitionDurationChanged", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionDurationChanged", "kind": "class", "doc": "<p>The active transition duration has been changed.</p>\n\n<p>Returns:\n    new-duration (int): New transition duration.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.TransitionDurationChanged.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionDurationChanged.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.TransitionDurationChanged.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionDurationChanged.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.TransitionDurationChanged.get_new_duration", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionDurationChanged.get_new_duration", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.TransitionEnd", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionEnd", "kind": "class", "doc": "<p>A transition (other than \"cut\") has ended.\nNote: The <code>from-scene</code> field is not available in TransitionEnd.</p>\n\n<pre><code>Returns:\n    duration (int): Transition duration (in milliseconds).\n    name (str): Transition name.\n    to-scene (str): Destination scene of the transition\n    type (str): Transition type.\n</code></pre>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.TransitionEnd.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionEnd.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.TransitionEnd.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionEnd.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.TransitionEnd.get_duration", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionEnd.get_duration", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.TransitionEnd.get_name", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionEnd.get_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.TransitionEnd.get_to_scene", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionEnd.get_to_scene", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.TransitionEnd.get_type", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionEnd.get_type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.TransitionListChanged", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionListChanged", "kind": "class", "doc": "<p>The list of available transitions has been modified.\nTransitions have been added, removed, or renamed.</p>\n\n<pre><code>Returns:\n    transitions (list): Transitions list.\n    transitions.*.name (str): Transition name.\n</code></pre>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.TransitionListChanged.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionListChanged.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.TransitionListChanged.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionListChanged.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.TransitionListChanged.get_transitions", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionListChanged.get_transitions", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.TransitionListChanged.get_transitions___name", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionListChanged.get_transitions___name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.TransitionVideoEnd", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionVideoEnd", "kind": "class", "doc": "<p>A stinger transition has finished playing its video.</p>\n\n<p>Returns:\n    duration (int): Transition duration (in milliseconds).\n    from-scene (str): Source scene of the transition\n    name (str): Transition name.\n    to-scene (str): Destination scene of the transition\n    type (str): Transition type.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.TransitionVideoEnd.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionVideoEnd.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.TransitionVideoEnd.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionVideoEnd.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.TransitionVideoEnd.get_duration", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionVideoEnd.get_duration", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.TransitionVideoEnd.get_from_scene", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionVideoEnd.get_from_scene", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.TransitionVideoEnd.get_name", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionVideoEnd.get_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.TransitionVideoEnd.get_to_scene", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionVideoEnd.get_to_scene", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.TransitionVideoEnd.get_type", "modulename": "twitch_bot.obs.obs_events", "qualname": "TransitionVideoEnd.get_type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.VirtualCamStarted", "modulename": "twitch_bot.obs.obs_events", "qualname": "VirtualCamStarted", "kind": "class", "doc": "<p>Virtual cam started successfully.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.VirtualCamStarted.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "VirtualCamStarted.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.VirtualCamStarted.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "VirtualCamStarted.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_events.VirtualCamStopped", "modulename": "twitch_bot.obs.obs_events", "qualname": "VirtualCamStopped", "kind": "class", "doc": "<p>Virtual cam stopped successfully.</p>\n", "bases": "obs.obs_base_classes.BaseEvents"}, {"fullname": "twitch_bot.obs.obs_events.VirtualCamStopped.__init__", "modulename": "twitch_bot.obs.obs_events", "qualname": "VirtualCamStopped.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_events.VirtualCamStopped.init", "modulename": "twitch_bot.obs.obs_events", "qualname": "VirtualCamStopped.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests", "modulename": "twitch_bot.obs.obs_requests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "twitch_bot.obs.obs_requests.AddFilterToSource", "modulename": "twitch_bot.obs.obs_requests", "qualname": "AddFilterToSource", "kind": "class", "doc": "<p>Add a new filter to a source. Available source types along with their settings properties are available from <code>GetSourceTypesList</code>.</p>\n\n<p>Args:\n    filterName (str): Name of the new filter\n    filterSettings (object): Filter settings\n    filterType (str): Filter type\n    sourceName (str): Name of the source on which the filter is added</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.AddFilterToSource.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "AddFilterToSource.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.AddFilterToSource.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "AddFilterToSource.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">filterName</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filterSettings</span><span class=\"p\">:</span> <span class=\"nb\">object</span>,</span><span class=\"param\">\t<span class=\"n\">filterType</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.AddSceneItem", "modulename": "twitch_bot.obs.obs_requests", "qualname": "AddSceneItem", "kind": "class", "doc": "<p>Creates a scene item in a scene. In other words, this is how you add a source into a scene.</p>\n\n<p>Args:\n    sceneName (str): Name of the scene to create the scene item in\n    sourceName (str): Name of the source to be added\n    setVisible (bool) optional: Whether to make the sceneitem visible on creation or not. Default <code>true</code></p>\n\n<p>Returns:\n    itemId (int): Numerical ID of the created scene item</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.AddSceneItem.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "AddSceneItem.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.AddSceneItem.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "AddSceneItem.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sceneName</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">setVisible</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.AddSceneItem.get_itemId", "modulename": "twitch_bot.obs.obs_requests", "qualname": "AddSceneItem.get_itemId", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.Authenticate", "modulename": "twitch_bot.obs.obs_requests", "qualname": "Authenticate", "kind": "class", "doc": "<p>Attempt to authenticate the client to the server.</p>\n\n<p>Args:\n    auth (str): Response to the auth challenge (see \"Authentication\" for more information).</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.Authenticate.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "Authenticate.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.Authenticate.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "Authenticate.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">auth</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.BroadcastCustomMessage", "modulename": "twitch_bot.obs.obs_requests", "qualname": "BroadcastCustomMessage", "kind": "class", "doc": "<p>Broadcast custom message to all connected WebSocket clients</p>\n\n<p>Args:\n    data (object): User-defined data\n    realm (str): Identifier to be choosen by the client</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.BroadcastCustomMessage.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "BroadcastCustomMessage.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.BroadcastCustomMessage.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "BroadcastCustomMessage.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">object</span>, </span><span class=\"param\"><span class=\"n\">realm</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.CreateScene", "modulename": "twitch_bot.obs.obs_requests", "qualname": "CreateScene", "kind": "class", "doc": "<p>Create a new scene scene.</p>\n\n<p>Args:\n    sceneName (str): Name of the scene to create.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.CreateScene.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "CreateScene.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.CreateScene.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "CreateScene.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sceneName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.CreateSource", "modulename": "twitch_bot.obs.obs_requests", "qualname": "CreateSource", "kind": "class", "doc": "<p>Create a source and add it as a sceneitem to a scene.</p>\n\n<p>Args:\n    sceneName (str): Scene to add the new source to.\n    sourceKind (str): Source kind, Eg. <code>vlc_source</code>.\n    sourceName (str): Source name.\n    setVisible (bool) optional: Set the created SceneItem as visible or not. Defaults to true\n    sourceSettings (object) optional: Source settings data.</p>\n\n<p>Returns:\n    itemId (int): ID of the SceneItem in the scene.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.CreateSource.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "CreateSource.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.CreateSource.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "CreateSource.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sceneName</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sourceKind</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">setVisible</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sourceSettings</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">object</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.CreateSource.get_itemId", "modulename": "twitch_bot.obs.obs_requests", "qualname": "CreateSource.get_itemId", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.DeleteSceneItem", "modulename": "twitch_bot.obs.obs_requests", "qualname": "DeleteSceneItem", "kind": "class", "doc": "<p>Deletes a scene item.</p>\n\n<p>Args:\n    item (object): Scene item to delete (required)\n    item.id (int): Scene Item ID.\n    item.name (str): Scene Item name (prefer <code>id</code>, including both is acceptable).\n    scene (str) optional: Name of the scene the scene item belongs to. Defaults to the current scene.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.DeleteSceneItem.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "DeleteSceneItem.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.DeleteSceneItem.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "DeleteSceneItem.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">object</span>,</span><span class=\"param\">\t<span class=\"n\">item_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">item_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">scene</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.DisableStudioMode", "modulename": "twitch_bot.obs.obs_requests", "qualname": "DisableStudioMode", "kind": "class", "doc": "<p>Disables Studio Mode.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.DisableStudioMode.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "DisableStudioMode.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.DisableStudioMode.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "DisableStudioMode.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.DuplicateSceneItem", "modulename": "twitch_bot.obs.obs_requests", "qualname": "DuplicateSceneItem", "kind": "class", "doc": "<p>Duplicates a scene item.</p>\n\n<p>Args:\n    item (object): Scene Item to duplicate from the source scene (required)\n    item.id (int): Scene Item ID.\n    item.name (str): Scene Item name (prefer <code>id</code>, including both is acceptable).\n    fromScene (str) optional: Name of the scene to copy the item from. Defaults to the current scene.\n    toScene (str) optional: Name of the scene to create the item in. Defaults to the current scene.</p>\n\n<p>Returns:\n    item (object): New item info\n    item.id (int): New item ID\n    item.name (str): New item name\n    scene (str): Name of the scene where the new item was created</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.DuplicateSceneItem.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "DuplicateSceneItem.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.DuplicateSceneItem.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "DuplicateSceneItem.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">object</span>,</span><span class=\"param\">\t<span class=\"n\">item_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">item_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">fromScene</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">toScene</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.DuplicateSceneItem.get_item", "modulename": "twitch_bot.obs.obs_requests", "qualname": "DuplicateSceneItem.get_item", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.DuplicateSceneItem.get_item_id", "modulename": "twitch_bot.obs.obs_requests", "qualname": "DuplicateSceneItem.get_item_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.DuplicateSceneItem.get_item_name", "modulename": "twitch_bot.obs.obs_requests", "qualname": "DuplicateSceneItem.get_item_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.DuplicateSceneItem.get_scene", "modulename": "twitch_bot.obs.obs_requests", "qualname": "DuplicateSceneItem.get_scene", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.EnableStudioMode", "modulename": "twitch_bot.obs.obs_requests", "qualname": "EnableStudioMode", "kind": "class", "doc": "<p>Enables Studio Mode.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.EnableStudioMode.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "EnableStudioMode.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.EnableStudioMode.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "EnableStudioMode.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.ExecuteBatch", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ExecuteBatch", "kind": "class", "doc": "<p>Executes a list of requests sequentially (one-by-one on the same thread).</p>\n\n<p>Args:\n    abortOnFail (bool): Stop processing batch requests if one returns a failure.\n    requests (list): Array of requests to perform. Executed in order.\n    requests.<em>.message-id (str): ID of the individual request. Can be any string and not required to be unique. Defaults to empty string if not specified.\n    requests.</em>.request-type (str): Request type. Eg. <code>GetVersion</code>.</p>\n\n<p>Returns:\n    results (list): Batch requests results, ordered sequentially.\n    results.<em>.error (str): Error message accompanying an <code>error</code> status.\n    results.</em>.message-id (str): ID of the individual request which was originally provided by the client.\n    results.*.status (str): Status response as string. Either <code>ok</code> or <code>error</code>.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.ExecuteBatch.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ExecuteBatch.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.ExecuteBatch.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ExecuteBatch.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">abortOnFail</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">requests</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">requests___message_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">requests___request_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.ExecuteBatch.get_results", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ExecuteBatch.get_results", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.ExecuteBatch.get_results___error", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ExecuteBatch.get_results___error", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.ExecuteBatch.get_results___message_id", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ExecuteBatch.get_results___message_id", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.ExecuteBatch.get_results___status", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ExecuteBatch.get_results___status", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetAudioActive", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetAudioActive", "kind": "class", "doc": "<p>Get the audio's active status of a specified source.</p>\n\n<p>Args:\n    sourceName (str): Source name.</p>\n\n<p>Returns:\n    audioActive (bool): Audio active status of the source.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetAudioActive.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetAudioActive.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetAudioActive.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetAudioActive.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetAudioActive.get_audioActive", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetAudioActive.get_audioActive", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetAudioMonitorType", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetAudioMonitorType", "kind": "class", "doc": "<p>Get the audio monitoring type of the specified source.</p>\n\n<p>Args:\n    sourceName (str): Source name.</p>\n\n<p>Returns:\n    monitorType (str): The monitor type in use. Options: <code>none</code>, <code>monitorOnly</code>, <code>monitorAndOutput</code>.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetAudioMonitorType.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetAudioMonitorType.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetAudioMonitorType.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetAudioMonitorType.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetAudioMonitorType.get_monitorType", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetAudioMonitorType.get_monitorType", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetAudioTracks", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetAudioTracks", "kind": "class", "doc": "<p>Gets whether an audio track is active for a source.</p>\n\n<p>Args:\n    sourceName (str): Source name.</p>\n\n<p>Returns:\n    track1 (bool):\n    track2 (bool):\n    track3 (bool):\n    track4 (bool):\n    track5 (bool):\n    track6 (bool):</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetAudioTracks.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetAudioTracks.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetAudioTracks.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetAudioTracks.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetAudioTracks.get_track1", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetAudioTracks.get_track1", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetAudioTracks.get_track2", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetAudioTracks.get_track2", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetAudioTracks.get_track3", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetAudioTracks.get_track3", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetAudioTracks.get_track4", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetAudioTracks.get_track4", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetAudioTracks.get_track5", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetAudioTracks.get_track5", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetAudioTracks.get_track6", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetAudioTracks.get_track6", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetAuthRequired", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetAuthRequired", "kind": "class", "doc": "<p>Tells the client if authentication is required. If so, returns authentication parameters <code>challenge</code>\nand <code>salt</code> (see \"Authentication\" for more information).</p>\n\n<pre><code>Returns:\n    authRequired (bool): Indicates whether authentication is required.\n    challenge (str):\n    salt (str):\n</code></pre>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetAuthRequired.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetAuthRequired.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetAuthRequired.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetAuthRequired.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetAuthRequired.get_authRequired", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetAuthRequired.get_authRequired", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetAuthRequired.get_challenge", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetAuthRequired.get_challenge", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetAuthRequired.get_salt", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetAuthRequired.get_salt", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetBrowserSourceProperties", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetBrowserSourceProperties", "kind": "class", "doc": "<p>Get current properties for a Browser Source.</p>\n\n<p>Args:\n    source (str): Source name.</p>\n\n<p>Returns:\n    css (str): CSS to inject.\n    fps (int): Framerate.\n    height (int): Height.\n    is_local_file (bool): Indicates that a local file is in use.\n    local_file (str): file path.\n    shutdown (bool): Indicates whether the source should be shutdown when not visible.\n    source (str): Source name.\n    url (str): Url.\n    width (int): Width.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetBrowserSourceProperties.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetBrowserSourceProperties.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetBrowserSourceProperties.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetBrowserSourceProperties.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetBrowserSourceProperties.get_css", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetBrowserSourceProperties.get_css", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetBrowserSourceProperties.get_fps", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetBrowserSourceProperties.get_fps", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetBrowserSourceProperties.get_height", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetBrowserSourceProperties.get_height", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetBrowserSourceProperties.get_is_local_file", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetBrowserSourceProperties.get_is_local_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetBrowserSourceProperties.get_local_file", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetBrowserSourceProperties.get_local_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetBrowserSourceProperties.get_shutdown", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetBrowserSourceProperties.get_shutdown", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetBrowserSourceProperties.get_source", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetBrowserSourceProperties.get_source", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetBrowserSourceProperties.get_url", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetBrowserSourceProperties.get_url", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetBrowserSourceProperties.get_width", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetBrowserSourceProperties.get_width", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetCurrentProfile", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetCurrentProfile", "kind": "class", "doc": "<p>Get the name of the current profile.</p>\n\n<p>Returns:\n    profile-name (str): Name of the currently active profile.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetCurrentProfile.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetCurrentProfile.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetCurrentProfile.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetCurrentProfile.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetCurrentProfile.get_profile_name", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetCurrentProfile.get_profile_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetCurrentScene", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetCurrentScene", "kind": "class", "doc": "<p>Get the current scene's name and source items.</p>\n\n<p>Returns:\n    name (str): Name of the currently active scene.\n    sources (list): Ordered list of the current scene's source items.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetCurrentScene.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetCurrentScene.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetCurrentScene.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetCurrentScene.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetCurrentScene.get_name", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetCurrentScene.get_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetCurrentScene.get_sources", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetCurrentScene.get_sources", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetCurrentSceneCollection", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetCurrentSceneCollection", "kind": "class", "doc": "<p>Get the name of the current scene collection.</p>\n\n<p>Returns:\n    sc-name (str): Name of the currently active scene collection.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetCurrentSceneCollection.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetCurrentSceneCollection.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetCurrentSceneCollection.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetCurrentSceneCollection.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetCurrentSceneCollection.get_sc_name", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetCurrentSceneCollection.get_sc_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetCurrentTransition", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetCurrentTransition", "kind": "class", "doc": "<p>Get the name of the currently selected transition in the frontend's dropdown menu.</p>\n\n<p>Returns:\n    duration (int): Transition duration (in milliseconds) if supported by the transition.\n    name (str): Name of the selected transition.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetCurrentTransition.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetCurrentTransition.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetCurrentTransition.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetCurrentTransition.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetCurrentTransition.get_duration", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetCurrentTransition.get_duration", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetCurrentTransition.get_name", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetCurrentTransition.get_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetFilenameFormatting", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetFilenameFormatting", "kind": "class", "doc": "<p>Get the filename formatting string</p>\n\n<p>Returns:\n    filename-formatting (str): Current filename formatting string.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetFilenameFormatting.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetFilenameFormatting.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetFilenameFormatting.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetFilenameFormatting.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetFilenameFormatting.get_filename_formatting", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetFilenameFormatting.get_filename_formatting", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetMediaDuration", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMediaDuration", "kind": "class", "doc": "<p>Get the length of media in milliseconds. Supports ffmpeg and vlc media sources (as of OBS v25.0.8)\nNote: For some reason, for the first 5 or so seconds that the media is playing, the total duration can be off by upwards of 50ms.</p>\n\n<pre><code>Args:\n    sourceName (str): Source name.\n\nReturns:\n    mediaDuration (int): The total length of media in milliseconds..\n</code></pre>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetMediaDuration.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMediaDuration.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetMediaDuration.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMediaDuration.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetMediaDuration.get_mediaDuration", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMediaDuration.get_mediaDuration", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetMediaSourcesList", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMediaSourcesList", "kind": "class", "doc": "<p>List the media state of all media sources (vlc and media source)</p>\n\n<p>Returns:\n    mediaSources (list): Array of sources\n    mediaSources.<em>.mediaState (str): The current state of media for that source. States: <code>none</code>, <code>playing</code>, <code>opening</code>, <code>buffering</code>, <code>paused</code>, <code>stopped</code>, <code>ended</code>, <code>error</code>, <code>unknown</code>\n    mediaSources.</em>.sourceKind (str): Unique source internal type (a.k.a <code>ffmpeg_source</code> or <code>vlc_source</code>)\n    mediaSources.*.sourceName (str): Unique source name</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetMediaSourcesList.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMediaSourcesList.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetMediaSourcesList.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMediaSourcesList.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetMediaSourcesList.get_mediaSources", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMediaSourcesList.get_mediaSources", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetMediaSourcesList.get_mediaSources___mediaState", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMediaSourcesList.get_mediaSources___mediaState", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetMediaSourcesList.get_mediaSources___sourceKind", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMediaSourcesList.get_mediaSources___sourceKind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetMediaSourcesList.get_mediaSources___sourceName", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMediaSourcesList.get_mediaSources___sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetMediaState", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMediaState", "kind": "class", "doc": "<p>Get the current playing state of a media source. Supports ffmpeg and vlc media sources (as of OBS v25.0.8)</p>\n\n<p>Args:\n    sourceName (str): Source name.</p>\n\n<p>Returns:\n    mediaState (str): The media state of the provided source. States: <code>none</code>, <code>playing</code>, <code>opening</code>, <code>buffering</code>, <code>paused</code>, <code>stopped</code>, <code>ended</code>, <code>error</code>, <code>unknown</code></p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetMediaState.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMediaState.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetMediaState.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMediaState.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetMediaState.get_mediaState", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMediaState.get_mediaState", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetMediaTime", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMediaTime", "kind": "class", "doc": "<p>Get the current timestamp of media in milliseconds. Supports ffmpeg and vlc media sources (as of OBS v25.0.8)</p>\n\n<p>Args:\n    sourceName (str): Source name.</p>\n\n<p>Returns:\n    timestamp (int): The time in milliseconds since the start of the media.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetMediaTime.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMediaTime.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetMediaTime.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMediaTime.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetMediaTime.get_timestamp", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMediaTime.get_timestamp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetMute", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMute", "kind": "class", "doc": "<p>Get the mute status of a specified source.</p>\n\n<p>Args:\n    source (str): Source name.</p>\n\n<p>Returns:\n    muted (bool): Mute status of the source.\n    name (str): Source name.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetMute.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMute.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetMute.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMute.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetMute.get_muted", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMute.get_muted", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetMute.get_name", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetMute.get_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetOutputInfo", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetOutputInfo", "kind": "class", "doc": "<p>Get information about a single output</p>\n\n<p>Args:\n    outputName (str): Output name</p>\n\n<p>Returns:\n    outputInfo (Output): Output info</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetOutputInfo.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetOutputInfo.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetOutputInfo.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetOutputInfo.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outputName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetOutputInfo.get_outputInfo", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetOutputInfo.get_outputInfo", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetPreviewScene", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetPreviewScene", "kind": "class", "doc": "<p>Get the name of the currently previewed scene and its list of sources.\nWill return an <code>error</code> if Studio Mode is not enabled.</p>\n\n<pre><code>Returns:\n    name (str): The name of the active preview scene.\n    sources (list):\n</code></pre>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetPreviewScene.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetPreviewScene.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetPreviewScene.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetPreviewScene.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetPreviewScene.get_name", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetPreviewScene.get_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetPreviewScene.get_sources", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetPreviewScene.get_sources", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetRecordingFolder", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetRecordingFolder", "kind": "class", "doc": "<p>Get the path of  the current recording folder.</p>\n\n<p>Returns:\n    rec-folder (str): Path of the recording folder.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetRecordingFolder.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetRecordingFolder.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetRecordingFolder.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetRecordingFolder.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetRecordingFolder.get_rec_folder", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetRecordingFolder.get_rec_folder", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetRecordingStatus", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetRecordingStatus", "kind": "class", "doc": "<p>Get current recording status.</p>\n\n<p>Returns:\n    isRecording (bool): Current recording status.\n    isRecordingPaused (bool): Whether the recording is paused or not.\n    recordTimecode (str): Time elapsed since recording started (only present if currently recording).\n    recordingFilename (str): Absolute path to the recording file (only present if currently recording).</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetRecordingStatus.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetRecordingStatus.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetRecordingStatus.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetRecordingStatus.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetRecordingStatus.get_isRecording", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetRecordingStatus.get_isRecording", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetRecordingStatus.get_isRecordingPaused", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetRecordingStatus.get_isRecordingPaused", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetRecordingStatus.get_recordTimecode", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetRecordingStatus.get_recordTimecode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetRecordingStatus.get_recordingFilename", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetRecordingStatus.get_recordingFilename", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetReplayBufferStatus", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetReplayBufferStatus", "kind": "class", "doc": "<p>Get the status of the OBS replay buffer.</p>\n\n<p>Returns:\n    isReplayBufferActive (bool): Current recording status.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetReplayBufferStatus.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetReplayBufferStatus.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetReplayBufferStatus.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetReplayBufferStatus.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetReplayBufferStatus.get_isReplayBufferActive", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetReplayBufferStatus.get_isReplayBufferActive", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemList", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemList", "kind": "class", "doc": "<p>Get a list of all scene items in a scene.</p>\n\n<p>Args:\n    sceneName (str) optional: Name of the scene to get the list of scene items from. Defaults to the current scene if not specified.</p>\n\n<p>Returns:\n    sceneItems (list): Array of scene items\n    sceneItems.<em>.itemId (int): Unique item id of the source item\n    sceneItems.</em>.sourceKind (str): ID if the scene item's source. For example <code>vlc_source</code> or <code>image_source</code>\n    sceneItems.<em>.sourceName (str): Name of the scene item's source\n    sceneItems.</em>.sourceType (str): Type of the scene item's source. Either <code>input</code>, <code>group</code>, or <code>scene</code>\n    sceneName (str): Name of the requested (or current) scene</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemList.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemList.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemList.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemList.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sceneName</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemList.get_sceneItems", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemList.get_sceneItems", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemList.get_sceneItems___itemId", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemList.get_sceneItems___itemId", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemList.get_sceneItems___sourceKind", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemList.get_sceneItems___sourceKind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemList.get_sceneItems___sourceName", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemList.get_sceneItems___sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemList.get_sceneItems___sourceType", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemList.get_sceneItems___sourceType", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemList.get_sceneName", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemList.get_sceneName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties", "kind": "class", "doc": "<p>Gets the scene specific properties of the specified source item.\nCoordinates are relative to the item's parent (the scene or group it belongs to).</p>\n\n<pre><code>Args:\n    item (str | object): Scene Item name (if this field is a string) or specification (if it is an object).\n    item.id (int) optional: Scene Item ID (if the `item` field is an object)\n    item.name (str) optional: Scene Item name (if the `item` field is an object)\n    scene-name (str) optional: Name of the scene the scene item belongs to. Defaults to the current scene.\n\nReturns:\n    bounds.alignment (int): Alignment of the bounding box.\n    bounds.type (str): Type of bounding box. Can be \"OBS_BOUNDS_STRETCH\", \"OBS_BOUNDS_SCALE_INNER\", \"OBS_BOUNDS_SCALE_OUTER\", \"OBS_BOUNDS_SCALE_TO_WIDTH\", \"OBS_BOUNDS_SCALE_TO_HEIGHT\", \"OBS_BOUNDS_MAX_ONLY\" or \"OBS_BOUNDS_NONE\".\n    bounds.x (int): Width of the bounding box.\n    bounds.y (int): Height of the bounding box.\n    crop.bottom (int): The number of pixels cropped off the bottom of the source before scaling.\n    crop.left (int): The number of pixels cropped off the left of the source before scaling.\n    crop.right (int): The number of pixels cropped off the right of the source before scaling.\n    crop.top (int): The number of pixels cropped off the top of the source before scaling.\n    groupChildren (list): List of children (if this item is a group)\n    height (int): Scene item height (base source height multiplied by the vertical scaling factor)\n    itemId (int): Scene Item ID.\n    locked (bool): If the source's transform is locked.\n    muted (bool): If the source is muted.\n    name (str): Scene Item name.\n    parentGroupName (str): Name of the item's parent (if this item belongs to a group)\n    position.alignment (int): The point on the source that the item is manipulated from. The sum of 1=Left or 2=Right, and 4=Top or 8=Bottom, or omit to center on that axis.\n    position.x (int): The x position of the source from the left.\n    position.y (int): The y position of the source from the top.\n    rotation (int): The clockwise rotation of the item in degrees around the point of alignment.\n    scale.filter (str): The scale filter of the source. Can be \"OBS_SCALE_DISABLE\", \"OBS_SCALE_POINT\", \"OBS_SCALE_BICUBIC\", \"OBS_SCALE_BILINEAR\", \"OBS_SCALE_LANCZOS\" or \"OBS_SCALE_AREA\".\n    scale.x (int): The x-scale factor of the source.\n    scale.y (int): The y-scale factor of the source.\n    sourceHeight (int): Base source (without scaling) of the source\n    sourceWidth (int): Base width (without scaling) of the source\n    visible (bool): If the source is visible.\n    width (int): Scene item width (base source width multiplied by the horizontal scaling factor)\n</code></pre>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">item_id</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">item_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scene_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_bounds_alignment", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_bounds_alignment", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_bounds_type", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_bounds_type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_bounds_x", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_bounds_x", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_bounds_y", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_bounds_y", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_crop_bottom", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_crop_bottom", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_crop_left", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_crop_left", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_crop_right", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_crop_right", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_crop_top", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_crop_top", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_groupChildren", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_groupChildren", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_height", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_height", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_itemId", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_itemId", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_locked", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_locked", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_muted", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_muted", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_name", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_parentGroupName", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_parentGroupName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_position_alignment", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_position_alignment", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_position_x", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_position_x", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_position_y", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_position_y", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_rotation", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_rotation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_scale_filter", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_scale_filter", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_scale_x", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_scale_x", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_scale_y", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_scale_y", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_sourceHeight", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_sourceHeight", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_sourceWidth", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_sourceWidth", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_visible", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_visible", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneItemProperties.get_width", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneItemProperties.get_width", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneList", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneList", "kind": "class", "doc": "<p>Get a list of scenes in the currently active profile.</p>\n\n<p>Returns:\n    current-scene (str): Name of the currently active scene.\n    scenes (list): Ordered list of the current profile's scenes (See <a href=\"#getcurrentscene\">GetCurrentScene</a> for more information).</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneList.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneList.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneList.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneList.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneList.get_current_scene", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneList.get_current_scene", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneList.get_scenes", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneList.get_scenes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneTransitionOverride", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneTransitionOverride", "kind": "class", "doc": "<p>Get the current scene transition override.</p>\n\n<p>Args:\n    sceneName (str): Name of the scene to switch to.</p>\n\n<p>Returns:\n    transitionDuration (int): Transition duration. <code>-1</code> if no override is set.\n    transitionName (str): Name of the current overriding transition. Empty string if no override is set.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneTransitionOverride.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneTransitionOverride.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneTransitionOverride.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneTransitionOverride.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sceneName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneTransitionOverride.get_transitionDuration", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneTransitionOverride.get_transitionDuration", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSceneTransitionOverride.get_transitionName", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSceneTransitionOverride.get_transitionName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceActive", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceActive", "kind": "class", "doc": "<p>Get the source's active status of a specified source (if it is showing in the final mix).</p>\n\n<p>Args:\n    sourceName (str): Source name.</p>\n\n<p>Returns:\n    sourceActive (bool): Source active status of the source.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceActive.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceActive.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceActive.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceActive.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceActive.get_sourceActive", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceActive.get_sourceActive", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceDefaultSettings", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceDefaultSettings", "kind": "class", "doc": "<p>Get the default settings for a given source type.</p>\n\n<p>Args:\n    sourceKind (str): Source kind. Also called \"source id\" in libobs terminology.</p>\n\n<p>Returns:\n    defaultSettings (object): Settings object for source.\n    sourceKind (str): Source kind. Same value as the <code>sourceKind</code> parameter.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceDefaultSettings.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceDefaultSettings.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceDefaultSettings.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceDefaultSettings.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sourceKind</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceDefaultSettings.get_defaultSettings", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceDefaultSettings.get_defaultSettings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceDefaultSettings.get_sourceKind", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceDefaultSettings.get_sourceKind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceFilterInfo", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceFilterInfo", "kind": "class", "doc": "<p>List filters applied to a source</p>\n\n<p>Args:\n    filterName (str): Source filter name\n    sourceName (str): Source name</p>\n\n<p>Returns:\n    enabled (bool): Filter status (enabled or not)\n    name (str): Filter name\n    settings (object): Filter settings\n    type (str): Filter type</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceFilterInfo.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceFilterInfo.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceFilterInfo.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceFilterInfo.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filterName</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceFilterInfo.get_enabled", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceFilterInfo.get_enabled", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceFilterInfo.get_name", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceFilterInfo.get_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceFilterInfo.get_settings", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceFilterInfo.get_settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceFilterInfo.get_type", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceFilterInfo.get_type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceFilters", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceFilters", "kind": "class", "doc": "<p>List filters applied to a source</p>\n\n<p>Args:\n    sourceName (str): Source name</p>\n\n<p>Returns:\n    filters (list): List of filters for the specified source\n    filters.<em>.enabled (bool): Filter status (enabled or not)\n    filters.</em>.name (str): Filter name\n    filters.<em>.settings (object): Filter settings\n    filters.</em>.type (str): Filter type</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceFilters.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceFilters.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceFilters.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceFilters.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceFilters.get_filters", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceFilters.get_filters", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceFilters.get_filters___enabled", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceFilters.get_filters___enabled", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceFilters.get_filters___name", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceFilters.get_filters___name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceFilters.get_filters___settings", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceFilters.get_filters___settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceFilters.get_filters___type", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceFilters.get_filters___type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceSettings", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceSettings", "kind": "class", "doc": "<p>Get settings of the specified source</p>\n\n<p>Args:\n    sourceName (str): Source name.\n    sourceType (str) optional: Type of the specified source. Useful for type-checking if you expect a specific settings schema.</p>\n\n<p>Returns:\n    sourceName (str): Source name\n    sourceSettings (object): Source settings (varies between source types, may require some probing around).\n    sourceType (str): Type of the specified source</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceSettings.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceSettings.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceSettings.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceSettings.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">sourceType</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceSettings.get_sourceName", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceSettings.get_sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceSettings.get_sourceSettings", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceSettings.get_sourceSettings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceSettings.get_sourceType", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceSettings.get_sourceType", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceTypesList", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceTypesList", "kind": "class", "doc": "<p>Get a list of all available sources types</p>\n\n<p>Returns:\n    types (list): Array of source types\n    types.<em>.caps (object): Source type capabilities\n    types.</em>.caps.canInteract (bool): True if interaction with this sources of this type is possible\n    types.<em>.caps.doNotDuplicate (bool): True if sources of this type should not be fully duplicated\n    types.</em>.caps.doNotSelfMonitor (bool): True if sources of this type may cause a feedback loop if it's audio is monitored and shouldn't be\n    types.<em>.caps.hasAudio (bool): True if sources of this type provide audio\n    types.</em>.caps.hasVideo (bool): True if sources of this type provide video\n    types.<em>.caps.isAsync (bool): True if source of this type provide frames asynchronously\n    types.</em>.caps.isComposite (bool): True if sources of this type composite one or more sub-sources\n    types.<em>.defaultSettings (object): Default settings of this source type\n    types.</em>.displayName (str): Display name of the source type\n    types.<em>.type (str): Type. Value is one of the following: \"input\", \"filter\", \"transition\" or \"other\"\n    types.</em>.typeId (str): Non-unique internal source type ID</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceTypesList.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceTypesList.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceTypesList.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceTypesList.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceTypesList.get_types", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceTypesList.get_types", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceTypesList.get_types___caps", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceTypesList.get_types___caps", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceTypesList.get_types___caps_canInteract", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceTypesList.get_types___caps_canInteract", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceTypesList.get_types___caps_doNotDuplicate", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceTypesList.get_types___caps_doNotDuplicate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceTypesList.get_types___caps_doNotSelfMonitor", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceTypesList.get_types___caps_doNotSelfMonitor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceTypesList.get_types___caps_hasAudio", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceTypesList.get_types___caps_hasAudio", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceTypesList.get_types___caps_hasVideo", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceTypesList.get_types___caps_hasVideo", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceTypesList.get_types___caps_isAsync", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceTypesList.get_types___caps_isAsync", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceTypesList.get_types___caps_isComposite", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceTypesList.get_types___caps_isComposite", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceTypesList.get_types___defaultSettings", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceTypesList.get_types___defaultSettings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceTypesList.get_types___displayName", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceTypesList.get_types___displayName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceTypesList.get_types___type", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceTypesList.get_types___type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourceTypesList.get_types___typeId", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourceTypesList.get_types___typeId", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourcesList", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourcesList", "kind": "class", "doc": "<p>List all sources available in the running OBS instance</p>\n\n<p>Returns:\n    sources (list): Array of sources\n    sources.<em>.name (str): Unique source name\n    sources.</em>.type (str): Source type. Value is one of the following: \"input\", \"filter\", \"transition\", \"scene\" or \"unknown\"\n    sources.*.typeId (str): Non-unique source internal type (a.k.a kind)</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourcesList.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourcesList.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourcesList.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourcesList.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourcesList.get_sources", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourcesList.get_sources", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourcesList.get_sources___name", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourcesList.get_sources___name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourcesList.get_sources___type", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourcesList.get_sources___type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSourcesList.get_sources___typeId", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSourcesList.get_sources___typeId", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSpecialSources", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSpecialSources", "kind": "class", "doc": "<p>Get configured special sources like Desktop Audio and Mic/Aux sources.</p>\n\n<p>Returns:\n    desktop-1 (str): Name of the first Desktop Audio capture source.\n    desktop-2 (str): Name of the second Desktop Audio capture source.\n    mic-1 (str): Name of the first Mic/Aux input source.\n    mic-2 (str): Name of the second Mic/Aux input source.\n    mic-3 (str): NAme of the third Mic/Aux input source.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetSpecialSources.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSpecialSources.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetSpecialSources.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSpecialSources.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSpecialSources.get_desktop_1", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSpecialSources.get_desktop_1", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSpecialSources.get_desktop_2", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSpecialSources.get_desktop_2", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSpecialSources.get_mic_1", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSpecialSources.get_mic_1", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSpecialSources.get_mic_2", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSpecialSources.get_mic_2", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSpecialSources.get_mic_3", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSpecialSources.get_mic_3", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetStats", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStats", "kind": "class", "doc": "<p>Get OBS stats (almost the same info as provided in OBS' stats window)</p>\n\n<p>Returns:\n    stats (OBSStats): <a href=\"#obsstats\">OBS stats</a></p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetStats.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStats.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetStats.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStats.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetStats.get_stats", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStats.get_stats", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetStreamSettings", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStreamSettings", "kind": "class", "doc": "<p>Get the current streaming server settings.</p>\n\n<p>Returns:\n    settings (object): Stream settings object.\n    settings.key (str): The publish key of the stream.\n    settings.password (str): The password to use when accessing the streaming server. Only present if <code>use_auth</code> is <code>true</code>.\n    settings.server (str): The publish URL.\n    settings.use_auth (bool): Indicates whether authentication should be used when connecting to the streaming server.\n    settings.username (str): The username to use when accessing the streaming server. Only present if <code>use_auth</code> is <code>true</code>.\n    type (str): The type of streaming service configuration. Possible values: 'rtmp_custom' or 'rtmp_common'.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetStreamSettings.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStreamSettings.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetStreamSettings.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStreamSettings.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetStreamSettings.get_settings", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStreamSettings.get_settings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetStreamSettings.get_settings_key", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStreamSettings.get_settings_key", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetStreamSettings.get_settings_password", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStreamSettings.get_settings_password", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetStreamSettings.get_settings_server", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStreamSettings.get_settings_server", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetStreamSettings.get_settings_use_auth", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStreamSettings.get_settings_use_auth", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetStreamSettings.get_settings_username", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStreamSettings.get_settings_username", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetStreamSettings.get_type", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStreamSettings.get_type", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetStreamingStatus", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStreamingStatus", "kind": "class", "doc": "<p>Get current streaming and recording status.</p>\n\n<p>Returns:\n    preview-only (bool): Always false. Retrocompatibility with OBSRemote.\n    rec-timecode (str): Time elapsed since recording started (only present if currently recording).\n    recording (bool): Current recording status.\n    recording-paused (bool): If recording is paused.\n    stream-timecode (str): Time elapsed since streaming started (only present if currently streaming).\n    streaming (bool): Current streaming status.\n    virtualcam (bool): Current virtual cam status.\n    virtualcam-timecode (str): Time elapsed since virtual cam started (only present if virtual cam currently active).</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetStreamingStatus.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStreamingStatus.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetStreamingStatus.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStreamingStatus.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetStreamingStatus.get_preview_only", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStreamingStatus.get_preview_only", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetStreamingStatus.get_rec_timecode", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStreamingStatus.get_rec_timecode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetStreamingStatus.get_recording", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStreamingStatus.get_recording", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetStreamingStatus.get_recording_paused", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStreamingStatus.get_recording_paused", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetStreamingStatus.get_stream_timecode", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStreamingStatus.get_stream_timecode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetStreamingStatus.get_streaming", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStreamingStatus.get_streaming", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetStreamingStatus.get_virtualcam", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStreamingStatus.get_virtualcam", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetStreamingStatus.get_virtualcam_timecode", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStreamingStatus.get_virtualcam_timecode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetStudioModeStatus", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStudioModeStatus", "kind": "class", "doc": "<p>Indicates if Studio Mode is currently enabled.</p>\n\n<p>Returns:\n    studio-mode (bool): Indicates if Studio Mode is enabled.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetStudioModeStatus.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStudioModeStatus.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetStudioModeStatus.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStudioModeStatus.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetStudioModeStatus.get_studio_mode", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetStudioModeStatus.get_studio_mode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSyncOffset", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSyncOffset", "kind": "class", "doc": "<p>Get the audio sync offset of a specified source.</p>\n\n<p>Args:\n    source (str): Source name.</p>\n\n<p>Returns:\n    name (str): Source name.\n    offset (int): The audio sync offset (in nanoseconds).</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetSyncOffset.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSyncOffset.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetSyncOffset.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSyncOffset.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSyncOffset.get_name", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSyncOffset.get_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetSyncOffset.get_offset", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetSyncOffset.get_offset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextFreetype2Properties", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextFreetype2Properties", "kind": "class", "doc": "<p>Get the current properties of a Text Freetype 2 source.</p>\n\n<p>Args:\n    source (str): Source name.</p>\n\n<p>Returns:\n    color1 (int): Gradient top color.\n    color2 (int): Gradient bottom color.\n    custom_width (int): Custom width (0 to disable).\n    drop_shadow (bool): Drop shadow.\n    font (object): Holds data for the font. Ex: <code>\"font\": { \"face\": \"Arial\", \"flags\": 0, \"size\": 150, \"style\": \"\" }</code>\n    font.face (str): Font face.\n    font.flags (int): Font text styling flag. <code>Bold=1, Italic=2, Bold Italic=3, Underline=5, Strikeout=8</code>\n    font.size (int): Font text size.\n    font.style (str): Font Style (unknown function).\n    from_file (bool): Read text from the specified file.\n    log_mode (bool): Chat log.\n    outline (bool): Outline.\n    source (str): Source name\n    text (str): Text content to be displayed.\n    text_file (str): File path.\n    word_wrap (bool): Word wrap.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextFreetype2Properties.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextFreetype2Properties.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextFreetype2Properties.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextFreetype2Properties.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextFreetype2Properties.get_color1", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextFreetype2Properties.get_color1", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextFreetype2Properties.get_color2", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextFreetype2Properties.get_color2", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextFreetype2Properties.get_custom_width", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextFreetype2Properties.get_custom_width", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextFreetype2Properties.get_drop_shadow", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextFreetype2Properties.get_drop_shadow", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextFreetype2Properties.get_font", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextFreetype2Properties.get_font", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextFreetype2Properties.get_font_face", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextFreetype2Properties.get_font_face", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextFreetype2Properties.get_font_flags", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextFreetype2Properties.get_font_flags", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextFreetype2Properties.get_font_size", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextFreetype2Properties.get_font_size", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextFreetype2Properties.get_font_style", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextFreetype2Properties.get_font_style", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextFreetype2Properties.get_from_file", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextFreetype2Properties.get_from_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextFreetype2Properties.get_log_mode", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextFreetype2Properties.get_log_mode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextFreetype2Properties.get_outline", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextFreetype2Properties.get_outline", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextFreetype2Properties.get_source", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextFreetype2Properties.get_source", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextFreetype2Properties.get_text", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextFreetype2Properties.get_text", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextFreetype2Properties.get_text_file", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextFreetype2Properties.get_text_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextFreetype2Properties.get_word_wrap", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextFreetype2Properties.get_word_wrap", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties", "kind": "class", "doc": "<p>Get the current properties of a Text GDI Plus source.</p>\n\n<p>Args:\n    source (str): Source name.</p>\n\n<p>Returns:\n    align (str): Text Alignment (\"left\", \"center\", \"right\").\n    bk_color (int): Background color.\n    bk_opacity (int): Background opacity (0-100).\n    chatlog (bool): Chat log.\n    chatlog_lines (int): Chat log lines.\n    color (int): Text color.\n    extents (bool): Extents wrap.\n    extents_cx (int): Extents cx.\n    extents_cy (int): Extents cy.\n    file (str): File path name.\n    font (object): Holds data for the font. Ex: <code>\"font\": { \"face\": \"Arial\", \"flags\": 0, \"size\": 150, \"style\": \"\" }</code>\n    font.face (str): Font face.\n    font.flags (int): Font text styling flag. <code>Bold=1, Italic=2, Bold Italic=3, Underline=5, Strikeout=8</code>\n    font.size (int): Font text size.\n    font.style (str): Font Style (unknown function).\n    gradient (bool): Gradient enabled.\n    gradient_color (int): Gradient color.\n    gradient_dir (float): Gradient direction.\n    gradient_opacity (int): Gradient opacity (0-100).\n    outline (bool): Outline.\n    outline_color (int): Outline color.\n    outline_opacity (int): Outline opacity (0-100).\n    outline_size (int): Outline size.\n    read_from_file (bool): Read text from the specified file.\n    source (str): Source name.\n    text (str): Text content to be displayed.\n    valign (str): Text vertical alignment (\"top\", \"center\", \"bottom\").\n    vertical (bool): Vertical text enabled.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_align", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_align", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_bk_color", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_bk_color", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_bk_opacity", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_bk_opacity", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_chatlog", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_chatlog", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_chatlog_lines", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_chatlog_lines", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_color", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_color", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_extents", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_extents", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_extents_cx", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_extents_cx", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_extents_cy", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_extents_cy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_file", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_font", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_font", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_font_face", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_font_face", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_font_flags", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_font_flags", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_font_size", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_font_size", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_font_style", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_font_style", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_gradient", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_gradient", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_gradient_color", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_gradient_color", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_gradient_dir", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_gradient_dir", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_gradient_opacity", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_gradient_opacity", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_outline", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_outline", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_outline_color", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_outline_color", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_outline_opacity", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_outline_opacity", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_outline_size", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_outline_size", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_read_from_file", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_read_from_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_source", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_source", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_text", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_text", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_valign", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_valign", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTextGDIPlusProperties.get_vertical", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTextGDIPlusProperties.get_vertical", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTransitionDuration", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTransitionDuration", "kind": "class", "doc": "<p>Get the duration of the currently selected transition if supported.</p>\n\n<p>Returns:\n    transition-duration (int): Duration of the current transition (in milliseconds).</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetTransitionDuration.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTransitionDuration.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetTransitionDuration.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTransitionDuration.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTransitionDuration.get_transition_duration", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTransitionDuration.get_transition_duration", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTransitionList", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTransitionList", "kind": "class", "doc": "<p>List of all transitions available in the frontend's dropdown menu.</p>\n\n<p>Returns:\n    current-transition (str): Name of the currently active transition.\n    transitions (list): List of transitions.\n    transitions.*.name (str): Name of the transition.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetTransitionList.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTransitionList.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetTransitionList.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTransitionList.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTransitionList.get_current_transition", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTransitionList.get_current_transition", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTransitionList.get_transitions", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTransitionList.get_transitions", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTransitionList.get_transitions___name", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTransitionList.get_transitions___name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTransitionPosition", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTransitionPosition", "kind": "class", "doc": "<p>Get the position of the current transition.</p>\n\n<p>Returns:\n    position (int): current transition position. This value will be between 0.0 and 1.0. Note: Transition returns 1.0 when not active.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetTransitionPosition.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTransitionPosition.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetTransitionPosition.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTransitionPosition.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTransitionPosition.get_position", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTransitionPosition.get_position", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTransitionSettings", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTransitionSettings", "kind": "class", "doc": "<p>Get the current settings of a transition</p>\n\n<p>Args:\n    transitionName (str): Transition name</p>\n\n<p>Returns:\n    transitionSettings (object): Current transition settings</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetTransitionSettings.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTransitionSettings.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetTransitionSettings.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTransitionSettings.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transitionName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetTransitionSettings.get_transitionSettings", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetTransitionSettings.get_transitionSettings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetVersion", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVersion", "kind": "class", "doc": "<p>Returns the latest version of the plugin and the API.</p>\n\n<p>Returns:\n    available-requests (str): List of available request types, formatted as a comma-separated list string (e.g. : \"Method1,Method2,Method3\").\n    obs-studio-version (str): OBS Studio program version.\n    obs-websocket-version (str): obs-websocket plugin version.\n    supported-image-export-formats (str): List of supported formats for features that use image export (like the TakeSourceScreenshot request type) formatted as a comma-separated list string\n    version (int): OBSRemote compatible API version. Fixed to 1.1 for retrocompatibility.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetVersion.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVersion.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetVersion.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVersion.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetVersion.get_available_requests", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVersion.get_available_requests", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetVersion.get_obs_studio_version", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVersion.get_obs_studio_version", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetVersion.get_obs_websocket_version", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVersion.get_obs_websocket_version", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetVersion.get_supported_image_export_formats", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVersion.get_supported_image_export_formats", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetVersion.get_version", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVersion.get_version", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetVideoInfo", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVideoInfo", "kind": "class", "doc": "<p>Get basic OBS video information</p>\n\n<p>Returns:\n    baseHeight (int): Base (canvas) height\n    baseWidth (int): Base (canvas) width\n    colorRange (str): Color range (full or partial)\n    colorSpace (str): Color space for YUV\n    fps (int): Frames rendered per second\n    outputHeight (int): Output height\n    outputWidth (int): Output width\n    scaleType (str): Scaling method used if output size differs from base size\n    videoFormat (str): Video color format</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetVideoInfo.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVideoInfo.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetVideoInfo.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVideoInfo.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetVideoInfo.get_baseHeight", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVideoInfo.get_baseHeight", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetVideoInfo.get_baseWidth", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVideoInfo.get_baseWidth", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetVideoInfo.get_colorRange", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVideoInfo.get_colorRange", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetVideoInfo.get_colorSpace", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVideoInfo.get_colorSpace", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetVideoInfo.get_fps", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVideoInfo.get_fps", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetVideoInfo.get_outputHeight", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVideoInfo.get_outputHeight", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetVideoInfo.get_outputWidth", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVideoInfo.get_outputWidth", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetVideoInfo.get_scaleType", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVideoInfo.get_scaleType", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetVideoInfo.get_videoFormat", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVideoInfo.get_videoFormat", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetVirtualCamStatus", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVirtualCamStatus", "kind": "class", "doc": "<p>Get current virtual cam status.</p>\n\n<p>Returns:\n    isVirtualCam (bool): Current virtual camera status.\n    virtualCamTimecode (str): Time elapsed since virtual cam started (only present if virtual cam currently active).</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetVirtualCamStatus.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVirtualCamStatus.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetVirtualCamStatus.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVirtualCamStatus.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetVirtualCamStatus.get_isVirtualCam", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVirtualCamStatus.get_isVirtualCam", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetVirtualCamStatus.get_virtualCamTimecode", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVirtualCamStatus.get_virtualCamTimecode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetVolume", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVolume", "kind": "class", "doc": "<p>Get the volume of the specified source. Default response uses mul format, NOT SLIDER PERCENTAGE.</p>\n\n<p>Args:\n    source (str): Source name.\n    useDecibel (bool) optional: Output volume in decibels of attenuation instead of amplitude/mul.</p>\n\n<p>Returns:\n    muted (bool): Indicates whether the source is muted.\n    name (str): Source name.\n    volume (int): Volume of the source. Between <code>0.0</code> and <code>20.0</code> if using mul, under <code>26.0</code> if using dB.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.GetVolume.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVolume.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.GetVolume.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVolume.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">useDecibel</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetVolume.get_muted", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVolume.get_muted", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetVolume.get_name", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVolume.get_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.GetVolume.get_volume", "modulename": "twitch_bot.obs.obs_requests", "qualname": "GetVolume.get_volume", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.ListOutputs", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ListOutputs", "kind": "class", "doc": "<p>List existing outputs</p>\n\n<p>Returns:\n    outputs (list): Outputs list</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.ListOutputs.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ListOutputs.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.ListOutputs.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ListOutputs.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.ListOutputs.get_outputs", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ListOutputs.get_outputs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.ListProfiles", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ListProfiles", "kind": "class", "doc": "<p>Get a list of available profiles.</p>\n\n<p>Returns:\n    profiles (list): List of available profiles.\n    profiles.*.profile-name (str): Filter name</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.ListProfiles.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ListProfiles.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.ListProfiles.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ListProfiles.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.ListProfiles.get_profiles", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ListProfiles.get_profiles", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.ListProfiles.get_profiles___profile_name", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ListProfiles.get_profiles___profile_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.ListSceneCollections", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ListSceneCollections", "kind": "class", "doc": "<p>List available scene collections</p>\n\n<p>Returns:\n    scene-collections (list): Scene collections list</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.ListSceneCollections.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ListSceneCollections.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.ListSceneCollections.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ListSceneCollections.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.ListSceneCollections.get_scene_collections", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ListSceneCollections.get_scene_collections", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.MoveSourceFilter", "modulename": "twitch_bot.obs.obs_requests", "qualname": "MoveSourceFilter", "kind": "class", "doc": "<p>Move a filter in the chain (relative positioning)</p>\n\n<p>Args:\n    filterName (str): Name of the filter to reorder\n    movementType (str): How to move the filter around in the source's filter chain. Either \"up\", \"down\", \"top\" or \"bottom\".\n    sourceName (str): Name of the source to which the filter belongs</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.MoveSourceFilter.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "MoveSourceFilter.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.MoveSourceFilter.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "MoveSourceFilter.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filterName</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">movementType</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.NextMedia", "modulename": "twitch_bot.obs.obs_requests", "qualname": "NextMedia", "kind": "class", "doc": "<p>Skip to the next media item in the playlist. Supports only vlc media source (as of OBS v25.0.8)</p>\n\n<p>Args:\n    sourceName (str): Source name.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.NextMedia.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "NextMedia.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.NextMedia.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "NextMedia.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.OpenProjector", "modulename": "twitch_bot.obs.obs_requests", "qualname": "OpenProjector", "kind": "class", "doc": "<p>Open a projector window or create a projector on a monitor. Requires OBS v24.0.4 or newer.</p>\n\n<p>Args:\n    geometry (str): Size and position of the projector window (only if monitor is -1). Encoded in Base64 using <a href=\"https://doc.qt.io/qt-5/qwidget.html#saveGeometry\">Qt's geometry encoding</a>. Corresponds to OBS's saved projectors.\n    monitor (int): Monitor to open the projector on. If -1 or omitted, opens a window.\n    name (str): Name of the source or scene to be displayed (ignored for other projector types).\n    type (str): Type of projector: <code>Preview</code> (default), <code>Source</code>, <code>Scene</code>, <code>StudioProgram</code>, or <code>Multiview</code> (case insensitive).</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.OpenProjector.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "OpenProjector.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.OpenProjector.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "OpenProjector.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">geometry</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">monitor</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.PauseRecording", "modulename": "twitch_bot.obs.obs_requests", "qualname": "PauseRecording", "kind": "class", "doc": "<p>Pause the current recording.\nReturns an error if recording is not active or already paused.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.PauseRecording.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "PauseRecording.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.PauseRecording.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "PauseRecording.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.PlayPauseMedia", "modulename": "twitch_bot.obs.obs_requests", "qualname": "PlayPauseMedia", "kind": "class", "doc": "<p>Pause or play a media source. Supports ffmpeg and vlc media sources (as of OBS v25.0.8)\nNote :Leaving out <code>playPause</code> toggles the current pause state</p>\n\n<pre><code>Args:\n    playPause (bool): (optional) Whether to pause or play the source. `false` for play, `true` for pause.\n    sourceName (str): Source name.\n</code></pre>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.PlayPauseMedia.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "PlayPauseMedia.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.PlayPauseMedia.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "PlayPauseMedia.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">playPause</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.PreviousMedia", "modulename": "twitch_bot.obs.obs_requests", "qualname": "PreviousMedia", "kind": "class", "doc": "<p>Go to the previous media item in the playlist. Supports only vlc media source (as of OBS v25.0.8)</p>\n\n<p>Args:\n    sourceName (str): Source name.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.PreviousMedia.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "PreviousMedia.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.PreviousMedia.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "PreviousMedia.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.RefreshBrowserSource", "modulename": "twitch_bot.obs.obs_requests", "qualname": "RefreshBrowserSource", "kind": "class", "doc": "<p>Refreshes the specified browser source.</p>\n\n<p>Args:\n    sourceName (str): Source name.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.RefreshBrowserSource.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "RefreshBrowserSource.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.RefreshBrowserSource.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "RefreshBrowserSource.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.ReleaseTBar", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ReleaseTBar", "kind": "class", "doc": "<p>Release the T-Bar (like a user releasing their mouse button after moving it).\n<em>YOU MUST CALL THIS if you called <code>SetTBarPosition</code> with the <code>release</code> parameter set to <code>false</code>.</em></p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.ReleaseTBar.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ReleaseTBar.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.ReleaseTBar.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ReleaseTBar.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.RemoveFilterFromSource", "modulename": "twitch_bot.obs.obs_requests", "qualname": "RemoveFilterFromSource", "kind": "class", "doc": "<p>Remove a filter from a source</p>\n\n<p>Args:\n    filterName (str): Name of the filter to remove\n    sourceName (str): Name of the source from which the specified filter is removed</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.RemoveFilterFromSource.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "RemoveFilterFromSource.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.RemoveFilterFromSource.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "RemoveFilterFromSource.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filterName</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.RemoveSceneTransitionOverride", "modulename": "twitch_bot.obs.obs_requests", "qualname": "RemoveSceneTransitionOverride", "kind": "class", "doc": "<p>Remove any transition override on a scene.</p>\n\n<p>Args:\n    sceneName (str): Name of the scene to switch to.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.RemoveSceneTransitionOverride.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "RemoveSceneTransitionOverride.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.RemoveSceneTransitionOverride.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "RemoveSceneTransitionOverride.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sceneName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.ReorderSceneItems", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ReorderSceneItems", "kind": "class", "doc": "<p>Changes the order of scene items in the requested scene.</p>\n\n<p>Args:\n    items (list): Ordered list of objects with name and/or id specified. Id preferred due to uniqueness per scene\n    items.<em>.id (int) optional: Id of a specific scene item. Unique on a scene by scene basis.\n    items.</em>.name (str) optional: Name of a scene item. Sufficiently unique if no scene items share sources within the scene.\n    scene (str) optional: Name of the scene to reorder (defaults to current).</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.ReorderSceneItems.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ReorderSceneItems.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.ReorderSceneItems.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ReorderSceneItems.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">items___id</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">items___name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scene</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.ReorderSourceFilter", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ReorderSourceFilter", "kind": "class", "doc": "<p>Move a filter in the chain (absolute index positioning)</p>\n\n<p>Args:\n    filterName (str): Name of the filter to reorder\n    newIndex (int): Desired position of the filter in the chain\n    sourceName (str): Name of the source to which the filter belongs</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.ReorderSourceFilter.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ReorderSourceFilter.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.ReorderSourceFilter.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ReorderSourceFilter.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filterName</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">newIndex</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.ResetSceneItem", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ResetSceneItem", "kind": "class", "doc": "<p>Reset a scene item.</p>\n\n<p>Args:\n    item (str | object): Scene Item name (if this field is a string) or specification (if it is an object).\n    item.id (int) optional: Scene Item ID (if the <code>item</code> field is an object)\n    item.name (str) optional: Scene Item name (if the <code>item</code> field is an object)\n    scene-name (str) optional: Name of the scene the scene item belongs to. Defaults to the current scene.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.ResetSceneItem.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ResetSceneItem.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.ResetSceneItem.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ResetSceneItem.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">item_id</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">item_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scene_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.RestartMedia", "modulename": "twitch_bot.obs.obs_requests", "qualname": "RestartMedia", "kind": "class", "doc": "<p>Restart a media source. Supports ffmpeg and vlc media sources (as of OBS v25.0.8)</p>\n\n<p>Args:\n    sourceName (str): Source name.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.RestartMedia.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "RestartMedia.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.RestartMedia.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "RestartMedia.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.ResumeRecording", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ResumeRecording", "kind": "class", "doc": "<p>Resume/unpause the current recording (if paused).\nReturns an error if recording is not active or not paused.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.ResumeRecording.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ResumeRecording.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.ResumeRecording.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ResumeRecording.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SaveReplayBuffer", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SaveReplayBuffer", "kind": "class", "doc": "<p>Flush and save the contents of the Replay Buffer to disk. This is\nbasically the same as triggering the \"Save Replay Buffer\" hotkey.\nWill return an <code>error</code> if the Replay Buffer is not active.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SaveReplayBuffer.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SaveReplayBuffer.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SaveReplayBuffer.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SaveReplayBuffer.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SaveStreamSettings", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SaveStreamSettings", "kind": "class", "doc": "<p>Save the current streaming server settings to disk.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SaveStreamSettings.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SaveStreamSettings.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SaveStreamSettings.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SaveStreamSettings.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.ScrubMedia", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ScrubMedia", "kind": "class", "doc": "<p>Scrub media using a supplied offset. Supports ffmpeg and vlc media sources (as of OBS v25.0.8)\nNote: Due to processing/network delays, this request is not perfect. The processing rate of this request has also not been tested.</p>\n\n<pre><code>Args:\n    sourceName (str): Source name.\n    timeOffset (int): Millisecond offset (positive or negative) to offset the current media position.\n</code></pre>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.ScrubMedia.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ScrubMedia.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.ScrubMedia.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ScrubMedia.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">timeOffset</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SendCaptions", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SendCaptions", "kind": "class", "doc": "<p>Send the provided text as embedded CEA-608 caption data.</p>\n\n<p>Args:\n    text (str): Captions text</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SendCaptions.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SendCaptions.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SendCaptions.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SendCaptions.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetAudioMonitorType", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetAudioMonitorType", "kind": "class", "doc": "<p>Set the audio monitoring type of the specified source.</p>\n\n<p>Args:\n    monitorType (str): The monitor type to use. Options: <code>none</code>, <code>monitorOnly</code>, <code>monitorAndOutput</code>.\n    sourceName (str): Source name.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetAudioMonitorType.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetAudioMonitorType.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetAudioMonitorType.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetAudioMonitorType.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">monitorType</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetAudioTracks", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetAudioTracks", "kind": "class", "doc": "<p>Changes whether an audio track is active for a source.</p>\n\n<p>Args:\n    active (bool): Whether audio track is active or not.\n    sourceName (str): Source name.\n    track (int): Audio tracks 1-6.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetAudioTracks.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetAudioTracks.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetAudioTracks.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetAudioTracks.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">active</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">track</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetBrowserSourceProperties", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetBrowserSourceProperties", "kind": "class", "doc": "<p>Set current properties for a Browser Source.</p>\n\n<p>Args:\n    source (str): Name of the source.\n    css (str) optional: CSS to inject.\n    fps (int) optional: Framerate.\n    height (int) optional: Height.\n    is_local_file (bool) optional: Indicates that a local file is in use.\n    local_file (str) optional: file path.\n    render (bool) optional: Visibility of the scene item.\n    shutdown (bool) optional: Indicates whether the source should be shutdown when not visible.\n    url (str) optional: Url.\n    width (int) optional: Width.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetBrowserSourceProperties.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetBrowserSourceProperties.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetBrowserSourceProperties.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetBrowserSourceProperties.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">css</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fps</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">is_local_file</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">local_file</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">render</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">shutdown</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetCurrentProfile", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetCurrentProfile", "kind": "class", "doc": "<p>Set the currently active profile.</p>\n\n<p>Args:\n    profile-name (str): Name of the desired profile.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetCurrentProfile.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetCurrentProfile.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetCurrentProfile.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetCurrentProfile.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">profile_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetCurrentScene", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetCurrentScene", "kind": "class", "doc": "<p>Switch to the specified scene.</p>\n\n<p>Args:\n    scene-name (str): Name of the scene to switch to.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetCurrentScene.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetCurrentScene.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetCurrentScene.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetCurrentScene.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scene_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetCurrentSceneCollection", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetCurrentSceneCollection", "kind": "class", "doc": "<p>Change the active scene collection.</p>\n\n<p>Args:\n    sc-name (str): Name of the desired scene collection.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetCurrentSceneCollection.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetCurrentSceneCollection.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetCurrentSceneCollection.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetCurrentSceneCollection.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sc_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetCurrentTransition", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetCurrentTransition", "kind": "class", "doc": "<p>Set the active transition.</p>\n\n<p>Args:\n    transition-name (str): The name of the transition.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetCurrentTransition.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetCurrentTransition.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetCurrentTransition.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetCurrentTransition.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transition_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetFilenameFormatting", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetFilenameFormatting", "kind": "class", "doc": "<p>Set the filename formatting string</p>\n\n<p>Args:\n    filename-formatting (str): Filename formatting string to set.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetFilenameFormatting.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetFilenameFormatting.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetFilenameFormatting.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetFilenameFormatting.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename_formatting</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetHeartbeat", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetHeartbeat", "kind": "class", "doc": "<p>Enable/disable sending of the Heartbeat event</p>\n\n<p>Args:\n    enable (bool): Starts/Stops emitting heartbeat messages</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetHeartbeat.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetHeartbeat.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetHeartbeat.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetHeartbeat.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">enable</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetMediaTime", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetMediaTime", "kind": "class", "doc": "<p>Set the timestamp of a media source. Supports ffmpeg and vlc media sources (as of OBS v25.0.8)</p>\n\n<p>Args:\n    sourceName (str): Source name.\n    timestamp (int): Milliseconds to set the timestamp to.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetMediaTime.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetMediaTime.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetMediaTime.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetMediaTime.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetMute", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetMute", "kind": "class", "doc": "<p>Sets the mute status of a specified source.</p>\n\n<p>Args:\n    mute (bool): Desired mute status.\n    source (str): Source name.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetMute.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetMute.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetMute.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetMute.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mute</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>, </span><span class=\"param\"><span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetPreviewScene", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetPreviewScene", "kind": "class", "doc": "<p>Set the active preview scene.\nWill return an <code>error</code> if Studio Mode is not enabled.</p>\n\n<pre><code>Args:\n    scene-name (str): The name of the scene to preview.\n</code></pre>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetPreviewScene.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetPreviewScene.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetPreviewScene.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetPreviewScene.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scene_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetRecordingFolder", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetRecordingFolder", "kind": "class", "doc": "<p>Note: If <code>SetRecordingFolder</code> is called while a recording is\nin progress, the change won't be applied immediately and will be\neffective on the next recording.</p>\n\n<pre><code>Args:\n    rec-folder (str): Path of the recording folder.\n</code></pre>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetRecordingFolder.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetRecordingFolder.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetRecordingFolder.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetRecordingFolder.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rec_folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetSceneItemCrop", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSceneItemCrop", "kind": "class", "doc": "<p>Sets the crop coordinates of the specified source item.</p>\n\n<p>Args:\n    bottom (int): Pixel position of the bottom of the source item.\n    item (str): Scene Item name.\n    left (int): Pixel position of the left of the source item.\n    right (int): Pixel position of the right of the source item.\n    top (int): Pixel position of the top of the source item.\n    scene-name (str) optional: Name of the scene the scene item belongs to. Defaults to the current scene.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetSceneItemCrop.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSceneItemCrop.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetSceneItemCrop.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSceneItemCrop.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">bottom</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">right</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">top</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">scene_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetSceneItemPosition", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSceneItemPosition", "kind": "class", "doc": "<p>Sets the coordinates of a specified source item.</p>\n\n<p>Args:\n    item (str): Scene Item name.\n    x (int): X coordinate.\n    y (int): Y coordinate.\n    scene-name (str) optional: Name of the scene the scene item belongs to. Defaults to the current scene.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetSceneItemPosition.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSceneItemPosition.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetSceneItemPosition.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSceneItemPosition.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">scene_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetSceneItemProperties", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSceneItemProperties", "kind": "class", "doc": "<p>Sets the scene specific properties of a source. Unspecified properties will remain unchanged.\nCoordinates are relative to the item's parent (the scene or group it belongs to).</p>\n\n<pre><code>Args:\n    item (str | object): Scene Item name (if this field is a string) or specification (if it is an object).\n    bounds.alignment (int) optional: The new alignment of the bounding box. (0-2, 4-6, 8-10)\n    bounds.type (str) optional: The new bounds type of the source. Can be \"OBS_BOUNDS_STRETCH\", \"OBS_BOUNDS_SCALE_INNER\", \"OBS_BOUNDS_SCALE_OUTER\", \"OBS_BOUNDS_SCALE_TO_WIDTH\", \"OBS_BOUNDS_SCALE_TO_HEIGHT\", \"OBS_BOUNDS_MAX_ONLY\" or \"OBS_BOUNDS_NONE\".\n    bounds.x (int) optional: The new width of the bounding box.\n    bounds.y (int) optional: The new height of the bounding box.\n    crop.bottom (int) optional: The new amount of pixels cropped off the bottom of the source before scaling.\n    crop.left (int) optional: The new amount of pixels cropped off the left of the source before scaling.\n    crop.right (int) optional: The new amount of pixels cropped off the right of the source before scaling.\n    crop.top (int) optional: The new amount of pixels cropped off the top of the source before scaling.\n    item.id (int) optional: Scene Item ID (if the `item` field is an object)\n    item.name (str) optional: Scene Item name (if the `item` field is an object)\n    locked (bool) optional: The new locked status of the source. 'true' keeps it in its current position, 'false' allows movement.\n    position.alignment (int) optional: The new alignment of the source.\n    position.x (int) optional: The new x position of the source.\n    position.y (int) optional: The new y position of the source.\n    rotation (int) optional: The new clockwise rotation of the item in degrees.\n    scale.filter (str) optional: The new scale filter of the source. Can be \"OBS_SCALE_DISABLE\", \"OBS_SCALE_POINT\", \"OBS_SCALE_BICUBIC\", \"OBS_SCALE_BILINEAR\", \"OBS_SCALE_LANCZOS\" or \"OBS_SCALE_AREA\".\n    scale.x (int) optional: The new x scale of the item.\n    scale.y (int) optional: The new y scale of the item.\n    scene-name (str) optional: Name of the scene the source item belongs to. Defaults to the current scene.\n    visible (bool) optional: The new visibility of the source. 'true' shows source, 'false' hides source.\n</code></pre>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetSceneItemProperties.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSceneItemProperties.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetSceneItemProperties.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSceneItemProperties.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">bounds_alignment</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bounds_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bounds_x</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bounds_y</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">crop_bottom</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">crop_left</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">crop_right</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">crop_top</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">item_id</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">item_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">locked</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">position_alignment</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">position_x</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">position_y</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">rotation</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scale_filter</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scale_x</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scale_y</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scene_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">visible</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetSceneItemRender", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSceneItemRender", "kind": "class", "doc": "<p>Show or hide a specified source item in a specified scene.</p>\n\n<p>Args:\n    render (bool): true = shown ; false = hidden\n    item (int) optional: Scene Item id\n    scene-name (str) optional: Name of the scene the scene item belongs to. Defaults to the currently active scene.\n    source (str) optional: Scene Item name.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetSceneItemRender.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSceneItemRender.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetSceneItemRender.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSceneItemRender.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">render</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scene_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetSceneItemTransform", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSceneItemTransform", "kind": "class", "doc": "<p>Set the transform of the specified source item.</p>\n\n<p>Args:\n    item (str): Scene Item name.\n    rotation (int): Source item rotation (in degrees).\n    x-scale (int): Width scale factor.\n    y-scale (int): Height scale factor.\n    scene-name (str) optional: Name of the scene the scene item belongs to. Defaults to the current scene.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetSceneItemTransform.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSceneItemTransform.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetSceneItemTransform.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSceneItemTransform.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">rotation</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">x_scale</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">y_scale</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">scene_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetSceneTransitionOverride", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSceneTransitionOverride", "kind": "class", "doc": "<p>Set a scene to use a specific transition override.</p>\n\n<p>Args:\n    sceneName (str): Name of the scene to switch to.\n    transitionDuration (int): Duration in milliseconds of the transition if transition is not fixed. Defaults to the current duration specified in the UI if there is no current override and this value is not given.\n    transitionName (str): Name of the transition to use.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetSceneTransitionOverride.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSceneTransitionOverride.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetSceneTransitionOverride.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSceneTransitionOverride.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sceneName</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">transitionDuration</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">transitionName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetSourceFilterSettings", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSourceFilterSettings", "kind": "class", "doc": "<p>Update settings of a filter</p>\n\n<p>Args:\n    filterName (str): Name of the filter to reconfigure\n    filterSettings (object): New settings. These will be merged to the current filter settings.\n    sourceName (str): Name of the source to which the filter belongs</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetSourceFilterSettings.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSourceFilterSettings.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetSourceFilterSettings.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSourceFilterSettings.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filterName</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filterSettings</span><span class=\"p\">:</span> <span class=\"nb\">object</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetSourceFilterVisibility", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSourceFilterVisibility", "kind": "class", "doc": "<p>Change the visibility/enabled state of a filter</p>\n\n<p>Args:\n    filterEnabled (bool): New filter state\n    filterName (str): Source filter name\n    sourceName (str): Source name</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetSourceFilterVisibility.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSourceFilterVisibility.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetSourceFilterVisibility.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSourceFilterVisibility.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filterEnabled</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>, </span><span class=\"param\"><span class=\"n\">filterName</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetSourceName", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSourceName", "kind": "class", "doc": "<p>Note: If the new name already exists as a source, obs-websocket will return an error.</p>\n\n<p>Args:\n    newName (str): New source name.\n    sourceName (str): Source name.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetSourceName.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSourceName.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetSourceName.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSourceName.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">newName</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetSourceSettings", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSourceSettings", "kind": "class", "doc": "<p>Set settings of the specified source.</p>\n\n<p>Args:\n    sourceName (str): Source name.\n    sourceSettings (object): Source settings (varies between source types, may require some probing around).\n    sourceType (str) optional: Type of the specified source. Useful for type-checking to avoid settings a set of settings incompatible with the actual source's type.</p>\n\n<p>Returns:\n    sourceName (str): Source name\n    sourceSettings (object): Updated source settings\n    sourceType (str): Type of the specified source</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetSourceSettings.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSourceSettings.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetSourceSettings.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSourceSettings.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sourceSettings</span><span class=\"p\">:</span> <span class=\"nb\">object</span>,</span><span class=\"param\">\t<span class=\"n\">sourceType</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetSourceSettings.get_sourceName", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSourceSettings.get_sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetSourceSettings.get_sourceSettings", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSourceSettings.get_sourceSettings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetSourceSettings.get_sourceType", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSourceSettings.get_sourceType", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetStreamSettings", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetStreamSettings", "kind": "class", "doc": "<p>Sets one or more attributes of the current streaming server settings. Any options not passed will remain unchanged. Returns the updated settings in response. If 'type' is different than the current streaming service type, all settings are required. Returns the full settings of the stream (the same as GetStreamSettings).</p>\n\n<p>Args:\n    save (bool): Persist the settings to disk.\n    settings (object): The actual settings of the stream.\n    type (str): The type of streaming service configuration, usually <code>rtmp_custom</code> or <code>rtmp_common</code>.\n    settings.key (str) optional: The publish key.\n    settings.password (str) optional: The password for the streaming service.\n    settings.server (str) optional: The publish URL.\n    settings.use_auth (bool) optional: Indicates whether authentication should be used when connecting to the streaming server.\n    settings.username (str) optional: The username for the streaming service.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetStreamSettings.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetStreamSettings.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetStreamSettings.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetStreamSettings.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">save</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">settings</span><span class=\"p\">:</span> <span class=\"nb\">object</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">settings_key</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">settings_password</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">settings_server</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">settings_use_auth</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">settings_username</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetSyncOffset", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSyncOffset", "kind": "class", "doc": "<p>Set the audio sync offset of a specified source.</p>\n\n<p>Args:\n    offset (int): The desired audio sync offset (in nanoseconds).\n    source (str): Source name.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetSyncOffset.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSyncOffset.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetSyncOffset.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetSyncOffset.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetTBarPosition", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetTBarPosition", "kind": "class", "doc": "<p>If your code needs to perform multiple successive T-Bar moves (e.g. : in an animation, or in response to a user moving a T-Bar control in your User Interface), set <code>release</code> to false and call <code>ReleaseTBar</code> later once the animation/interaction is over.</p>\n\n<p>Args:\n    position (int): T-Bar position. This value must be between 0.0 and 1.0.\n    release (bool) optional: Whether or not the T-Bar gets released automatically after setting its new position (like a user releasing their mouse button after moving the T-Bar). Call <code>ReleaseTBar</code> manually if you set <code>release</code> to false. Defaults to true.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetTBarPosition.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetTBarPosition.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetTBarPosition.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetTBarPosition.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">release</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetTextFreetype2Properties", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetTextFreetype2Properties", "kind": "class", "doc": "<p>Set the current properties of a Text Freetype 2 source.</p>\n\n<p>Args:\n    source (str): Source name.\n    color1 (int) optional: Gradient top color.\n    color2 (int) optional: Gradient bottom color.\n    custom_width (int) optional: Custom width (0 to disable).\n    drop_shadow (bool) optional: Drop shadow.\n    font (object) optional: Holds data for the font. Ex: <code>\"font\": { \"face\": \"Arial\", \"flags\": 0, \"size\": 150, \"style\": \"\" }</code>\n    font.face (str) optional: Font face.\n    font.flags (int) optional: Font text styling flag. <code>Bold=1, Italic=2, Bold Italic=3, Underline=5, Strikeout=8</code>\n    font.size (int) optional: Font text size.\n    font.style (str) optional: Font Style (unknown function).\n    from_file (bool) optional: Read text from the specified file.\n    log_mode (bool) optional: Chat log.\n    outline (bool) optional: Outline.\n    text (str) optional: Text content to be displayed.\n    text_file (str) optional: File path.\n    word_wrap (bool) optional: Word wrap.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetTextFreetype2Properties.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetTextFreetype2Properties.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetTextFreetype2Properties.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetTextFreetype2Properties.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">color1</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">color2</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">custom_width</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">drop_shadow</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">font</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">object</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">font_face</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">font_flags</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">font_size</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">font_style</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">from_file</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">log_mode</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">outline</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">text_file</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">word_wrap</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetTextGDIPlusProperties", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetTextGDIPlusProperties", "kind": "class", "doc": "<p>Set the current properties of a Text GDI Plus source.</p>\n\n<p>Args:\n    source (str): Name of the source.\n    align (str) optional: Text Alignment (\"left\", \"center\", \"right\").\n    bk_color (int) optional: Background color.\n    bk_opacity (int) optional: Background opacity (0-100).\n    chatlog (bool) optional: Chat log.\n    chatlog_lines (int) optional: Chat log lines.\n    color (int) optional: Text color.\n    extents (bool) optional: Extents wrap.\n    extents_cx (int) optional: Extents cx.\n    extents_cy (int) optional: Extents cy.\n    file (str) optional: File path name.\n    font (object) optional: Holds data for the font. Ex: <code>\"font\": { \"face\": \"Arial\", \"flags\": 0, \"size\": 150, \"style\": \"\" }</code>\n    font.face (str) optional: Font face.\n    font.flags (int) optional: Font text styling flag. <code>Bold=1, Italic=2, Bold Italic=3, Underline=5, Strikeout=8</code>\n    font.size (int) optional: Font text size.\n    font.style (str) optional: Font Style (unknown function).\n    gradient (bool) optional: Gradient enabled.\n    gradient_color (int) optional: Gradient color.\n    gradient_dir (float) optional: Gradient direction.\n    gradient_opacity (int) optional: Gradient opacity (0-100).\n    outline (bool) optional: Outline.\n    outline_color (int) optional: Outline color.\n    outline_opacity (int) optional: Outline opacity (0-100).\n    outline_size (int) optional: Outline size.\n    read_from_file (bool) optional: Read text from the specified file.\n    render (bool) optional: Visibility of the scene item.\n    text (str) optional: Text content to be displayed.\n    valign (str) optional: Text vertical alignment (\"top\", \"center\", \"bottom\").\n    vertical (bool) optional: Vertical text enabled.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetTextGDIPlusProperties.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetTextGDIPlusProperties.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetTextGDIPlusProperties.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetTextGDIPlusProperties.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">align</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bk_color</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">bk_opacity</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chatlog</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">chatlog_lines</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">extents</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">extents_cx</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">extents_cy</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">file</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">font</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">object</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">font_face</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">font_flags</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">font_size</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">font_style</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">gradient</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">gradient_color</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">gradient_dir</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">gradient_opacity</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">outline</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">outline_color</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">outline_opacity</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">outline_size</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">read_from_file</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">render</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">valign</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">vertical</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetTransitionDuration", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetTransitionDuration", "kind": "class", "doc": "<p>Set the duration of the currently selected transition if supported.</p>\n\n<p>Args:\n    duration (int): Desired duration of the transition (in milliseconds).</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetTransitionDuration.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetTransitionDuration.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetTransitionDuration.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetTransitionDuration.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">duration</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetTransitionSettings", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetTransitionSettings", "kind": "class", "doc": "<p>Change the current settings of a transition</p>\n\n<p>Args:\n    transitionName (str): Transition name\n    transitionSettings (object): Transition settings (they can be partial)</p>\n\n<p>Returns:\n    transitionSettings (object): Updated transition settings</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetTransitionSettings.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetTransitionSettings.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetTransitionSettings.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetTransitionSettings.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transitionName</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">transitionSettings</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetTransitionSettings.get_transitionSettings", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetTransitionSettings.get_transitionSettings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.SetVolume", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetVolume", "kind": "class", "doc": "<p>Set the volume of the specified source. Default request format uses mul, NOT SLIDER PERCENTAGE.</p>\n\n<p>Args:\n    source (str): Source name.\n    volume (int): Desired volume. Must be between <code>0.0</code> and <code>20.0</code> for mul, and under 26.0 for dB. OBS will interpret dB values under -100.0 as Inf. Note: The OBS volume sliders only reach a maximum of 1.0mul/0.0dB, however OBS actually supports larger values.\n    useDecibel (bool) optional: Interperet <code>volume</code> data as decibels instead of amplitude/mul.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.SetVolume.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetVolume.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.SetVolume.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "SetVolume.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">volume</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">useDecibel</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.Sleep", "modulename": "twitch_bot.obs.obs_requests", "qualname": "Sleep", "kind": "class", "doc": "<p>Waits for the specified duration. Designed to be used in <code>ExecuteBatch</code> operations.</p>\n\n<p>Args:\n    sleepMillis (int): Delay in milliseconds to wait before continuing.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.Sleep.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "Sleep.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.Sleep.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "Sleep.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sleepMillis</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.StartOutput", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartOutput", "kind": "class", "doc": "<p>Note: Controlling outputs is an experimental feature of obs-websocket. Some plugins which add outputs to OBS may not function properly when they are controlled in this way.</p>\n\n<p>Args:\n    outputName (str): Output name</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.StartOutput.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartOutput.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.StartOutput.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartOutput.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outputName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.StartRecording", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartRecording", "kind": "class", "doc": "<p>Start recording.\nWill return an <code>error</code> if recording is already active.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.StartRecording.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartRecording.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.StartRecording.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartRecording.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.StartReplayBuffer", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartReplayBuffer", "kind": "class", "doc": "<p>Start recording into the Replay Buffer.\nWill return an <code>error</code> if the Replay Buffer is already active or if the\n\"Save Replay Buffer\" hotkey is not set in OBS' settings.\nSetting this hotkey is mandatory, even when triggering saves only\nthrough obs-websocket.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.StartReplayBuffer.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartReplayBuffer.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.StartReplayBuffer.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartReplayBuffer.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.StartStopRecording", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartStopRecording", "kind": "class", "doc": "<p>Toggle recording on or off (depending on the current recording state).</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.StartStopRecording.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartStopRecording.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.StartStopRecording.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartStopRecording.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.StartStopReplayBuffer", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartStopReplayBuffer", "kind": "class", "doc": "<p>Toggle the Replay Buffer on/off (depending on the current state of the replay buffer).</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.StartStopReplayBuffer.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartStopReplayBuffer.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.StartStopReplayBuffer.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartStopReplayBuffer.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.StartStopStreaming", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartStopStreaming", "kind": "class", "doc": "<p>Toggle streaming on or off (depending on the current stream state).</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.StartStopStreaming.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartStopStreaming.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.StartStopStreaming.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartStopStreaming.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.StartStopVirtualCam", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartStopVirtualCam", "kind": "class", "doc": "<p>Toggle virtual cam on or off (depending on the current virtual cam state).</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.StartStopVirtualCam.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartStopVirtualCam.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.StartStopVirtualCam.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartStopVirtualCam.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.StartStreaming", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartStreaming", "kind": "class", "doc": "<p>Start streaming.\nWill return an <code>error</code> if streaming is already active.</p>\n\n<pre><code>Args:\n    stream (object) optional: Special stream configuration. Note: these won't be saved to OBS' configuration.\n    stream.metadata (object) optional: Adds the given object parameters as encoded query string parameters to the 'key' of the RTMP stream. Used to pass data to the RTMP service about the streaming. May be any String, Numeric, or Boolean field.\n    stream.settings (object) optional: Settings for the stream.\n    stream.settings.key (str) optional: The publish key of the stream.\n    stream.settings.password (str) optional: If authentication is enabled, the password for the streaming server. Ignored if `use_auth` is not set to `true`.\n    stream.settings.server (str) optional: The publish URL.\n    stream.settings.use_auth (bool) optional: Indicates whether authentication should be used when connecting to the streaming server.\n    stream.settings.username (str) optional: If authentication is enabled, the username for the streaming server. Ignored if `use_auth` is not set to `true`.\n    stream.type (str) optional: If specified ensures the type of stream matches the given type (usually 'rtmp_custom' or 'rtmp_common'). If the currently configured stream type does not match the given stream type, all settings must be specified in the `settings` object or an error will occur when starting the stream.\n</code></pre>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.StartStreaming.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartStreaming.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.StartStreaming.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartStreaming.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">stream</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">object</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stream_metadata</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">object</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stream_settings</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">object</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stream_settings_key</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stream_settings_password</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stream_settings_server</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stream_settings_use_auth</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stream_settings_username</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stream_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.StartVirtualCam", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartVirtualCam", "kind": "class", "doc": "<p>Start virtual cam.\nWill return an <code>error</code> if virtual cam is already active.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.StartVirtualCam.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartVirtualCam.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.StartVirtualCam.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StartVirtualCam.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.StopMedia", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StopMedia", "kind": "class", "doc": "<p>Stop a media source. Supports ffmpeg and vlc media sources (as of OBS v25.0.8)</p>\n\n<p>Args:\n    sourceName (str): Source name.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.StopMedia.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StopMedia.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.StopMedia.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StopMedia.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.StopOutput", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StopOutput", "kind": "class", "doc": "<p>Note: Controlling outputs is an experimental feature of obs-websocket. Some plugins which add outputs to OBS may not function properly when they are controlled in this way.</p>\n\n<p>Args:\n    outputName (str): Output name\n    force (bool) optional: Force stop (default: false)</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.StopOutput.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StopOutput.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.StopOutput.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StopOutput.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">outputName</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">force</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.StopRecording", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StopRecording", "kind": "class", "doc": "<p>Stop recording.\nWill return an <code>error</code> if recording is not active.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.StopRecording.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StopRecording.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.StopRecording.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StopRecording.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.StopReplayBuffer", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StopReplayBuffer", "kind": "class", "doc": "<p>Stop recording into the Replay Buffer.\nWill return an <code>error</code> if the Replay Buffer is not active.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.StopReplayBuffer.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StopReplayBuffer.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.StopReplayBuffer.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StopReplayBuffer.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.StopStreaming", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StopStreaming", "kind": "class", "doc": "<p>Stop streaming.\nWill return an <code>error</code> if streaming is not active.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.StopStreaming.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StopStreaming.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.StopStreaming.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StopStreaming.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.StopVirtualCam", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StopVirtualCam", "kind": "class", "doc": "<p>Stop virtual cam.\nWill return an <code>error</code> if virtual cam is not active.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.StopVirtualCam.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StopVirtualCam.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.StopVirtualCam.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "StopVirtualCam.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.TakeSourceScreenshot", "modulename": "twitch_bot.obs.obs_requests", "qualname": "TakeSourceScreenshot", "kind": "class", "doc": "<p>At least <code>embedPictureFormat</code> or <code>saveToFilePath</code> must be specified.</p>\n\n<p>Clients can specify <code>width</code> and <code>height</code> parameters to receive scaled pictures. Aspect ratio is\npreserved if only one of these two parameters is specified.</p>\n\n<pre><code>Args:\n    compressionQuality (int) optional: Compression ratio between -1 and 100 to write the image with. -1 is automatic, 1 is smallest file/most compression, 100 is largest file/least compression. Varies with image type.\n    embedPictureFormat (str) optional: Format of the Data URI encoded picture. Can be \"png\", \"jpg\", \"jpeg\" or \"bmp\" (or any other value supported by Qt's Image module)\n    fileFormat (str) optional: Format to save the image file as (one of the values provided in the `supported-image-export-formats` response field of `GetVersion`). If not specified, tries to guess based on file extension.\n    height (int) optional: Screenshot height. Defaults to the source's base height.\n    saveToFilePath (str) optional: Full file path (file extension included) where the captured image is to be saved. Can be in a format different from `pictureFormat`. Can be a relative path.\n    sourceName (str) optional: Source name. Note: Since scenes are also sources, you can also provide a scene name. If not provided, the currently active scene is used.\n    width (int) optional: Screenshot width. Defaults to the source's base width.\n\nReturns:\n    imageFile (str): Absolute path to the saved image file (if `saveToFilePath` was specified in the request)\n    img (str): Image Data URI (if `embedPictureFormat` was specified in the request)\n    sourceName (str): Source name\n</code></pre>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.TakeSourceScreenshot.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "TakeSourceScreenshot.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.TakeSourceScreenshot.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "TakeSourceScreenshot.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">compressionQuality</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">embedPictureFormat</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fileFormat</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">saveToFilePath</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sourceName</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.TakeSourceScreenshot.get_imageFile", "modulename": "twitch_bot.obs.obs_requests", "qualname": "TakeSourceScreenshot.get_imageFile", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.TakeSourceScreenshot.get_img", "modulename": "twitch_bot.obs.obs_requests", "qualname": "TakeSourceScreenshot.get_img", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.TakeSourceScreenshot.get_sourceName", "modulename": "twitch_bot.obs.obs_requests", "qualname": "TakeSourceScreenshot.get_sourceName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.ToggleMute", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ToggleMute", "kind": "class", "doc": "<p>Inverts the mute status of a specified source.</p>\n\n<p>Args:\n    source (str): Source name.</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.ToggleMute.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ToggleMute.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.ToggleMute.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ToggleMute.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">source</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.ToggleStudioMode", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ToggleStudioMode", "kind": "class", "doc": "<p>Toggles Studio Mode (depending on the current state of studio mode).</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.ToggleStudioMode.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ToggleStudioMode.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.ToggleStudioMode.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "ToggleStudioMode.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.TransitionToProgram", "modulename": "twitch_bot.obs.obs_requests", "qualname": "TransitionToProgram", "kind": "class", "doc": "<p>Transitions the currently previewed scene to the main output.\nWill return an <code>error</code> if Studio Mode is not enabled.</p>\n\n<pre><code>Args:\n    with-transition.name (str): Name of the transition.\n    with-transition (object) optional: Change the active transition before switching scenes. Defaults to the active transition.\n    with-transition.duration (int) optional: Transition duration (in milliseconds).\n</code></pre>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.TransitionToProgram.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "TransitionToProgram.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.TransitionToProgram.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "TransitionToProgram.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">with_transition_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">with_transition</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">object</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">with_transition_duration</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.TriggerHotkeyByName", "modulename": "twitch_bot.obs.obs_requests", "qualname": "TriggerHotkeyByName", "kind": "class", "doc": "<p>Executes hotkey routine, identified by hotkey unique name</p>\n\n<p>Args:\n    hotkeyName (str): Unique name of the hotkey, as defined when registering the hotkey (e.g. \"ReplayBuffer.Save\")</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.TriggerHotkeyByName.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "TriggerHotkeyByName.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.TriggerHotkeyByName.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "TriggerHotkeyByName.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hotkeyName</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_requests.TriggerHotkeyBySequence", "modulename": "twitch_bot.obs.obs_requests", "qualname": "TriggerHotkeyBySequence", "kind": "class", "doc": "<p>Executes hotkey routine, identified by bound combination of keys. A single key combination might trigger multiple hotkey routines depending on user settings</p>\n\n<p>Args:\n    keyId (str): Main key identifier (e.g. <code>OBS_KEY_A</code> for key \"A\"). Available identifiers <a href=\"https://github.com/obsproject/obs-studio/blob/master/libobs/obs-hotkeys.h\">here</a>\n    keyModifiers (object): Optional key modifiers object. False entries can be ommitted\n    keyModifiers.alt (bool): Trigger Alt Key\n    keyModifiers.command (bool): Trigger Command Key (Mac)\n    keyModifiers.control (bool): Trigger Control (Ctrl) Key\n    keyModifiers.shift (bool): Trigger Shift Key</p>\n", "bases": "obs.obs_base_classes.BaseRequests"}, {"fullname": "twitch_bot.obs.obs_requests.TriggerHotkeyBySequence.__init__", "modulename": "twitch_bot.obs.obs_requests", "qualname": "TriggerHotkeyBySequence.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_requests.TriggerHotkeyBySequence.init", "modulename": "twitch_bot.obs.obs_requests", "qualname": "TriggerHotkeyBySequence.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">keyId</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">keyModifiers</span><span class=\"p\">:</span> <span class=\"nb\">object</span>,</span><span class=\"param\">\t<span class=\"n\">keyModifiers_alt</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">keyModifiers_command</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">keyModifiers_control</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">keyModifiers_shift</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_utils", "modulename": "twitch_bot.obs.obs_utils", "kind": "module", "doc": "<p>Library for working with OBS.</p>\n"}, {"fullname": "twitch_bot.obs.obs_utils.OBS", "modulename": "twitch_bot.obs.obs_utils", "qualname": "OBS", "kind": "class", "doc": "<p>OBS object.</p>\n"}, {"fullname": "twitch_bot.obs.obs_utils.OBS.__init__", "modulename": "twitch_bot.obs.obs_utils", "qualname": "OBS.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.obs.obs_utils.OBS.init", "modulename": "twitch_bot.obs.obs_utils", "qualname": "OBS.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    obs_connection (OBSConnection): Connection object to OBS.</p>\n\n<p>Returns:\n    self (OBS): Class instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obs_connection</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_utils.OBS.check_connection", "modulename": "twitch_bot.obs.obs_utils", "qualname": "OBS.check_connection", "kind": "function", "doc": "<p>Decorator to check the connection to OBS.</p>\n\n<p>Args:\n    func (Callable): Decorated function.</p>\n\n<p>Returns:\n    (Any): Result of the decorated function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.obs.obs_utils.OBS.change_scene", "modulename": "twitch_bot.obs.obs_utils", "qualname": "OBS.change_scene", "kind": "function", "doc": "<p>Wrapped function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_utils.OBS.show_source", "modulename": "twitch_bot.obs.obs_utils", "qualname": "OBS.show_source", "kind": "function", "doc": "<p>Wrapped function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_utils.OBS.hide_source", "modulename": "twitch_bot.obs.obs_utils", "qualname": "OBS.hide_source", "kind": "function", "doc": "<p>Wrapped function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_utils.OBS.on_event", "modulename": "twitch_bot.obs.obs_utils", "qualname": "OBS.on_event", "kind": "function", "doc": "<p>Runs when OBS sends any event.</p>\n\n<p>Used for debugging.</p>\n\n<p>Args:\n    message (object): Event from OBS.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.obs.obs_utils.OBS.disconnect", "modulename": "twitch_bot.obs.obs_utils", "qualname": "OBS.disconnect", "kind": "function", "doc": "<p>Disconnect from OBS.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.overlays", "modulename": "twitch_bot.overlays", "kind": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "twitch_bot.plugin_loader", "modulename": "twitch_bot.plugin_loader", "kind": "module", "doc": "<p>Plugin Manager.</p>\n"}, {"fullname": "twitch_bot.plugin_loader.import_plugins", "modulename": "twitch_bot.plugin_loader", "qualname": "import_plugins", "kind": "function", "doc": "<p>Import the plugins from the plugin files.</p>\n\n<p>Args:\n    reload (bool): Used to signal that the plugins should be reloaded.</p>\n\n<p>Returns:\n    imported_plugins (dict): Imported plugins.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">do_reload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugin_loader.load_plugins", "modulename": "twitch_bot.plugin_loader", "qualname": "load_plugins", "kind": "function", "doc": "<p>Load all the plugins.</p>\n\n<p>Args:\n    reload (bool): Used to signal that the plugins should be reloaded.</p>\n\n<p>Returns:\n    plugins (dict): Dictionary of plugins in the form\n        {\n            category1: [\n                {name1: plugin1},\n                {name2: plugin2},\n            ],\n            category2: [\n                {name3: plugin3},\n            ],\n        }</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">do_reload</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins", "modulename": "twitch_bot.plugins", "kind": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "twitch_bot.plugins.8ball_command", "modulename": "twitch_bot.plugins.8ball_command", "kind": "module", "doc": "<p>8Ball plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.8ball_command.EightBallCommand", "modulename": "twitch_bot.plugins.8ball_command", "qualname": "EightBallCommand", "kind": "class", "doc": "<p>8Ball plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.8ball_command.EightBallCommand.run", "modulename": "twitch_bot.plugins.8ball_command", "qualname": "EightBallCommand.run", "kind": "function", "doc": "<p>Generic 8-ball.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.aboutbot_command", "modulename": "twitch_bot.plugins.aboutbot_command", "kind": "module", "doc": "<p>About Bot plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.aboutbot_command.AboutBotCommand", "modulename": "twitch_bot.plugins.aboutbot_command", "qualname": "AboutBotCommand", "kind": "class", "doc": "<p>About Bot plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.aboutbot_command.AboutBotCommand.run", "modulename": "twitch_bot.plugins.aboutbot_command", "qualname": "AboutBotCommand.run", "kind": "function", "doc": "<p>About the bot.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.accountage_command", "modulename": "twitch_bot.plugins.accountage_command", "kind": "module", "doc": "<p>Account age plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.accountage_command.AccountAgeCommand", "modulename": "twitch_bot.plugins.accountage_command", "qualname": "AccountAgeCommand", "kind": "class", "doc": "<p>Account age plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.accountage_command.AccountAgeCommand.run", "modulename": "twitch_bot.plugins.accountage_command", "qualname": "AccountAgeCommand.run", "kind": "function", "doc": "<p>The the user's account age.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.announcement_command", "modulename": "twitch_bot.plugins.announcement_command", "kind": "module", "doc": "<p>Announcement plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.announcement_command.AnnouncementCommand", "modulename": "twitch_bot.plugins.announcement_command", "qualname": "AnnouncementCommand", "kind": "class", "doc": "<p>Announcement plugin.</p>\n\n<p>Used to announce anything.</p>\n", "bases": "plugins._base_plugins.BaseIntervalPlugin"}, {"fullname": "twitch_bot.plugins.announcement_command.AnnouncementCommand.run", "modulename": "twitch_bot.plugins.announcement_command", "qualname": "AnnouncementCommand.run", "kind": "function", "doc": "<p>Announcement message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.ban_command", "modulename": "twitch_bot.plugins.ban_command", "kind": "module", "doc": "<p>Ban plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.ban_command.BanCommand", "modulename": "twitch_bot.plugins.ban_command", "qualname": "BanCommand", "kind": "class", "doc": "<p>Ban plugin.</p>\n\n<p>Used when people jokingly ban a person.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.ban_command.BanCommand.run", "modulename": "twitch_bot.plugins.ban_command", "qualname": "BanCommand.run", "kind": "function", "doc": "<p>Joke ban command.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.boop_command", "modulename": "twitch_bot.plugins.boop_command", "kind": "module", "doc": "<p>Boop plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.boop_command.BoopCommand", "modulename": "twitch_bot.plugins.boop_command", "qualname": "BoopCommand", "kind": "class", "doc": "<p>Boop plugin.</p>\n\n<p>Used to indicate lurking.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.boop_command.BoopCommand.run", "modulename": "twitch_bot.plugins.boop_command", "qualname": "BoopCommand.run", "kind": "function", "doc": "<p>Boop message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.build_command", "modulename": "twitch_bot.plugins.build_command", "kind": "module", "doc": "<p>Test plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.build_command.BuildCommand", "modulename": "twitch_bot.plugins.build_command", "qualname": "BuildCommand", "kind": "class", "doc": "<p>Build plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.build_command.BuildCommand.run", "modulename": "twitch_bot.plugins.build_command", "qualname": "BuildCommand.run", "kind": "function", "doc": "<p>Computer build info.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.commands_command", "modulename": "twitch_bot.plugins.commands_command", "kind": "module", "doc": "<p>Simple commands plugins.</p>\n"}, {"fullname": "twitch_bot.plugins.commands_command.CommandsCommand", "modulename": "twitch_bot.plugins.commands_command", "qualname": "CommandsCommand", "kind": "class", "doc": "<p>Create, modify, and/or delete simple commands plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.commands_command.CommandsCommand.run", "modulename": "twitch_bot.plugins.commands_command", "qualname": "CommandsCommand.run", "kind": "function", "doc": "<p>Create, modify, and/or delete simple commands.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.dad_joke_command", "modulename": "twitch_bot.plugins.dad_joke_command", "kind": "module", "doc": "<p>Dad joke plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.dad_joke_command.DadJokeCommand", "modulename": "twitch_bot.plugins.dad_joke_command", "qualname": "DadJokeCommand", "kind": "class", "doc": "<p>Dad joke plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.dad_joke_command.DadJokeCommand.run", "modulename": "twitch_bot.plugins.dad_joke_command", "qualname": "DadJokeCommand.run", "kind": "function", "doc": "<p>Dad jokes provided by icanhazdadjoke.com.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.discord_command", "modulename": "twitch_bot.plugins.discord_command", "kind": "module", "doc": "<p>Discord plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.discord_command.DiscordCommand", "modulename": "twitch_bot.plugins.discord_command", "qualname": "DiscordCommand", "kind": "class", "doc": "<p>Discord plugin.</p>\n\n<p>Used to plug the discord.</p>\n", "bases": "plugins._base_plugins.BaseIntervalPlugin"}, {"fullname": "twitch_bot.plugins.discord_command.DiscordCommand.run", "modulename": "twitch_bot.plugins.discord_command", "qualname": "DiscordCommand.run", "kind": "function", "doc": "<p>Discord message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.dnd_command", "modulename": "twitch_bot.plugins.dnd_command", "kind": "module", "doc": "<p>D&amp;D plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.dnd_command.DNDCommand", "modulename": "twitch_bot.plugins.dnd_command", "qualname": "DNDCommand", "kind": "class", "doc": "<p>D&amp;D plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.dnd_command.DNDCommand.run", "modulename": "twitch_bot.plugins.dnd_command", "qualname": "DNDCommand.run", "kind": "function", "doc": "<p>D&amp;D stuff.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.follow_age_command", "modulename": "twitch_bot.plugins.follow_age_command", "kind": "module", "doc": "<p>Follow age plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.follow_age_command.FollowAgeCommand", "modulename": "twitch_bot.plugins.follow_age_command", "qualname": "FollowAgeCommand", "kind": "class", "doc": "<p>Follow age plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.follow_age_command.FollowAgeCommand.run", "modulename": "twitch_bot.plugins.follow_age_command", "qualname": "FollowAgeCommand.run", "kind": "function", "doc": "<p>Show the folow age for the user.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.gamble_command", "modulename": "twitch_bot.plugins.gamble_command", "kind": "module", "doc": "<p>Gamble plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.gamble_command.GambleCommand", "modulename": "twitch_bot.plugins.gamble_command", "qualname": "GambleCommand", "kind": "class", "doc": "<p>Fake gambling for imaginary points.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.gamble_command.GambleCommand.run", "modulename": "twitch_bot.plugins.gamble_command", "qualname": "GambleCommand.run", "kind": "function", "doc": "<p>Gamble plugin.</p>\n\n<p>Gamble some amount of useless points for more or less useless points.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.howami_command", "modulename": "twitch_bot.plugins.howami_command", "kind": "module", "doc": "<p>How Am I plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.howami_command.HowAmI", "modulename": "twitch_bot.plugins.howami_command", "qualname": "HowAmI", "kind": "class", "doc": "<p>Respond to the question of how I'm doing.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.howami_command.HowAmI.run", "modulename": "twitch_bot.plugins.howami_command", "qualname": "HowAmI.run", "kind": "function", "doc": "<p>How is the bot doing today.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.hydrate_command", "modulename": "twitch_bot.plugins.hydrate_command", "kind": "module", "doc": "<p>Hydrate plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.hydrate_command.HydrateCommand", "modulename": "twitch_bot.plugins.hydrate_command", "qualname": "HydrateCommand", "kind": "class", "doc": "<p>Hydrate plugin.</p>\n\n<p>Used to tell the streamer to have a drink of a refreshing beverage.</p>\n", "bases": "plugins._base_plugins.BaseIntervalPlugin"}, {"fullname": "twitch_bot.plugins.hydrate_command.HydrateCommand.run", "modulename": "twitch_bot.plugins.hydrate_command", "qualname": "HydrateCommand.run", "kind": "function", "doc": "<p>Hydrate message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.loyalty_points_command", "modulename": "twitch_bot.plugins.loyalty_points_command", "kind": "module", "doc": "<p>Loyalty Points plugins.</p>\n"}, {"fullname": "twitch_bot.plugins.loyalty_points_command.UpdateLoyalty", "modulename": "twitch_bot.plugins.loyalty_points_command", "qualname": "UpdateLoyalty", "kind": "class", "doc": "<p>Update loyalty plugin.</p>\n\n<p>Used to tell the streamer to save their work.</p>\n", "bases": "plugins._base_plugins.BaseIntervalPlugin"}, {"fullname": "twitch_bot.plugins.loyalty_points_command.UpdateLoyalty.run", "modulename": "twitch_bot.plugins.loyalty_points_command", "qualname": "UpdateLoyalty.run", "kind": "function", "doc": "<p>Uptdate the amount of loyalty points for everyone in the chat.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.loyalty_points_command.RedeemLoyalty", "modulename": "twitch_bot.plugins.loyalty_points_command", "qualname": "RedeemLoyalty", "kind": "class", "doc": "<p>Redeem rewards for loyalty points.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.loyalty_points_command.RedeemLoyalty.run", "modulename": "twitch_bot.plugins.loyalty_points_command", "qualname": "RedeemLoyalty.run", "kind": "function", "doc": "<p>Redeem loyalty points.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.loyalty_points_command.CheckLoyalty", "modulename": "twitch_bot.plugins.loyalty_points_command", "qualname": "CheckLoyalty", "kind": "class", "doc": "<p>Check loyalty points.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.loyalty_points_command.CheckLoyalty.run", "modulename": "twitch_bot.plugins.loyalty_points_command", "qualname": "CheckLoyalty.run", "kind": "function", "doc": "<p>Check loyalty points.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.loyalty_points_command.RefundLoyalty", "modulename": "twitch_bot.plugins.loyalty_points_command", "qualname": "RefundLoyalty", "kind": "class", "doc": "<p>Refund loyalty points.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.loyalty_points_command.RefundLoyalty.run", "modulename": "twitch_bot.plugins.loyalty_points_command", "qualname": "RefundLoyalty.run", "kind": "function", "doc": "<p>Refund loyalty points.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.lurk_command", "modulename": "twitch_bot.plugins.lurk_command", "kind": "module", "doc": "<p>Lurk plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.lurk_command.LurkCommand", "modulename": "twitch_bot.plugins.lurk_command", "qualname": "LurkCommand", "kind": "class", "doc": "<p>Lurk plugin.</p>\n\n<p>Used to indicate lurking.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.lurk_command.LurkCommand.run", "modulename": "twitch_bot.plugins.lurk_command", "qualname": "LurkCommand.run", "kind": "function", "doc": "<p>Lurk message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.lurk_command.UnlurkCommand", "modulename": "twitch_bot.plugins.lurk_command", "qualname": "UnlurkCommand", "kind": "class", "doc": "<p>Unlurk plugin.</p>\n\n<p>Used to indicate a person is no longer lurking.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.lurk_command.UnlurkCommand.run", "modulename": "twitch_bot.plugins.lurk_command", "qualname": "UnlurkCommand.run", "kind": "function", "doc": "<p>Unlurk message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.marker_command", "modulename": "twitch_bot.plugins.marker_command", "kind": "module", "doc": "<p>Stream marker plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.marker_command.StreamMarkerCommand", "modulename": "twitch_bot.plugins.marker_command", "qualname": "StreamMarkerCommand", "kind": "class", "doc": "<p>Stream marker plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.marker_command.StreamMarkerCommand.run", "modulename": "twitch_bot.plugins.marker_command", "qualname": "StreamMarkerCommand.run", "kind": "function", "doc": "<p>Create a stream marker.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.pancake_command", "modulename": "twitch_bot.plugins.pancake_command", "kind": "module", "doc": "<p>Pancake plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.pancake_command.PancakeModel", "modulename": "twitch_bot.plugins.pancake_command", "qualname": "PancakeModel", "kind": "class", "doc": "<p>Abstract table model for all plugins.</p>\n", "bases": "plugins._base_model.AbstractPluginModel"}, {"fullname": "twitch_bot.plugins.pancake_command.PancakeModel.Meta", "modulename": "twitch_bot.plugins.pancake_command", "qualname": "PancakeModel.Meta", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "twitch_bot.plugins.pancake_command.PancakeModel.Meta.__init__", "modulename": "twitch_bot.plugins.pancake_command", "qualname": "PancakeModel.Meta.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.plugins.pancake_command.PancakeCommand", "modulename": "twitch_bot.plugins.pancake_command", "qualname": "PancakeCommand", "kind": "class", "doc": "<p>Pancake plugin.</p>\n\n<p>A game where people can stack pancakes for a stream.\nRules:\n    1. Anyone can use the !pancake command.\n    2. Once a person uses the command, they must wait until someone else\n        uses it.\n    3. The command has a small timeout to prevent multiple people from\n        spamming the command back and forth.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.pancake_command.PancakeCommand.run", "modulename": "twitch_bot.plugins.pancake_command", "qualname": "PancakeCommand.run", "kind": "function", "doc": "<p>Pancake game.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.pet_command", "modulename": "twitch_bot.plugins.pet_command", "kind": "module", "doc": "<p>Pet plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.pet_command.PetCommand", "modulename": "twitch_bot.plugins.pet_command", "qualname": "PetCommand", "kind": "class", "doc": "<p>Pet plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.pet_command.PetCommand.run", "modulename": "twitch_bot.plugins.pet_command", "qualname": "PetCommand.run", "kind": "function", "doc": "<p>Interaction with the Pet project.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.pet_command.PetHatRedemption", "modulename": "twitch_bot.plugins.pet_command", "qualname": "PetHatRedemption", "kind": "class", "doc": "<p>Pet plugin for handling hat redemption rewards.</p>\n", "bases": "plugins._base_plugins.BaseRedemptionPlugin"}, {"fullname": "twitch_bot.plugins.pet_command.PetHatRedemption.run", "modulename": "twitch_bot.plugins.pet_command", "qualname": "PetHatRedemption.run", "kind": "function", "doc": "<p>Put a hat on the pet.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.pet_command.PetGlassesRedemption", "modulename": "twitch_bot.plugins.pet_command", "qualname": "PetGlassesRedemption", "kind": "class", "doc": "<p>Pet plugin for handling glasses redemption rewards.</p>\n", "bases": "plugins._base_plugins.BaseRedemptionPlugin"}, {"fullname": "twitch_bot.plugins.pet_command.PetGlassesRedemption.run", "modulename": "twitch_bot.plugins.pet_command", "qualname": "PetGlassesRedemption.run", "kind": "function", "doc": "<p>Put glasses on the pet.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.points_command", "modulename": "twitch_bot.plugins.points_command", "kind": "module", "doc": "<p>Points plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.points_command.PointsCommand", "modulename": "twitch_bot.plugins.points_command", "qualname": "PointsCommand", "kind": "class", "doc": "<p>Check imaginary points.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.points_command.PointsCommand.run", "modulename": "twitch_bot.plugins.points_command", "qualname": "PointsCommand.run", "kind": "function", "doc": "<p>Points plugin.</p>\n\n<p>Check how many points a user has.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.problems_command", "modulename": "twitch_bot.plugins.problems_command", "kind": "module", "doc": "<p>Problems plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.problems_command.ProblemsCommand", "modulename": "twitch_bot.plugins.problems_command", "qualname": "ProblemsCommand", "kind": "class", "doc": "<p>Problems plugin.</p>\n\n<p>Used to inform users to report issues.</p>\n", "bases": "plugins._base_plugins.BaseIntervalPlugin"}, {"fullname": "twitch_bot.plugins.problems_command.ProblemsCommand.run", "modulename": "twitch_bot.plugins.problems_command", "qualname": "ProblemsCommand.run", "kind": "function", "doc": "<p>Problems message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.queue_command", "modulename": "twitch_bot.plugins.queue_command", "kind": "module", "doc": "<p>Queue plugins.</p>\n"}, {"fullname": "twitch_bot.plugins.queue_command.Queue", "modulename": "twitch_bot.plugins.queue_command", "qualname": "Queue", "kind": "class", "doc": "<p>Queue storage object.</p>\n\n<p>Queues are First-On / First-Off Stacks.</p>\n"}, {"fullname": "twitch_bot.plugins.queue_command.Queue.__init__", "modulename": "twitch_bot.plugins.queue_command", "qualname": "Queue.__init__", "kind": "function", "doc": "<p>Init.</p>\n\n<p>Args:\n    name (str, optional): Name of the queue.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Queue&#39;</span></span>)</span>"}, {"fullname": "twitch_bot.plugins.queue_command.Queue.reopen", "modulename": "twitch_bot.plugins.queue_command", "qualname": "Queue.reopen", "kind": "function", "doc": "<p>Reopen the queue.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.queue_command.Queue.close", "modulename": "twitch_bot.plugins.queue_command", "qualname": "Queue.close", "kind": "function", "doc": "<p>Close the queue.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.queue_command.Queue.add", "modulename": "twitch_bot.plugins.queue_command", "qualname": "Queue.add", "kind": "function", "doc": "<p>Add a member to the queue.</p>\n\n<p>Args:\n    member (str): Member to add to the end of the queue.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">member</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.queue_command.Queue.remove", "modulename": "twitch_bot.plugins.queue_command", "qualname": "Queue.remove", "kind": "function", "doc": "<p>Remove a member from the queue.</p>\n\n<p>Args:\n    member (str): Member to remove from the queue.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">member</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.queue_command.Queue.current", "modulename": "twitch_bot.plugins.queue_command", "qualname": "Queue.current", "kind": "variable", "doc": "<p>Show the current first position in the queue.</p>\n", "annotation": ": str"}, {"fullname": "twitch_bot.plugins.queue_command.Queue.next_up", "modulename": "twitch_bot.plugins.queue_command", "qualname": "Queue.next_up", "kind": "variable", "doc": "<p>Show who is next.</p>\n", "annotation": ": str"}, {"fullname": "twitch_bot.plugins.queue_command.Queue.next", "modulename": "twitch_bot.plugins.queue_command", "qualname": "Queue.next", "kind": "function", "doc": "<p>Remove the current first member from the list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.queue_command.Queue.is_open", "modulename": "twitch_bot.plugins.queue_command", "qualname": "Queue.is_open", "kind": "variable", "doc": "<p>Returns True if the queue is open, otherwise False.</p>\n", "annotation": ": bool"}, {"fullname": "twitch_bot.plugins.queue_command.QueueCommand", "modulename": "twitch_bot.plugins.queue_command", "qualname": "QueueCommand", "kind": "class", "doc": "<p>Queue plugin.</p>\n\n<p>Create a queue for users to enter.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.queue_command.QueueCommand.run", "modulename": "twitch_bot.plugins.queue_command", "qualname": "QueueCommand.run", "kind": "function", "doc": "<p>Queue command.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.queue_command.ListQueueCommand", "modulename": "twitch_bot.plugins.queue_command", "qualname": "ListQueueCommand", "kind": "class", "doc": "<p>List queue plugin.</p>\n\n<p>Create a queue for users to enter.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.queue_command.ListQueueCommand.run", "modulename": "twitch_bot.plugins.queue_command", "qualname": "ListQueueCommand.run", "kind": "function", "doc": "<p>Queue command.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.queue_command.JoinQueueCommand", "modulename": "twitch_bot.plugins.queue_command", "qualname": "JoinQueueCommand", "kind": "class", "doc": "<p>Join a queue.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.queue_command.JoinQueueCommand.run", "modulename": "twitch_bot.plugins.queue_command", "qualname": "JoinQueueCommand.run", "kind": "function", "doc": "<p>Join queue command.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.queue_command.LeaveQueueCommand", "modulename": "twitch_bot.plugins.queue_command", "qualname": "LeaveQueueCommand", "kind": "class", "doc": "<p>Leave a queue.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.queue_command.LeaveQueueCommand.run", "modulename": "twitch_bot.plugins.queue_command", "qualname": "LeaveQueueCommand.run", "kind": "function", "doc": "<p>Leave queue command.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.queue_command.NextQueueCommand", "modulename": "twitch_bot.plugins.queue_command", "qualname": "NextQueueCommand", "kind": "class", "doc": "<p>Go to the next person in the queue.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.queue_command.NextQueueCommand.run", "modulename": "twitch_bot.plugins.queue_command", "qualname": "NextQueueCommand.run", "kind": "function", "doc": "<p>Next queue command.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.queue_command.CloseQueueCommand", "modulename": "twitch_bot.plugins.queue_command", "qualname": "CloseQueueCommand", "kind": "class", "doc": "<p>Close the queue.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.queue_command.CloseQueueCommand.run", "modulename": "twitch_bot.plugins.queue_command", "qualname": "CloseQueueCommand.run", "kind": "function", "doc": "<p>Close queue command.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.quote_command", "modulename": "twitch_bot.plugins.quote_command", "kind": "module", "doc": "<p>Quote plugins.</p>\n"}, {"fullname": "twitch_bot.plugins.quote_command.QuoteModel", "modulename": "twitch_bot.plugins.quote_command", "qualname": "QuoteModel", "kind": "class", "doc": "<p>Abstract table model for all plugins.</p>\n", "bases": "plugins._base_model.AbstractPluginModel"}, {"fullname": "twitch_bot.plugins.quote_command.QuoteModel.Meta", "modulename": "twitch_bot.plugins.quote_command", "qualname": "QuoteModel.Meta", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "twitch_bot.plugins.quote_command.QuoteModel.Meta.__init__", "modulename": "twitch_bot.plugins.quote_command", "qualname": "QuoteModel.Meta.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.plugins.quote_command.QuoteCommand", "modulename": "twitch_bot.plugins.quote_command", "qualname": "QuoteCommand", "kind": "class", "doc": "<p>Quote plugin.</p>\n\n<p>Used to fetch a quote either intentionally or randomly.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.quote_command.QuoteCommand.run", "modulename": "twitch_bot.plugins.quote_command", "qualname": "QuoteCommand.run", "kind": "function", "doc": "<p>Quote.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.quote_command.AddQuoteCommand", "modulename": "twitch_bot.plugins.quote_command", "qualname": "AddQuoteCommand", "kind": "class", "doc": "<p>Add quote plugin.</p>\n\n<p>Used to add interesting quotes from chat.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.quote_command.AddQuoteCommand.run", "modulename": "twitch_bot.plugins.quote_command", "qualname": "AddQuoteCommand.run", "kind": "function", "doc": "<p>Add a quote.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.quote_command.EditQuoteCommand", "modulename": "twitch_bot.plugins.quote_command", "qualname": "EditQuoteCommand", "kind": "class", "doc": "<p>Edit quote plugin.</p>\n\n<p>Used to fetch a quote and edit it.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.quote_command.EditQuoteCommand.run", "modulename": "twitch_bot.plugins.quote_command", "qualname": "EditQuoteCommand.run", "kind": "function", "doc": "<p>Edit a quote.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.quote_command.RemoveQuoteCommand", "modulename": "twitch_bot.plugins.quote_command", "qualname": "RemoveQuoteCommand", "kind": "class", "doc": "<p>Remove quote plugin.</p>\n\n<p>Used to fetch a quote and delete it.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.quote_command.RemoveQuoteCommand.run", "modulename": "twitch_bot.plugins.quote_command", "qualname": "RemoveQuoteCommand.run", "kind": "function", "doc": "<p>Remove a quote.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.raffle_command", "modulename": "twitch_bot.plugins.raffle_command", "kind": "module", "doc": "<p>Raffle plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.raffle_command.RaffleCommand", "modulename": "twitch_bot.plugins.raffle_command", "qualname": "RaffleCommand", "kind": "class", "doc": "<p>Raffle plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.raffle_command.RaffleCommand.run", "modulename": "twitch_bot.plugins.raffle_command", "qualname": "RaffleCommand.run", "kind": "function", "doc": "<p>Manage a raffle.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.raffle_command.EnterRaffleCommand", "modulename": "twitch_bot.plugins.raffle_command", "qualname": "EnterRaffleCommand", "kind": "class", "doc": "<p>Enter raffle plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.raffle_command.EnterRaffleCommand.run", "modulename": "twitch_bot.plugins.raffle_command", "qualname": "EnterRaffleCommand.run", "kind": "function", "doc": "<p>Enter an ongoing raffle.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.raffle_command.ExitRaffleCommand", "modulename": "twitch_bot.plugins.raffle_command", "qualname": "ExitRaffleCommand", "kind": "class", "doc": "<p>Exit raffle plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.raffle_command.ExitRaffleCommand.run", "modulename": "twitch_bot.plugins.raffle_command", "qualname": "ExitRaffleCommand.run", "kind": "function", "doc": "<p>Exit an ongoing raffle.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.raid_command", "modulename": "twitch_bot.plugins.raid_command", "kind": "module", "doc": "<p>Raid plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.raid_command.RaidCommand", "modulename": "twitch_bot.plugins.raid_command", "qualname": "RaidCommand", "kind": "class", "doc": "<p>Raid plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.raid_command.RaidCommand.run", "modulename": "twitch_bot.plugins.raid_command", "qualname": "RaidCommand.run", "kind": "function", "doc": "<p>Raid.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.rock_paper_scissors_command", "modulename": "twitch_bot.plugins.rock_paper_scissors_command", "kind": "module", "doc": "<p>Rock, Paper, Scissors plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.rock_paper_scissors_command.RockPaperScissors", "modulename": "twitch_bot.plugins.rock_paper_scissors_command", "qualname": "RockPaperScissors", "kind": "class", "doc": "<p>Rock, Paper, Scissors plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.rock_paper_scissors_command.RockPaperScissors.run", "modulename": "twitch_bot.plugins.rock_paper_scissors_command", "qualname": "RockPaperScissors.run", "kind": "function", "doc": "<p>About the bot.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roll_command", "modulename": "twitch_bot.plugins.roll_command", "kind": "module", "doc": "<p>Roll plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.roll_command.RollCommand", "modulename": "twitch_bot.plugins.roll_command", "qualname": "RollCommand", "kind": "class", "doc": "<p>Roll plugin.</p>\n\n<p>Roll any number of any kind of dice and return the result(s).</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.roll_command.RollCommand.run", "modulename": "twitch_bot.plugins.roll_command", "qualname": "RollCommand.run", "kind": "function", "doc": "<p>Roll some dice.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roll_command.RollCommand.roll", "modulename": "twitch_bot.plugins.roll_command", "qualname": "RollCommand.roll", "kind": "function", "doc": "<p>Roll the dice.</p>\n\n<p>Args:\n    command_args (list): Argument(s) for the command.</p>\n\n<p>Returns:\n    (dict): Dictionary of roll results.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">command_args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command", "modulename": "twitch_bot.plugins.roulette_command", "kind": "module", "doc": "<p>Roulette plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.roulette_command.Space", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Space", "kind": "class", "doc": "<p>Roulette Space.</p>\n"}, {"fullname": "twitch_bot.plugins.roulette_command.Space.__init__", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Space.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.plugins.roulette_command.Space.init", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Space.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    number (int): Number of the space.\n    color (str): Color of the space.\n    row (int): Row of the space.\n    column (int): Column of the space.</p>\n\n<p>Returns:\n    (object): Space object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">row</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">column</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Space.calculate_neighbors", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Space.calculate_neighbors", "kind": "function", "doc": "<p>Calculate the neighbors to this space.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Space.is_consecutive", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Space.is_consecutive", "kind": "variable", "doc": "<p>Check if this space is consecutive with the given number.</p>\n\n<p>Args:\n    num (int): Number to test.</p>\n\n<p>Returns:\n    (bool): True if consecutive, False otherwise.</p>\n", "annotation": ": bool"}, {"fullname": "twitch_bot.plugins.roulette_command.Space.is_even", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Space.is_even", "kind": "variable", "doc": "<p>Check if this space is even.</p>\n\n<p>Returns:\n    (bool): True if even, otherwise False.</p>\n", "annotation": ": bool"}, {"fullname": "twitch_bot.plugins.roulette_command.Board", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Board", "kind": "class", "doc": "<p>Roulette Board.</p>\n"}, {"fullname": "twitch_bot.plugins.roulette_command.Board.__init__", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Board.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.plugins.roulette_command.Board.init", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Board.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Returns:\n    (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Bet", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Bet", "kind": "class", "doc": "<p>Bet object.</p>\n"}, {"fullname": "twitch_bot.plugins.roulette_command.Bet.__init__", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Bet.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.plugins.roulette_command.Bet.validate", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Bet.validate", "kind": "function", "doc": "<p>Validate the number given.</p>\n\n<p>Args:\n    number (int, optional): Number given by the player.</p>\n\n<p>Returns:\n    (bool): True if the number is valid, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Straight", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Straight", "kind": "class", "doc": "<p>Straight bet object.</p>\n", "bases": "Bet"}, {"fullname": "twitch_bot.plugins.roulette_command.Straight.__init__", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Straight.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.plugins.roulette_command.Straight.init", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Straight.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Returns:\n    (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Straight.validate", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Straight.validate", "kind": "function", "doc": "<p>Validate the number given.</p>\n\n<p>Args:\n    number (int): Number given by the player.</p>\n\n<p>Returns:\n    (bool): True if the number is valid, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Straight.calculate_win", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Straight.calculate_win", "kind": "function", "doc": "<p>Calculate the win condition.</p>\n\n<p>Args:\n    space (Space): Space landed on.\n    number (int, optional): Number guessed by the player.</p>\n\n<p>Returns:\n    (bool): True if the player wins, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">space</span><span class=\"p\">:</span> <span class=\"n\">twitch_bot</span><span class=\"o\">.</span><span class=\"n\">plugins</span><span class=\"o\">.</span><span class=\"n\">roulette_command</span><span class=\"o\">.</span><span class=\"n\">Space</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Low", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Low", "kind": "class", "doc": "<p>Low bet object.</p>\n", "bases": "Bet"}, {"fullname": "twitch_bot.plugins.roulette_command.Low.__init__", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Low.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.plugins.roulette_command.Low.init", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Low.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Returns:\n    (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Low.calculate_win", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Low.calculate_win", "kind": "function", "doc": "<p>Calculate the win condition.</p>\n\n<p>Args:\n    space (Space): Space landed on.\n    number (int, optional): Number guessed by the player.</p>\n\n<p>Returns:\n    (bool): True if the player wins, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">space</span><span class=\"p\">:</span> <span class=\"n\">twitch_bot</span><span class=\"o\">.</span><span class=\"n\">plugins</span><span class=\"o\">.</span><span class=\"n\">roulette_command</span><span class=\"o\">.</span><span class=\"n\">Space</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.High", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "High", "kind": "class", "doc": "<p>High bet object.</p>\n", "bases": "Bet"}, {"fullname": "twitch_bot.plugins.roulette_command.High.__init__", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "High.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.plugins.roulette_command.High.init", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "High.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Returns:\n    (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.High.validate", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "High.validate", "kind": "function", "doc": "<p>Validate the number given.</p>\n\n<p>Args:\n    number (int, optional): Number given by the player.</p>\n\n<p>Returns:\n    (bool): True if the number is valid, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.High.calculate_win", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "High.calculate_win", "kind": "function", "doc": "<p>Calculate the win condition.</p>\n\n<p>Args:\n    space (Space): Space landed on.\n    number (int, optional): Number guessed by the player.</p>\n\n<p>Returns:\n    (bool): True if the player wins, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">space</span><span class=\"p\">:</span> <span class=\"n\">twitch_bot</span><span class=\"o\">.</span><span class=\"n\">plugins</span><span class=\"o\">.</span><span class=\"n\">roulette_command</span><span class=\"o\">.</span><span class=\"n\">Space</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Even", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Even", "kind": "class", "doc": "<p>Even bet object.</p>\n", "bases": "Bet"}, {"fullname": "twitch_bot.plugins.roulette_command.Even.__init__", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Even.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.plugins.roulette_command.Even.init", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Even.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Returns:\n    (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Even.calculate_win", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Even.calculate_win", "kind": "function", "doc": "<p>Calculate the win condition.</p>\n\n<p>Args:\n    space (Space): Space landed on.\n    number (int, optional): Number guessed by the player.</p>\n\n<p>Returns:\n    (bool): True if the player wins, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">space</span><span class=\"p\">:</span> <span class=\"n\">twitch_bot</span><span class=\"o\">.</span><span class=\"n\">plugins</span><span class=\"o\">.</span><span class=\"n\">roulette_command</span><span class=\"o\">.</span><span class=\"n\">Space</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Odd", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Odd", "kind": "class", "doc": "<p>Odd bet object.</p>\n", "bases": "Bet"}, {"fullname": "twitch_bot.plugins.roulette_command.Odd.__init__", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Odd.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.plugins.roulette_command.Odd.init", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Odd.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Returns:\n    (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Odd.calculate_win", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Odd.calculate_win", "kind": "function", "doc": "<p>Calculate the win condition.</p>\n\n<p>Args:\n    space (Space): Space landed on.\n    number (int, optional): Number guessed by the player.</p>\n\n<p>Returns:\n    (bool): True if the player wins, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">space</span><span class=\"p\">:</span> <span class=\"n\">twitch_bot</span><span class=\"o\">.</span><span class=\"n\">plugins</span><span class=\"o\">.</span><span class=\"n\">roulette_command</span><span class=\"o\">.</span><span class=\"n\">Space</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Red", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Red", "kind": "class", "doc": "<p>Red bet object.</p>\n", "bases": "Bet"}, {"fullname": "twitch_bot.plugins.roulette_command.Red.__init__", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Red.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.plugins.roulette_command.Red.init", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Red.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Returns:\n    (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Red.calculate_win", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Red.calculate_win", "kind": "function", "doc": "<p>Calculate the win condition.</p>\n\n<p>Args:\n    space (Space): Space landed on.\n    number (int, optional): Number guessed by the player.</p>\n\n<p>Returns:\n    (bool): True if the player wins, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">space</span><span class=\"p\">:</span> <span class=\"n\">twitch_bot</span><span class=\"o\">.</span><span class=\"n\">plugins</span><span class=\"o\">.</span><span class=\"n\">roulette_command</span><span class=\"o\">.</span><span class=\"n\">Space</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Black", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Black", "kind": "class", "doc": "<p>Black bet object.</p>\n", "bases": "Bet"}, {"fullname": "twitch_bot.plugins.roulette_command.Black.__init__", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Black.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.plugins.roulette_command.Black.init", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Black.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Returns:\n    (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Black.calculate_win", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Black.calculate_win", "kind": "function", "doc": "<p>Calculate the win condition.</p>\n\n<p>Args:\n    space (Space): Space landed on.\n    number (int, optional): Number guessed by the player.</p>\n\n<p>Returns:\n    (bool): True if the player wins, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">space</span><span class=\"p\">:</span> <span class=\"n\">twitch_bot</span><span class=\"o\">.</span><span class=\"n\">plugins</span><span class=\"o\">.</span><span class=\"n\">roulette_command</span><span class=\"o\">.</span><span class=\"n\">Space</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Topline", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Topline", "kind": "class", "doc": "<p>Topline bet object.</p>\n", "bases": "Bet"}, {"fullname": "twitch_bot.plugins.roulette_command.Topline.__init__", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Topline.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.plugins.roulette_command.Topline.init", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Topline.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Returns:\n    (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Topline.calculate_win", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Topline.calculate_win", "kind": "function", "doc": "<p>Calculate the win condition.</p>\n\n<p>Args:\n    space (Space): Space landed on.\n    number (int, optional): Number guessed by the player.</p>\n\n<p>Returns:\n    (bool): True if the player wins, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">space</span><span class=\"p\">:</span> <span class=\"n\">twitch_bot</span><span class=\"o\">.</span><span class=\"n\">plugins</span><span class=\"o\">.</span><span class=\"n\">roulette_command</span><span class=\"o\">.</span><span class=\"n\">Space</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Street", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Street", "kind": "class", "doc": "<p>Street bet object.</p>\n", "bases": "Bet"}, {"fullname": "twitch_bot.plugins.roulette_command.Street.__init__", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Street.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.plugins.roulette_command.Street.init", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Street.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Returns:\n    (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Street.validate", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Street.validate", "kind": "function", "doc": "<p>Validate the number given.</p>\n\n<p>Args:\n    number (int): Number given by the player.</p>\n\n<p>Returns:\n    (bool): True if the number is valid, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Street.calculate_win", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Street.calculate_win", "kind": "function", "doc": "<p>Calculate the win condition.</p>\n\n<p>Args:\n    space (Space): Space landed on.\n    number (int, optional): Number guessed by the player.</p>\n\n<p>Returns:\n    (bool): True if the player wins, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">space</span><span class=\"p\">:</span> <span class=\"n\">twitch_bot</span><span class=\"o\">.</span><span class=\"n\">plugins</span><span class=\"o\">.</span><span class=\"n\">roulette_command</span><span class=\"o\">.</span><span class=\"n\">Space</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Column", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Column", "kind": "class", "doc": "<p>Column bet object.</p>\n", "bases": "Bet"}, {"fullname": "twitch_bot.plugins.roulette_command.Column.__init__", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Column.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.plugins.roulette_command.Column.init", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Column.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Returns:\n    (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Column.validate", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Column.validate", "kind": "function", "doc": "<p>Validate the number given.</p>\n\n<p>Args:\n    number (int): Number given by the player.</p>\n\n<p>Returns:\n    (bool): True if the number is valid, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Column.calculate_win", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Column.calculate_win", "kind": "function", "doc": "<p>Calculate the win condition.</p>\n\n<p>Args:\n    space (Space): Space landed on.\n    number (int, optional): Number guessed by the player.</p>\n\n<p>Returns:\n    (bool): True if the player wins, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">space</span><span class=\"p\">:</span> <span class=\"n\">twitch_bot</span><span class=\"o\">.</span><span class=\"n\">plugins</span><span class=\"o\">.</span><span class=\"n\">roulette_command</span><span class=\"o\">.</span><span class=\"n\">Space</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Dozen", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Dozen", "kind": "class", "doc": "<p>Dozen bet object.</p>\n", "bases": "Bet"}, {"fullname": "twitch_bot.plugins.roulette_command.Dozen.__init__", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Dozen.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.plugins.roulette_command.Dozen.init", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Dozen.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Returns:\n    (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Dozen.validate", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Dozen.validate", "kind": "function", "doc": "<p>Validate the number given.</p>\n\n<p>Args:\n    number (int): Number given by the player.</p>\n\n<p>Returns:\n    (bool): True if the number is valid, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Dozen.calculate_win", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Dozen.calculate_win", "kind": "function", "doc": "<p>Calculate the win condition.</p>\n\n<p>Args:\n    space (Space): Space landed on.\n    number (int, optional, optional): Number guessed by the player.</p>\n\n<p>Returns:\n    (bool): True if the player wins, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">space</span><span class=\"p\">:</span> <span class=\"n\">twitch_bot</span><span class=\"o\">.</span><span class=\"n\">plugins</span><span class=\"o\">.</span><span class=\"n\">roulette_command</span><span class=\"o\">.</span><span class=\"n\">Space</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Split", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Split", "kind": "class", "doc": "<p>Split bet object.</p>\n", "bases": "Bet"}, {"fullname": "twitch_bot.plugins.roulette_command.Split.__init__", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Split.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.plugins.roulette_command.Split.init", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Split.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Returns:\n    (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Split.validate", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Split.validate", "kind": "function", "doc": "<p>Validate the number given.</p>\n\n<p>Args:\n    number (int): Number given by the player.</p>\n\n<p>Returns:\n    (bool): True if the number is valid, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Split.calculate_win", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Split.calculate_win", "kind": "function", "doc": "<p>Calculate the win condition.</p>\n\n<p>Args:\n    space (Space): Space landed on.\n    number (int, optional): Number guessed by the player.</p>\n\n<p>Returns:\n    (bool): True if the player wins, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">space</span><span class=\"p\">:</span> <span class=\"n\">twitch_bot</span><span class=\"o\">.</span><span class=\"n\">plugins</span><span class=\"o\">.</span><span class=\"n\">roulette_command</span><span class=\"o\">.</span><span class=\"n\">Space</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Doublestreet", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Doublestreet", "kind": "class", "doc": "<p>Doublestreet bet object.</p>\n", "bases": "Bet"}, {"fullname": "twitch_bot.plugins.roulette_command.Doublestreet.__init__", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Doublestreet.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.plugins.roulette_command.Doublestreet.init", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Doublestreet.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Returns:\n    (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Doublestreet.validate", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Doublestreet.validate", "kind": "function", "doc": "<p>Validate the number given.</p>\n\n<p>Args:\n    number (int): Number given by the player.</p>\n\n<p>Returns:\n    (bool): True if the number is valid, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Doublestreet.calculate_win", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Doublestreet.calculate_win", "kind": "function", "doc": "<p>Calculate the win condition.</p>\n\n<p>Args:\n    space (Space): Space landed on.\n    number (int, optional): Number guessed by the player.</p>\n\n<p>Returns:\n    (bool): True if the player wins, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">space</span><span class=\"p\">:</span> <span class=\"n\">twitch_bot</span><span class=\"o\">.</span><span class=\"n\">plugins</span><span class=\"o\">.</span><span class=\"n\">roulette_command</span><span class=\"o\">.</span><span class=\"n\">Space</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Corner", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Corner", "kind": "class", "doc": "<p>Corner bet object.</p>\n", "bases": "Bet"}, {"fullname": "twitch_bot.plugins.roulette_command.Corner.__init__", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Corner.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.plugins.roulette_command.Corner.init", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Corner.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Returns:\n    (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Corner.validate", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Corner.validate", "kind": "function", "doc": "<p>Validate the number given.</p>\n\n<p>Args:\n    number (int): Number given by the player.</p>\n\n<p>Returns:\n    (bool): True if the number is valid, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.Corner.calculate_win", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "Corner.calculate_win", "kind": "function", "doc": "<p>Calculate the win condition.</p>\n\n<p>Args:\n    space (Space): Space landed on.\n    number (int, optional): Number guessed by the player.</p>\n\n<p>Returns:\n    (bool): True if the player wins, otherwise False.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">space</span><span class=\"p\">:</span> <span class=\"n\">twitch_bot</span><span class=\"o\">.</span><span class=\"n\">plugins</span><span class=\"o\">.</span><span class=\"n\">roulette_command</span><span class=\"o\">.</span><span class=\"n\">Space</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.RouletteCommand", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "RouletteCommand", "kind": "class", "doc": "<p>Roulette plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.roulette_command.RouletteCommand.run", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "RouletteCommand.run", "kind": "function", "doc": "<p>Roulette.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.roulette_command.RouletteCommand.let_it_roll", "modulename": "twitch_bot.plugins.roulette_command", "qualname": "RouletteCommand.let_it_roll", "kind": "function", "doc": "<p>Do the spin and calculate the win.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.save_command", "modulename": "twitch_bot.plugins.save_command", "kind": "module", "doc": "<p>Save plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.save_command.SaveCommand", "modulename": "twitch_bot.plugins.save_command", "qualname": "SaveCommand", "kind": "class", "doc": "<p>Save plugin.</p>\n\n<p>Used to tell the streamer to save their work.</p>\n", "bases": "plugins._base_plugins.BaseIntervalPlugin"}, {"fullname": "twitch_bot.plugins.save_command.SaveCommand.run", "modulename": "twitch_bot.plugins.save_command", "qualname": "SaveCommand.run", "kind": "function", "doc": "<p>Save message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.schedule_command", "modulename": "twitch_bot.plugins.schedule_command", "kind": "module", "doc": "<p>Schedule plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.schedule_command.ScheduleCommand", "modulename": "twitch_bot.plugins.schedule_command", "qualname": "ScheduleCommand", "kind": "class", "doc": "<p>Schedule plugin.</p>\n\n<p>Get and print the schedule for the next few streams.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.schedule_command.ScheduleCommand.run", "modulename": "twitch_bot.plugins.schedule_command", "qualname": "ScheduleCommand.run", "kind": "function", "doc": "<p>Show the schedule.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.shoutout_command", "modulename": "twitch_bot.plugins.shoutout_command", "kind": "module", "doc": "<p>Shoutout plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.shoutout_command.ShoutoutCommand", "modulename": "twitch_bot.plugins.shoutout_command", "qualname": "ShoutoutCommand", "kind": "class", "doc": "<p>Shoutout plugin.</p>\n\n<p>Used to shout out and advertise awesome people.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.shoutout_command.ShoutoutCommand.run", "modulename": "twitch_bot.plugins.shoutout_command", "qualname": "ShoutoutCommand.run", "kind": "function", "doc": "<p>Shoutout.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.slots_command", "modulename": "twitch_bot.plugins.slots_command", "kind": "module", "doc": "<p>slots plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.slots_command.SlotsCommand", "modulename": "twitch_bot.plugins.slots_command", "qualname": "SlotsCommand", "kind": "class", "doc": "<p>Slots plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.slots_command.SlotsCommand.run", "modulename": "twitch_bot.plugins.slots_command", "qualname": "SlotsCommand.run", "kind": "function", "doc": "<p>Slots game with emotes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.sound_redemption_command", "modulename": "twitch_bot.plugins.sound_redemption_command", "kind": "module", "doc": "<p>Play a sound based on a channel point redemption.</p>\n"}, {"fullname": "twitch_bot.plugins.sound_redemption_command.SoundRedemptionCommand", "modulename": "twitch_bot.plugins.sound_redemption_command", "qualname": "SoundRedemptionCommand", "kind": "class", "doc": "<p>Play a sound based on a channel point redemption.</p>\n", "bases": "plugins._base_plugins.BaseRedemptionPlugin"}, {"fullname": "twitch_bot.plugins.sound_redemption_command.SoundRedemptionCommand.run", "modulename": "twitch_bot.plugins.sound_redemption_command", "qualname": "SoundRedemptionCommand.run", "kind": "function", "doc": "<p>Play a sound.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.spells_command", "modulename": "twitch_bot.plugins.spells_command", "kind": "module", "doc": "<p>Spells plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.spells_command.PowerpuffCommand", "modulename": "twitch_bot.plugins.spells_command", "qualname": "PowerpuffCommand", "kind": "class", "doc": "<p>Powerpuff plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.spells_command.PowerpuffCommand.run", "modulename": "twitch_bot.plugins.spells_command", "qualname": "PowerpuffCommand.run", "kind": "function", "doc": "<p>Make the Powerpuff Girls.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.spells_command.MagicMissileCommand", "modulename": "twitch_bot.plugins.spells_command", "qualname": "MagicMissileCommand", "kind": "class", "doc": "<p>Magic Missile plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.spells_command.MagicMissileCommand.run", "modulename": "twitch_bot.plugins.spells_command", "qualname": "MagicMissileCommand.run", "kind": "function", "doc": "<p>Magic Missile.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.stopchewing_command", "modulename": "twitch_bot.plugins.stopchewing_command", "kind": "module", "doc": "<p>Stop Chewing plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.stopchewing_command.StopChewing", "modulename": "twitch_bot.plugins.stopchewing_command", "qualname": "StopChewing", "kind": "class", "doc": "<p>Count every time I tell the bun to stop chewing on the carpet.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.stopchewing_command.StopChewing.run", "modulename": "twitch_bot.plugins.stopchewing_command", "qualname": "StopChewing.run", "kind": "function", "doc": "<p>Stop chewing counter.</p>\n\n<p>Count how many times I have to tell my rabbit to stop chewing on my\ncarpet.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.stream_stats_command", "modulename": "twitch_bot.plugins.stream_stats_command", "kind": "module", "doc": "<p>Stream Stats plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.stream_stats_command.QuoteModel", "modulename": "twitch_bot.plugins.stream_stats_command", "qualname": "QuoteModel", "kind": "class", "doc": "<p>Abstract table model for all plugins.</p>\n", "bases": "plugins._base_model.AbstractPluginModel"}, {"fullname": "twitch_bot.plugins.stream_stats_command.QuoteModel.Meta", "modulename": "twitch_bot.plugins.stream_stats_command", "qualname": "QuoteModel.Meta", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "twitch_bot.plugins.stream_stats_command.QuoteModel.Meta.__init__", "modulename": "twitch_bot.plugins.stream_stats_command", "qualname": "QuoteModel.Meta.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.plugins.stream_stats_command.ViewerCountCommand", "modulename": "twitch_bot.plugins.stream_stats_command", "qualname": "ViewerCountCommand", "kind": "class", "doc": "<p>Viewer count plugin.</p>\n", "bases": "plugins._base_plugins.BaseIntervalPlugin"}, {"fullname": "twitch_bot.plugins.stream_stats_command.ViewerCountCommand.run", "modulename": "twitch_bot.plugins.stream_stats_command", "qualname": "ViewerCountCommand.run", "kind": "function", "doc": "<p>Count the number of viewers and save it to a database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.stream_stats_command.GraphStatsCommand", "modulename": "twitch_bot.plugins.stream_stats_command", "qualname": "GraphStatsCommand", "kind": "class", "doc": "<p>Graph Stats plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.stream_stats_command.GraphStatsCommand.run", "modulename": "twitch_bot.plugins.stream_stats_command", "qualname": "GraphStatsCommand.run", "kind": "function", "doc": "<p>Graph the viewer count over time and save the graph as an image.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.test_command", "modulename": "twitch_bot.plugins.test_command", "kind": "module", "doc": "<p>Test plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.test_command.TestCommand", "modulename": "twitch_bot.plugins.test_command", "qualname": "TestCommand", "kind": "class", "doc": "<p>Test plugin.</p>\n\n<p>Used to confirm the bot is working.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.test_command.TestCommand.run", "modulename": "twitch_bot.plugins.test_command", "qualname": "TestCommand.run", "kind": "function", "doc": "<p>Test.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.test_redemption_command", "modulename": "twitch_bot.plugins.test_redemption_command", "kind": "module", "doc": "<p>Test redemption command plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.test_redemption_command.TestRedemptionCommand", "modulename": "twitch_bot.plugins.test_redemption_command", "qualname": "TestRedemptionCommand", "kind": "class", "doc": "<p>Test redemption command plugin.</p>\n", "bases": "plugins._base_plugins.BaseRedemptionPlugin"}, {"fullname": "twitch_bot.plugins.test_redemption_command.TestRedemptionCommand.run", "modulename": "twitch_bot.plugins.test_redemption_command", "qualname": "TestRedemptionCommand.run", "kind": "function", "doc": "<p>Test redemption.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.trivia_command", "modulename": "twitch_bot.plugins.trivia_command", "kind": "module", "doc": "<p>Trivia plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.trivia_command.TriviaCommand", "modulename": "twitch_bot.plugins.trivia_command", "qualname": "TriviaCommand", "kind": "class", "doc": "<p>Trivia plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.trivia_command.TriviaCommand.run", "modulename": "twitch_bot.plugins.trivia_command", "qualname": "TriviaCommand.run", "kind": "function", "doc": "<p>Trivia questions provided by The Open Trivia Database.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.trivia_command.TriviaCommand.generate_question", "modulename": "twitch_bot.plugins.trivia_command", "qualname": "TriviaCommand.generate_question", "kind": "function", "doc": "<p>Generate a question and cache the answer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.trivia_command.TriviaCommand.show_answer", "modulename": "twitch_bot.plugins.trivia_command", "qualname": "TriviaCommand.show_answer", "kind": "function", "doc": "<p>Retrieve the answer from the cache and print it.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.update_stream_command", "modulename": "twitch_bot.plugins.update_stream_command", "kind": "module", "doc": "<p>Update stream information plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.update_stream_command.UpdateStreamCommand", "modulename": "twitch_bot.plugins.update_stream_command", "qualname": "UpdateStreamCommand", "kind": "class", "doc": "<p>Update stream information plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.update_stream_command.UpdateStreamCommand.run", "modulename": "twitch_bot.plugins.update_stream_command", "qualname": "UpdateStreamCommand.run", "kind": "function", "doc": "<p>Update stream information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.uptime_command", "modulename": "twitch_bot.plugins.uptime_command", "kind": "module", "doc": "<p>Uptime plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.uptime_command.UptimeCommand", "modulename": "twitch_bot.plugins.uptime_command", "qualname": "UptimeCommand", "kind": "class", "doc": "<p>Uptime plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.uptime_command.UptimeCommand.run", "modulename": "twitch_bot.plugins.uptime_command", "qualname": "UptimeCommand.run", "kind": "function", "doc": "<p>Stream uptime.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.plugins.watchtime_command", "modulename": "twitch_bot.plugins.watchtime_command", "kind": "module", "doc": "<p>Watch Time plugin.</p>\n"}, {"fullname": "twitch_bot.plugins.watchtime_command.WatchTimeCommand", "modulename": "twitch_bot.plugins.watchtime_command", "qualname": "WatchTimeCommand", "kind": "class", "doc": "<p>Watch time plugin.</p>\n", "bases": "plugins._base_plugins.BaseCommandPlugin"}, {"fullname": "twitch_bot.plugins.watchtime_command.WatchTimeCommand.run", "modulename": "twitch_bot.plugins.watchtime_command", "qualname": "WatchTimeCommand.run", "kind": "function", "doc": "<p>Stream watch time.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub", "modulename": "twitch_bot.pubsub", "kind": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "twitch_bot.pubsub.pubsub", "modulename": "twitch_bot.pubsub.pubsub", "kind": "module", "doc": "<p>Pubsub.</p>\n"}, {"fullname": "twitch_bot.pubsub.pubsub.PubSub", "modulename": "twitch_bot.pubsub.pubsub", "qualname": "PubSub", "kind": "class", "doc": "<p>Pubsub receiver.</p>\n"}, {"fullname": "twitch_bot.pubsub.pubsub.PubSub.__init__", "modulename": "twitch_bot.pubsub.pubsub", "qualname": "PubSub.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.pubsub.pubsub.PubSub.init", "modulename": "twitch_bot.pubsub.pubsub", "qualname": "PubSub.init", "kind": "function", "doc": "<p>Async init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">authorization</span><span class=\"p\">:</span> <span class=\"n\">auth</span><span class=\"o\">.</span><span class=\"n\">Auth</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub.PubSub.get_topics", "modulename": "twitch_bot.pubsub.pubsub", "qualname": "PubSub.get_topics", "kind": "function", "doc": "<p>Get topics from the config.</p>\n\n<p>Returns:\n    topics (list): Pubsub topics with the needed info filled in.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub.PubSub.connect", "modulename": "twitch_bot.pubsub.pubsub", "qualname": "PubSub.connect", "kind": "function", "doc": "<p>Connect.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub.PubSub.send_message", "modulename": "twitch_bot.pubsub.pubsub", "qualname": "PubSub.send_message", "kind": "function", "doc": "<p>Send a server message.</p>\n\n<p>Args:\n    message (json): JSON data from PubSub.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub.PubSub.run", "modulename": "twitch_bot.pubsub.pubsub", "qualname": "PubSub.run", "kind": "function", "doc": "<p>Receive messages from the server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub.PubSub.create_event", "modulename": "twitch_bot.pubsub.pubsub", "qualname": "PubSub.create_event", "kind": "function", "doc": "<p>Create an event out of the PubSub data.</p>\n\n<p>Args:\n    data (json): JSON data from PubSub.</p>\n\n<p>Returns:\n    event (events.Event): Event object.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span> <span class=\"s1\">&#39;json&#39;</span> <span class=\"kn\">from</span> <span class=\"s1\">&#39;/opt/homebrew/Cellar/python@3.10/3.10.9/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/__init__.py&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">Event</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub.PubSub.send_heartbeat", "modulename": "twitch_bot.pubsub.pubsub", "qualname": "PubSub.send_heartbeat", "kind": "function", "doc": "<p>Send the keep-alive PING message.</p>\n\n<p>This is different from the websocket protocol PING &lt;&gt; PONG.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub_events", "modulename": "twitch_bot.pubsub.pubsub_events", "kind": "module", "doc": "<p>PubSub Events.</p>\n"}, {"fullname": "twitch_bot.pubsub.pubsub_events.PubSubEvent", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "PubSubEvent", "kind": "class", "doc": "<p>PubSub event.</p>\n", "bases": "events.Event"}, {"fullname": "twitch_bot.pubsub.pubsub_events.PubSubEvent.__init__", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "PubSubEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.pubsub.pubsub_events.AutoModQueueEvent", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "AutoModQueueEvent", "kind": "class", "doc": "<p>AutoMod Queue event.</p>\n", "bases": "PubSubEvent"}, {"fullname": "twitch_bot.pubsub.pubsub_events.AutoModQueueEvent.__init__", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "AutoModQueueEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.pubsub.pubsub_events.AutoModQueueEvent.init", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "AutoModQueueEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Pubsub message.</p>\n\n<p>Returns:\n    self (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub_events.AutoModQueueEvent.run", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "AutoModQueueEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub_events.BitsEvent", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "BitsEvent", "kind": "class", "doc": "<p>Bits event.</p>\n", "bases": "PubSubEvent"}, {"fullname": "twitch_bot.pubsub.pubsub_events.BitsEvent.__init__", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "BitsEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.pubsub.pubsub_events.BitsEvent.init", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "BitsEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Pubsub message.</p>\n\n<p>Returns:\n    self (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub_events.BitsEvent.run", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "BitsEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub_events.BitsBadgeEvent", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "BitsBadgeEvent", "kind": "class", "doc": "<p>Bits badge event.</p>\n", "bases": "PubSubEvent"}, {"fullname": "twitch_bot.pubsub.pubsub_events.BitsBadgeEvent.__init__", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "BitsBadgeEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.pubsub.pubsub_events.BitsBadgeEvent.init", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "BitsBadgeEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Pubsub message.</p>\n\n<p>Returns:\n    self (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub_events.BitsBadgeEvent.run", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "BitsBadgeEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub_events.ChatModeratorActionsEvent", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "ChatModeratorActionsEvent", "kind": "class", "doc": "<p>Chat moderator actions event.</p>\n\n<p>Although listed in the possible topics, this event has no documentation\nand no way to trigger it as a test. This will act as a placeholder until\nthe data received from this event can be confirmed.</p>\n", "bases": "PubSubEvent"}, {"fullname": "twitch_bot.pubsub.pubsub_events.ChatModeratorActionsEvent.__init__", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "ChatModeratorActionsEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.pubsub.pubsub_events.ChatModeratorActionsEvent.init", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "ChatModeratorActionsEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Pubsub message.</p>\n\n<p>Returns:\n    self (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub_events.ChatModeratorActionsEvent.run", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "ChatModeratorActionsEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub_events.ChannelPointsEvent", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "ChannelPointsEvent", "kind": "class", "doc": "<p>Channel points event.</p>\n", "bases": "PubSubEvent"}, {"fullname": "twitch_bot.pubsub.pubsub_events.ChannelPointsEvent.__init__", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "ChannelPointsEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.pubsub.pubsub_events.ChannelPointsEvent.init", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "ChannelPointsEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Pubsub message.</p>\n\n<p>Returns:\n    self (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub_events.ChannelPointsEvent.run", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "ChannelPointsEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub_events.SubscribeEvent", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "SubscribeEvent", "kind": "class", "doc": "<p>Subscribe event.</p>\n", "bases": "PubSubEvent"}, {"fullname": "twitch_bot.pubsub.pubsub_events.SubscribeEvent.__init__", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "SubscribeEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.pubsub.pubsub_events.SubscribeEvent.init", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "SubscribeEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Pubsub message.</p>\n\n<p>Returns:\n    self (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub_events.SubscribeEvent.run", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "SubscribeEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub_events.UserModerationEvent", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "UserModerationEvent", "kind": "class", "doc": "<p>User moderation event.</p>\n", "bases": "PubSubEvent"}, {"fullname": "twitch_bot.pubsub.pubsub_events.UserModerationEvent.__init__", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "UserModerationEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.pubsub.pubsub_events.UserModerationEvent.init", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "UserModerationEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Pubsub message.</p>\n\n<p>Returns:\n    self (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub_events.UserModerationEvent.run", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "UserModerationEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub_events.WhisperEvent", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "WhisperEvent", "kind": "class", "doc": "<p>Whisper event.</p>\n", "bases": "PubSubEvent"}, {"fullname": "twitch_bot.pubsub.pubsub_events.WhisperEvent.__init__", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "WhisperEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.pubsub.pubsub_events.WhisperEvent.init", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "WhisperEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Pubsub message.</p>\n\n<p>Returns:\n    self (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub_events.WhisperEvent.run", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "WhisperEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub_events.PongEvent", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "PongEvent", "kind": "class", "doc": "<p>Pong event.</p>\n", "bases": "PubSubEvent"}, {"fullname": "twitch_bot.pubsub.pubsub_events.PongEvent.__init__", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "PongEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.pubsub.pubsub_events.PongEvent.init", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "PongEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    data (dict): Pubsub message.</p>\n\n<p>Returns:\n    self (object): self.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.pubsub.pubsub_events.PongEvent.run", "modulename": "twitch_bot.pubsub.pubsub_events", "qualname": "PongEvent.run", "kind": "function", "doc": "<p>Run the code triggered by the event.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.run", "modulename": "twitch_bot.run", "kind": "module", "doc": "<p>Run the bot.</p>\n"}, {"fullname": "twitch_bot.run.get_args", "modulename": "twitch_bot.run", "qualname": "get_args", "kind": "function", "doc": "<p>Get the args from argparse.</p>\n\n<p>Returns:\n    args (dict): Arguments from argparse.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.run.end_tasks", "modulename": "twitch_bot.run", "qualname": "end_tasks", "kind": "function", "doc": "<p>End async tasks.</p>\n\n<p>Args:\n    tasks (list): List of async tasks.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">tasks</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.run.init", "modulename": "twitch_bot.run", "qualname": "init", "kind": "function", "doc": "<p>Initialize the bot.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.server_utils", "modulename": "twitch_bot.server_utils", "kind": "module", "doc": "<p>Requests stuff.</p>\n"}, {"fullname": "twitch_bot.server_utils.DummyResponse", "modulename": "twitch_bot.server_utils", "qualname": "DummyResponse", "kind": "class", "doc": "<p>DummyResponse object used to return data when bad requests are made.</p>\n\n<p>This allows us to return something valid without checking every time.</p>\n"}, {"fullname": "twitch_bot.server_utils.DummyResponse.__init__", "modulename": "twitch_bot.server_utils", "qualname": "DummyResponse.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.server_utils.DummyResponse.json", "modulename": "twitch_bot.server_utils", "qualname": "DummyResponse.json", "kind": "function", "doc": "<p>Mock the return data as a dictionary.</p>\n\n<p>Returns:\n    (dict): Empty dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.server_utils.check_server_response", "modulename": "twitch_bot.server_utils", "qualname": "check_server_response", "kind": "function", "doc": "<p>Decorator to check the response from the server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span>:</span></span>", "funcdef": "def"}, {"fullname": "twitch_bot.server_utils.get_request", "modulename": "twitch_bot.server_utils", "qualname": "get_request", "kind": "function", "doc": "<p>Check server response code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">client_reqrep</span><span class=\"o\">.</span><span class=\"n\">ClientResponse</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.server_utils.post_request", "modulename": "twitch_bot.server_utils", "qualname": "post_request", "kind": "function", "doc": "<p>Check server response code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">client_reqrep</span><span class=\"o\">.</span><span class=\"n\">ClientResponse</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.server_utils.delete_request", "modulename": "twitch_bot.server_utils", "qualname": "delete_request", "kind": "function", "doc": "<p>Check server response code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">client_reqrep</span><span class=\"o\">.</span><span class=\"n\">ClientResponse</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.server_utils.patch_request", "modulename": "twitch_bot.server_utils", "qualname": "patch_request", "kind": "function", "doc": "<p>Check server response code.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">client_reqrep</span><span class=\"o\">.</span><span class=\"n\">ClientResponse</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.system", "modulename": "twitch_bot.system", "kind": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "twitch_bot.system.system_utils", "modulename": "twitch_bot.system.system_utils", "kind": "module", "doc": "<p>System Utils.</p>\n"}, {"fullname": "twitch_bot.system.system_utils.get_cpu_percentage", "modulename": "twitch_bot.system.system_utils", "qualname": "get_cpu_percentage", "kind": "function", "doc": "<p>Get the CPU percentage in use.</p>\n\n<p>Returns:\n    (float): CPU percentage.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.system.system_utils.get_number_of_processes", "modulename": "twitch_bot.system.system_utils", "qualname": "get_number_of_processes", "kind": "function", "doc": "<p>Get the number of running processes.</p>\n\n<p>Return:\n    (int): Number of running processes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.system.system_utils.get_cpu_count", "modulename": "twitch_bot.system.system_utils", "qualname": "get_cpu_count", "kind": "function", "doc": "<p>Get the CPU count.</p>\n\n<p>Returns:\n    (int): Number of CPUs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.system.system_utils.get_cpu_speed", "modulename": "twitch_bot.system.system_utils", "qualname": "get_cpu_speed", "kind": "function", "doc": "<p>Get the CPU speed.</p>\n\n<p>Returns:\n    (int): Maximum CPU frequency in MHz.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.system.system_utils.get_memory_info", "modulename": "twitch_bot.system.system_utils", "qualname": "get_memory_info", "kind": "function", "doc": "<p>Get the percentage of available RAM.</p>\n\n<p>Args:\n    unit (str): Unit to return the temperature in.\n        Accepted values are 'kb', 'mb', 'gb', and 'tb'\n            (not case-sensative).\n        Default is 'kb'.</p>\n\n<p>Returns:\n    memory_dict (dict): Memory dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;kb&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.system.system_utils.get_disk_space", "modulename": "twitch_bot.system.system_utils", "qualname": "get_disk_space", "kind": "function", "doc": "<p>Get disk space.</p>\n\n<p>Args:\n    mount (str): Mount point.\n        If not given, the root will be used: '/' or 'C:'.\n    unit (str): Unit to return the temperature in.\n        Accepted values are 'kb', 'mb', 'gb', and 'tb'\n            (not case-sensative).\n        Default is 'kb'.</p>\n\n<p>Returns:\n    disk_info (dict): Disk space dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mount</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;kb&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.system.system_utils.get_cpu_temp", "modulename": "twitch_bot.system.system_utils", "qualname": "get_cpu_temp", "kind": "function", "doc": "<p>Get the CPU temperature.</p>\n\n<p>Note: This is currently available only for Raspberry Pi.\nTemperature is returned in Celcius.</p>\n\n<p>Args:\n    unit (str): Unit to return the temperature in.\n        Accepted values are 'C', 'F', and 'K' (not case-sensative).</p>\n\n<p>Returns:\n    cpu_temp (float): Temperature value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;C&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.system.system_utils.get_gpu_temp", "modulename": "twitch_bot.system.system_utils", "qualname": "get_gpu_temp", "kind": "function", "doc": "<p>Get the GPU temperature.</p>\n\n<p>Note: This is currently available only for Raspberry Pi.\nTemperature is returned in Celcius.</p>\n\n<p>Args:\n    unit (str): Unit to return the temperature in.\n        Accepted values are 'C', 'F', and 'K' (not case-sensative).</p>\n\n<p>Returns:\n    gpu_temp (float): Temperature value.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;C&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.tcp_utils", "modulename": "twitch_bot.tcp_utils", "kind": "module", "doc": "<p>Messaging via TCP.</p>\n\n<p>Used to communicate with external programs through a pseudo\nPublisher -> Subscriber relationship. TCP StreamReader is ignored.</p>\n"}, {"fullname": "twitch_bot.tcp_utils.TCPServer", "modulename": "twitch_bot.tcp_utils", "qualname": "TCPServer", "kind": "class", "doc": "<p>TCP server object.</p>\n"}, {"fullname": "twitch_bot.tcp_utils.TCPServer.__init__", "modulename": "twitch_bot.tcp_utils", "qualname": "TCPServer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.tcp_utils.TCPServer.init", "modulename": "twitch_bot.tcp_utils", "qualname": "TCPServer.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Returns:\n    self (TCPServer): Class instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.tcp_utils.TCPServer.run", "modulename": "twitch_bot.tcp_utils", "qualname": "TCPServer.run", "kind": "function", "doc": "<p>Run the TCP server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.tcp_utils.TCPServer.serve", "modulename": "twitch_bot.tcp_utils", "qualname": "TCPServer.serve", "kind": "function", "doc": "<p>Serve the TCP server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.tcp_utils.TCPServer.handle", "modulename": "twitch_bot.tcp_utils", "qualname": "TCPServer.handle", "kind": "function", "doc": "<p>Handle incoming and outgoing TCP messages.</p>\n\n<p>Args:\n    reader (StreamReader): Incoming TCP data.\n    writer (StreamWriter): Outgoing TCP data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">reader</span><span class=\"p\">:</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">streams</span><span class=\"o\">.</span><span class=\"n\">StreamReader</span>,</span><span class=\"param\">\t<span class=\"n\">writer</span><span class=\"p\">:</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">streams</span><span class=\"o\">.</span><span class=\"n\">StreamWriter</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.tcp_utils.TCPServer.publish_message", "modulename": "twitch_bot.tcp_utils", "qualname": "TCPServer.publish_message", "kind": "function", "doc": "<p>Publish a message via TCP.</p>\n\n<p>Args:\n    message (str): Message to publish.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.timer", "modulename": "twitch_bot.timer", "kind": "module", "doc": "<p>Init.</p>\n"}, {"fullname": "twitch_bot.timer.timer", "modulename": "twitch_bot.timer.timer", "kind": "module", "doc": "<p>Timer.</p>\n"}, {"fullname": "twitch_bot.timer.timer.Timer", "modulename": "twitch_bot.timer.timer", "qualname": "Timer", "kind": "class", "doc": "<p>Timer.</p>\n"}, {"fullname": "twitch_bot.timer.timer.Timer.__init__", "modulename": "twitch_bot.timer.timer", "qualname": "Timer.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.timer.timer.Timer.init", "modulename": "twitch_bot.timer.timer", "qualname": "Timer.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    interval (int): Time in seconds to create a timer event.\n        Default is 60 (1 minute).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">60</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.timer.timer.Timer.run", "modulename": "twitch_bot.timer.timer", "qualname": "Timer.run", "kind": "function", "doc": "<p>Create an event every time the interval expires.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.timer.timer_events", "modulename": "twitch_bot.timer.timer_events", "kind": "module", "doc": "<p>Timer Events.</p>\n"}, {"fullname": "twitch_bot.timer.timer_events.TimerEvent", "modulename": "twitch_bot.timer.timer_events", "qualname": "TimerEvent", "kind": "class", "doc": "<p>Timer event.</p>\n", "bases": "events.Event"}, {"fullname": "twitch_bot.timer.timer_events.TimerEvent.__init__", "modulename": "twitch_bot.timer.timer_events", "qualname": "TimerEvent.__init__", "kind": "function", "doc": "<p>Init.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "twitch_bot.timer.timer_events.TimerEvent.init", "modulename": "twitch_bot.timer.timer_events", "qualname": "TimerEvent.init", "kind": "function", "doc": "<p>Async init.</p>\n\n<p>Args:\n    interval (int): Timer interval.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.timer.timer_events.TimerEvent.run", "modulename": "twitch_bot.timer.timer_events", "qualname": "TimerEvent.run", "kind": "function", "doc": "<p>Run when a timer event is sent.</p>\n\n<p>This is used to trigger plugins that run on an interval.</p>\n\n<p>Args:\n    bot (Bot): Bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.utils", "modulename": "twitch_bot.utils", "kind": "module", "doc": "<p>Utilities.</p>\n"}, {"fullname": "twitch_bot.utils.parse_datetime", "modulename": "twitch_bot.utils", "qualname": "parse_datetime", "kind": "function", "doc": "<p>Parse a datetime string from the Twitch message into a datetime object.</p>\n\n<p>If the datetime cannot be parsed, it will return the current time.</p>\n\n<p>Args:\n    datetime_string (str): Datetime string.</p>\n\n<p>Returns:\n    datetime.datetime: Datetime in an object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">datetime_string</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.utils.get_viewer_count", "modulename": "twitch_bot.utils", "qualname": "get_viewer_count", "kind": "function", "doc": "<p>Get the current viewer count.</p>\n\n<p>Args:\n    bot (TwitchBot): The bot instance.</p>\n\n<p>Returns:\n    (int): Current viewer count.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.utils.get_follow_age", "modulename": "twitch_bot.utils", "qualname": "get_follow_age", "kind": "function", "doc": "<p>Get the length of time a user has been following.</p>\n\n<p>Args:\n    user_id (str): Twitch user ID.\n    bot (TwitchBot): The bot instance.</p>\n\n<p>Returns:\n    display_time (str): Length of time as a string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.utils.display_from_seconds", "modulename": "twitch_bot.utils", "qualname": "display_from_seconds", "kind": "function", "doc": "<p>Convert seconds to larger time intervals.</p>\n\n<p>Args:\n    seconds (int): Time in seconds.</p>\n\n<p>Returns:\n    (str): Time string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.utils.get_uptime", "modulename": "twitch_bot.utils", "qualname": "get_uptime", "kind": "function", "doc": "<p>Get how long a stream has been running.</p>\n\n<p>Args:\n    bot (TwitchBot): The bot instance.</p>\n\n<p>Returns:\n    (str): How long the stream has been running.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.utils.get_watch_time", "modulename": "twitch_bot.utils", "qualname": "get_watch_time", "kind": "function", "doc": "<p>Get how long a user has been watching the stream.</p>\n\n<p>Args:\n    bot (TwitchBot): The bot instance.\n    user (dict): User that sent the message.\n            {name: display name, id: user-id}</p>\n\n<p>Returns:\n    (str): How long the user has been watching the stream.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span>, </span><span class=\"param\"><span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.utils.graph_stream_stats", "modulename": "twitch_bot.utils", "qualname": "graph_stream_stats", "kind": "function", "doc": "<p>Graph the stream stats.</p>\n\n<p>Args:\n    bot (TwitchBot): The bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.utils.generate_stats_markdown", "modulename": "twitch_bot.utils", "qualname": "generate_stats_markdown", "kind": "function", "doc": "<p>Generate a markdown document with the stream stats.</p>\n\n<p>Args:\n    bot (TwitchBot): The bot instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bot</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "twitch_bot.zmq_utils", "modulename": "twitch_bot.zmq_utils", "kind": "module", "doc": "<p>Messaging via ZeroMQ.</p>\n\n<p>Used to communicate with external programs through a\nPublisher -> Subscriber relationship.</p>\n\n<h2 id=\"to-create-a-subscriber-use-the-following-template\">To create a subscriber, use the following template:</h2>\n\n<p>import zmq</p>\n\n<p>CONTEXT = zmq.Context()\nSOCKET = CONTEXT.socket(zmq.SUB)\nSOCKET.connect('tcp://localhost:5555')</p>\n\n<p>recipient = 'name_of_this_program'\nsocket.setsockopt_string(zmq.SUBSCRIBE, recipient)</p>\n\n<p>awaiting_message = True\nwhile awaiting_message:\n    string = socket.recv_string()\n    message = ' '.join(string.split()[1:])\n    # Do something with the message below.</p>\n"}, {"fullname": "twitch_bot.zmq_utils.publish_message", "modulename": "twitch_bot.zmq_utils", "qualname": "publish_message", "kind": "function", "doc": "<p>Publish a message to an external application via ZMQ.</p>\n\n<p>Args:\n    recipient (str): Intended recipient of the message.\n        This acts as the key used by the subscriber(s).\n    message (str): Message to send.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">recipient</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();